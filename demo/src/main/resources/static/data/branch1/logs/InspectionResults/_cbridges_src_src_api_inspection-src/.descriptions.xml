<inspections profile="CHS">
  <group name="Java 11">
    <inspection shortName="StringRepeatCanBeUsed" displayName="String.repeat() can be used" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports loops which could be replaced with single &lt;code&gt;String.repeat()&lt;/code&gt; method (available since Java 11). E.g.:
&lt;pre&gt;
  for(int i=0; i&amp;lt;count; i++) {
    sb.append(&apos;*&apos;);
  }
&lt;/pre&gt;
Such code could be replaced with &lt;code&gt;sb.append(&quot;*&quot;.repeat(count));&lt;/code&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  By default the inspection may wrap count expression with &lt;code&gt;Math.max(0, count)&lt;/code&gt; if it cannot prove statically that count is 
  non-negative. This is done to prevent possible semantics change, as &lt;code&gt;String.repeat()&lt;/code&gt; rejects negative numbers.
  You may disable this behavior via option if you don&apos;t like it. Similarly a String to repeat could be wrapped with 
  &lt;code&gt;String.valueOf&lt;/code&gt; to prevent possible &lt;code&gt;NullPointerException&lt;/code&gt; if it&apos;s unknown whether it could be &lt;code&gt;null&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReadWriteStringCanBeUsed" displayName="&apos;Files.readString()&apos; or &apos;Files.writeString()&apos; can be used" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports code fragments that could be replaced via the &lt;b&gt;Files.readString&lt;/b&gt; and &lt;b&gt;Files.writeString&lt;/b&gt;
methods introduced in Java 11.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Kotlin Android">
    <inspection shortName="TypeParameterFindViewById" displayName="Cast can be converted to findViewById with type parameter" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;findViewById&lt;/b&gt; calls with type casts which can be converted to &lt;b&gt;findViewById&lt;/b&gt; with a type parameter from Android 8.0 (API level 26).
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IllegalIdentifier" displayName="Illegal Android Identifier" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports identifiers in Android projects which are not accepted by the Android runtime (for example, method names containing spaces).
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Java 12">
    <inspection shortName="EnhancedSwitchMigration" displayName="Statement can be replaced with enhanced &apos;switch&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &apos;switch&apos; statements, which can be replaced with enhanced &apos;switch&apos; statement or expression.

&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 12 Preview&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EnhancedSwitchBackwardMigration" displayName="New style &apos;switch&apos; can be replaced with old style one" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports enhanced &apos;switch&apos; statements and expressions which can be replaced with a traditional &apos;switch&apos; statement.

&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 12 Preview&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Maven">
    <inspection shortName="MavenCoroutinesDeprecation" displayName="Incompatible kotlinx.coroutines dependency is used with Kotlin 1.3+ in Maven" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;kotlinx.coroutines&lt;/b&gt; libraries dependencies in Maven that should be updated in order
to be compatible with Kotlin 1.3+.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MavenRedundantGroupId" displayName="Redundant groupId" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports that definition of &amp;lt;groupId&amp;gt; is unnecessary, because it&apos;s already defined in the parent pom.xml.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MavenPropertyInParent" displayName="Usage of properties in parent description" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports that usage of properties in modules parent definition is prohibited
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MavenModelInspection" displayName="Maven Model Inspection" enabled="false">&lt;html&gt;
&lt;body&gt;

Inspects a Maven model for resolution problems.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MavenDuplicatePluginInspection" displayName="Duplicate plugin declaration" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks duplication of plugin declaration in pom.xml
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MavenDuplicateDependenciesInspection" displayName="Duplicate Dependencies" enabled="false">&lt;html&gt;
&lt;body&gt;
Maven Duplicate Dependencies Inspection
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="GPath">
    <inspection shortName="GroovyMapPutCanBeKeyedAccess" displayName="Call to Map.put can be keyed access" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;java.util.Map.put()&lt;/b&gt; methods. Such calls can be replaced
by the shorter and clearer keyed access form.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyListSetCanBeKeyedAccess" displayName="Call to List.set can be keyed access" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;java.util.List.set()&lt;/b&gt; methods. Such calls can be replaced
by the shorter and clearer keyed access form.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyMapGetCanBeKeyedAccess" displayName="Call to Map.get can be keyed access" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;java.util.Map.get()&lt;/b&gt; methods. Such calls can be replaced
by the shorter and clearer keyed access form.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyListGetCanBeKeyedAccess" displayName="Call to List.get can be keyed access" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;java.util.List.get()&lt;/b&gt; methods. Such calls can be replaced
by the shorter and clearer keyed access form.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Java 10">
    <inspection shortName="RedundantExplicitVariableType" displayName="Local variable type can be omitted" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports local variable types which are redundant, because they can be inferred from the context and thus can be replaced with &apos;var&apos;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="VariableTypeCanBeExplicit" displayName="Variable type can be explicit" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports local variables with &apos;var&apos; types when they can be replaced with explicit types
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Java 5">
    <inspection shortName="CollectionsFieldAccessReplaceableByMethodCall" displayName="Collections.EMPTY_* field access replaceable with &apos;Collections.empty*()&apos; method call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any access to the &lt;b&gt;java.util.Collections&lt;/b&gt;
fields &lt;b&gt;EMPTY_LIST&lt;/b&gt;, &lt;b&gt;EMPTY_MAP&lt;/b&gt;
or &lt;b&gt;EMPTY_SET&lt;/b&gt;. Those expressions can be replaced by method
calls to &lt;b&gt;emptyList()&lt;/b&gt;,
&lt;b&gt;emptyMap()&lt;/b&gt; and &lt;b&gt;emptySet()&lt;/b&gt;.
Such method calls prevent &quot;unchecked&quot; warnings by the compiler because the type parameters can be inferred.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher&lt;/p&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RawUseOfParameterizedType" displayName="Raw use of parameterized class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any uses of parameterized classes where the type parameters are omitted.
Such &lt;i&gt;raw&lt;/i&gt; uses of parameterized types are valid in Java, but defeat the purpose of using
type parameters, and may mask bugs. This inspection mirrors the &lt;i&gt;rawtypes&lt;/i&gt; warning of javac.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to ignore the construction of objects of parameterized types.
&lt;p&gt;
Use the second checkbox below to ignore raw types in type casts.
&lt;p&gt;
Use the third checkbox to ignore raw types in places where parameterized types would not be compilable
  (for example in array creation expressions or when overriding a library method)
&lt;p&gt;
Use the fourth checkbox to ignore raw types used in the parameters of methods overriding super methods.
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodCanBeVariableArityMethod" displayName="Method can be varargs method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods with which can be converted to a variable arity method. Example:
&lt;pre&gt;
  void process(String name, Object[] objects);
&lt;/pre&gt;
Can be converted to:
&lt;pre&gt;
  void process(String name, Object... objects);
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IndexOfReplaceableByContains" displayName="&apos;indexOf()&apos; expression is replaceable with &apos;contains()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;String.indexOf()&lt;/b&gt;
expressions which can be replaced with a call to the
&lt;b&gt;String.contains()&lt;/b&gt; method available in Java 5 and newer.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringBufferReplaceableByStringBuilder" displayName="&apos;StringBuffer&apos; may be &apos;StringBuilder&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any variables declared as &lt;b&gt;java.lang.StringBuffer&lt;/b&gt; which may be
more efficiently declared as &lt;b&gt;java.lang.StringBuilder&lt;/b&gt;.
&lt;b&gt;java.lang.StringBuilder&lt;/b&gt; is a non-thread-safe replacement for
&lt;b&gt;java.lang.StringBuffer&lt;/b&gt;, available in Java 5 and newer.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BigDecimalLegacyMethod" displayName="&apos;BigDecimal&apos; legacy method called" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;divide()&lt;/b&gt; or &lt;b&gt;setScale()&lt;/b&gt; that use the old &lt;b&gt;int&lt;/b&gt; constants for specifying the rounding mode.
Since JDK 1.5 methods taking a &lt;b&gt;RoundingMode&lt;/b&gt; &lt;b&gt;enum&lt;/b&gt; parameter are available instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryBoxing" displayName="Unnecessary boxing" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports explicit boxing, i.e. wrapping of primitive values in objects.
Explicit manual boxing is unnecessary under Java 5 and newer, and can be safely removed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to only report truly superfluous boxing, where a boxed value will immediately be implicitly or explicitly unboxed.
In this case the entire boxing-unboxing step can be removed. Simple explicit boxing will not be reported.
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="WhileCanBeForeach" displayName="&apos;while&apos; loop replaceable with &apos;foreach&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;while&lt;/b&gt; loops which iterate
over collections, and can be replaced with the &lt;b&gt;foreach&lt;/b&gt; iteration syntax. Example:
&lt;pre&gt;
  Iterator it = c.iterator();
  while(it.hasNext()) {
    Object obj = it.next();
    System.out.println(obj);
  }
&lt;/pre&gt;
Can be replaced with:
&lt;pre&gt;
  Iterator it = c.iterator();
  while(it.hasNext()) {
    Object obj = it.next();
    System.out.println(obj);
  }
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ForCanBeForeach" displayName="&apos;for&apos; loop replaceable with &apos;foreach&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;for&lt;/b&gt; loops which iterate
over collections or arrays, and can be replaced with the &lt;b&gt;foreach&lt;/b&gt; iteration syntax, available
in Java 5 and newer.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to find loops involving &lt;b&gt;list.get(index)&lt;/b&gt; calls.
These loops generally can be replaced with the &lt;b&gt;foreach&lt;/b&gt; loops, unless they modify underlying list in the process, e.g. by calling &lt;b&gt;list.remove(index)&lt;/b&gt;.
If latter is the case, &lt;b&gt;foreach&lt;/b&gt; form of loop may throw &lt;b&gt;ConcurrentModificationException&lt;/b&gt;.
&lt;p&gt;
Use the second checkbox below to ignore collections which do not have type parameters. This avoids the creating of
foreach loop variables of type &lt;b&gt;java.lang.Object&lt;/b&gt; and casts by the quickfix
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher&lt;/p&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryUnboxing" displayName="Unnecessary unboxing" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &quot;unboxing&quot;, e.g. explicit unwrapping of wrapped primitive values.
Unboxing is unnecessary under Java 5 and newer, and can be safely removed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to only report truly superfluous unboxing, where an unboxed value will immediately be implicitly or explicitly boxed.
In this case the entire unboxing-boxing step can be removed. Simple explicit unboxing will not be reported.
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Dependency issues">
    <inspection shortName="ClassWithTooManyDependents" displayName="Class with too many dependents" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any classes on which too many other classes
are directly dependent. Such classes may be expensive to modify, as changes to the class may
require changing many other classes. Only top-level classes are reported by this inspection.
Because this inspection requires global code analysis it is only available for &lt;em&gt;Analyze|Inspect Code&lt;/em&gt; or
&lt;em&gt;Analyze|Run Inspection by Name&lt;/em&gt; and it will not report in the editor.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of dependents a class may have before
triggering this inspection
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassWithTooManyTransitiveDependencies" displayName="Class with too many transitive dependencies" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any classes which are directly or indirectly dependent
on too many other classes. Such classes may be prone to instability,
as changes to any of the classes it is dependent on may require changing the class.
Only top-level classes are reported by this inspection.
Because this inspection requires global code analysis it is only available for &lt;em&gt;Analyze|Inspect Code&lt;/em&gt; or
&lt;em&gt;Analyze|Run Inspection by Name&lt;/em&gt; and it will not report in the editor.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of direct or indirect dependencies
a class may have before triggering this inspection
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CyclicClassDependency" displayName="Cyclic class dependency" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any classes which are mutually or cyclically dependent on
other classes. Such cyclic dependencies make for fragile code and high maintenance costs.
Because this inspection requires global code analysis it is only available for &lt;em&gt;Analyze|Inspect Code&lt;/em&gt; or
&lt;em&gt;Analyze|Run Inspection by Name&lt;/em&gt; and it will not report in the editor.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Dependency" displayName="Illegal package dependencies" enabled="true">&lt;html&gt;
&lt;body&gt;

This inspection detects violations of rules specified for dependency validation. &lt;br&gt; &lt;br&gt;
&lt;!-- tooltip end --&gt;
Use the &quot;Configure dependency rules&quot; button below to customize validation rules.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ClassWithTooManyDependencies" displayName="Class with too many dependencies" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any classes which are directly dependent on too many
other classes in the project. Such classes may be prone to instability, as modifications
to any of the classes it is dependent on may require changing the class. Only top-level
classes are reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Because this inspection requires global code analysis it is only available for &lt;em&gt;Analyze|Inspect Code&lt;/em&gt; or
&lt;em&gt;Analyze|Run Inspection by Name&lt;/em&gt; and it will not report in the editor.
&lt;p&gt;
Use the field below to specify the maximum number of dependencies a class may have.

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CyclicPackageDependency" displayName="Cyclic package dependency" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any packages which are mutually or cyclically dependent
on other packages. Such cyclic dependencies make for fragile code and high maintenance costs.
Because this inspection requires global code analysis it is only available for &lt;em&gt;Analyze|Inspect Code&lt;/em&gt; or
&lt;em&gt;Analyze|Run Inspection by Name&lt;/em&gt; and it will not report in the editor.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassWithTooManyTransitiveDependents" displayName="Class with too many transitive dependents" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any classes on which too many other classes are directly or indirectly dependent. Such classes may be expensive to modify,
as changes to the class may require changing many other classes. Only top-level classes
are reported by this inspection.
Because this inspection requires global code analysis it is only available for &lt;em&gt;Analyze|Inspect Code&lt;/em&gt; or
&lt;em&gt;Analyze|Run Inspection by Name&lt;/em&gt; and it will not report in the editor.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of direct or indirect dependents
a class may have before triggering this inspection
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Memory">
    <inspection shortName="InnerClassMayBeStatic" displayName="Inner class may be &apos;static&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any inner classes which may safely be made &lt;b&gt;static&lt;/b&gt;.
An inner class may be &lt;b&gt;static&lt;/b&gt; if it doesn&apos;t reference its enclosing instance.
&lt;p&gt;
A &lt;b&gt;static&lt;/b&gt; inner class does not keep an implicit reference to its enclosing instance.
This prevents a common cause of memory leaks and uses less memory per instance of the class.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticCollection" displayName="Static collection" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;Collection&lt;/b&gt; variables declared as &lt;b&gt;static&lt;/b&gt;. While
not necessarily a problem, static collections are often causes of memory leaks, and are
therefore prohibited by some coding standards.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ZeroLengthArrayInitialization" displayName="Zero-length array allocation" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on allocations of arrays with known lengths of zero. Since array lengths in
Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly
allocating new zero-length arrays. Such sharing may provide useful optimizations in program runtime or
footprint. Note that this inspection does not report zero-length arrays allocated as static final fields,
as it is assumed that those arrays are being used to implement array sharing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryEmptyArrayUsage" displayName="Unnecessary zero length array usage" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on allocations of arrays with known lengths of zero when there is a constant for that in the class of array&apos;s type.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SystemGC" displayName="Calls to &apos;System.gc()&apos; or &apos;Runtime.gc()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any call of &lt;b&gt;System.gc()&lt;/b&gt; or &lt;b&gt;Runtime.gc()&lt;/b&gt;.
While occasionally useful in testing, explicitly triggering garbage collection via &lt;b&gt;System.gc()&lt;/b&gt; is almost always
a bad idea in production code, and can result in serious performance problems.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AnonymousInnerClassMayBeStatic" displayName="Anonymous class may be a named &apos;static&apos; inner class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any anonymous classes which may safely be made into a named &lt;b&gt;static&lt;/b&gt; inner class.
An anonymous class may be &lt;b&gt;static&lt;/b&gt; if it doesn&apos;t explicitly reference its enclosing instance or local classes from its surrounding method.
&lt;p&gt;
A &lt;b&gt;static&lt;/b&gt; inner class does not keep an implicit reference to its enclosing instance.
This prevents a common cause of memory leaks and uses less memory per instance of the class.
  &lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringBufferField" displayName="StringBuilder field" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports fields with type
&lt;b&gt;java.lang.StringBuffer&lt;/b&gt; or &lt;b&gt;java.lang.StringBuilder&lt;/b&gt;.
StringBuffer fields can grow without limit, and are often the cause of
memory leaks.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReturnOfInnerClass" displayName="Return of instance of anonymous, local or inner class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;return&lt;/b&gt; statements returning an instance of an anonymous, local, or inner class.
Such instances keep an implicit reference to the outer instance.
Which means the instance can prevent the outer instance from being garbage collected.
Any caller of a method which returns such an instance might cause a memory leak by holding on to the instance returned.
&lt;p&gt;
Use the checkbox below to ignore returns from &lt;b&gt;protected&lt;/b&gt; or package-private methods.
Returns from &lt;b&gt;private&lt;/b&gt; methods are always ignored.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Migration">
    <inspection shortName="FromClosedRangeMigration" displayName="MIN_VALUE step in fromClosedRange() since 1.3" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Since Kotlin 1.3 it&apos;s prohibited to call &lt;i&gt;IntProgression.fromClosedRange()&lt;/i&gt; and &lt;i&gt;LongProgression.fromClosedRange()&lt;/i&gt; with
  &lt;i&gt;MIN_VALUE&lt;/i&gt; step. All such calls should be checked during migration to Kotlin 1.3+.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="KotlinDeprecation" displayName="Usage of redundant or deprecated syntax or deprecated symbols" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection is used during the code cleanup operation (&lt;b&gt;Analyze | Code Cleanup&lt;/b&gt;) to automatically
replace usages of obsolete language features or unnecessarily verbose code constructs with
compact and up-to-date syntax.
&lt;p&gt;
Deprecated symbol usages are also replaced with their proposed substitutions.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ObsoleteExperimentalCoroutines" displayName="Experimental coroutines usages are deprecated since 1.3" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports experimental coroutines usages that are incompatible with Kotlin 1.3+ and should be updated.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="EditorConfig">
    <inspection shortName="EditorConfigValueUniqueness" displayName="Uniqueness of value in list" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports repeated values in the list of the prohibited value repetitions.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigPairAcceptability" displayName="Pair unexpected" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports pairs of values that can&apos;t be used in current context.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigHeaderUniqueness" displayName="Uniqueness of EditorConfig section" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections which match the same file patterns.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigCharClassLetterRedundancy" displayName="Duplicate letter in char class" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports duplicate characters in the section&apos;s file wildcard pattern.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigEmptyHeader" displayName="Empty header" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections which have an empty file wildcard pattern.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigRootDeclarationUniqueness" displayName="Uniqueness of top-level declaration" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Checks that an EditorConfig file has only one top-level declaration.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EditorConfigValueCorrectness" displayName="Correctness of EditorConfig value" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports any unexpected values.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigPatternRedundancy" displayName="Redundancy of pattern enumeration" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports redundancy in patterns.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigCharClassRedundancy" displayName="Redundant char class" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports the file wildcard patterns with charclasses which have less than two symbols.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigShadowedOption" displayName="Meaningfulness of EditorConfig option" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties which don&apos;t affect the resulting code style.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigKeyCorrectness" displayName="Correctness of EditorConfig key" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports unknown property values.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigListAcceptability" displayName="List unexpected" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports lists of values that can&apos;t be used in current context.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigNoMatchingFiles" displayName="No matching files" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections which don&apos;t match any files in the project.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigUnexpectedComma" displayName="Unexpected comma" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports any commas that are not allowed in the current context.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigRootDeclarationCorrectness" displayName="Correctness of root declaration" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports unexpected top-level declarations.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EditorConfigDeprecatedDescriptor" displayName="Deprecation of EditorConfig element" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports deprecated properties.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigWildcardRedundancy" displayName="Wildcard redundancy" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports wildcard patterns that could be safely removed.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigUnusedDeclaration" displayName="Unused declaration" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports unused declarations.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigNumerousWildcards" displayName="Too many wildcards" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections that contain too many wildcards. They might lead to performance issues.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EditorConfigPatternEnumerationRedundancy" displayName="Redundant pattern enumeration" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports pattern enumerations that contain only one possible pattern.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigOptionRedundancy" displayName="Option redundancy" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports options that override other options but have the same properties and values.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigReferenceCorrectness" displayName="Correctness of identifier reference" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports invalid referenced identifiers.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigEmptySection" displayName="Emptiness of EditorConfig section" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections which don&apos;t have any properties.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigPartialOverride" displayName="Partial override" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports header with glob that has suspicious intersection with one of related globs. Example:
[{foo, bar}] and [{foo, bas}] have non-empty intersection and none of them is subcase of the other.
This is likely to be a typo.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigShadowingOption" displayName="Uniqueness of occurrence of EditorConfig option" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that disable any other properties declared earlier in the file.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigSpaceInHeader" displayName="Space in header" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports any suspicious spaces in the section&apos;s file wildcard pattern. Even though spaces can be used in the wildcard patterns, they are likely to be a typo.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigMissingRequiredDeclaration" displayName="Missing required declaration" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports declarations that miss required parts.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Javadoc">
    <inspection shortName="PackageDotHtmlMayBePackageInfo" displayName="&apos;package.html&apos; may be converted to &apos;package-info.java&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;package.html&lt;/b&gt; files. These files are used for documenting
packages. Since J2SE 5 it is recommended to use &lt;b&gt;package-info.java&lt;/b&gt; files instead, since such
files can also contain package annotations.  In this way, package-info.java becomes the
sole repository for package level annotations and documentation.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryJavaDocLink" displayName="Unnecessary Javadoc link" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any Javadoc &lt;b&gt;@see&lt;/b&gt;,
&lt;b&gt;{@link}&lt;/b&gt; and &lt;b&gt;{@linkplain}&lt;/b&gt;
tags which reference the method owning the comment, the super method of the
method owning the comment or the class containing the comment. Such links are
unnecessary and can be safely removed using this inspections quickfix. The
quickfix will remove the entire Javadoc comment if the link is its only content.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore inline links (&lt;b&gt;{@link}&lt;/b&gt; and &lt;b&gt;{@linkplain}&lt;/b&gt;)
to super methods. While a link to all super methods is automatically added by the
Javadoc tool, an inline link to the super method can occasionally be needed in
the text of the Javadoc.

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryInheritDoc" displayName="Unnecessary {@inheritDoc} Javadoc comment" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any Javadoc comments which contain only the &lt;b&gt;{@inheritDoc}&lt;/b&gt;
tag. Since Javadoc copies the super class&apos; comment if no comment is present, a
comment containing only an &lt;b&gt;{@inheritDoc}&lt;/b&gt; adds nothing.
&lt;p&gt;
Also reports &lt;b&gt;{@inheritDoc}&lt;/b&gt; usages in invalid locations, for example on fields.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavaDoc" displayName="Declaration has Javadoc problems" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection points out the following javadoc comment flaws: &lt;br&gt; &lt;br&gt;
&amp;nbsp;- no javadoc where it is required &lt;br&gt;
&amp;nbsp;- required tag is missing &lt;br&gt;
&amp;nbsp;- invalid or incomplete tag &lt;br&gt;
&amp;nbsp;- javadoc description is missing or incomplete &lt;br&gt; &lt;br&gt;
&lt;!-- tooltip end --&gt;
Use tabs and corresponding inspection options below, to define visibility scope where javadoc is required, as well as the
required javadoc tags for classes, methods, fields and inner classes.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MissingPackageInfo" displayName="Missing &apos;package-info.java&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports packages that contain classes but do not contain a &lt;b&gt;package-info.java&lt;/b&gt; or &lt;b&gt;package.html&lt;/b&gt; file and thus are
missing package documentation.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DanglingJavadoc" displayName="Dangling Javadoc comment" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports dangling Javadoc comments.
Javadoc comment are dangling if they don&apos;t belong to any class, method or field.
For example a Javadoc comment in between method declarations that have their own javadoc comments.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlTagCanBeJavadocTag" displayName="&lt;code&gt;...&lt;/code&gt; can be replaced with {@code ...}" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports use of &lt;b&gt;&amp;lt;code&amp;gt;&lt;/b&gt; tags in Javadoc comments. Since JDK1.5
these constructs may be replaced with &lt;b&gt;{@code ...}&lt;/b&gt; constructs. This allows the use of angle brackets (&amp;lt;, &amp;gt;)
inside the comment, instead of HTML character entities.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PackageInfoWithoutPackage" displayName="&apos;package-info.java&apos; without &apos;package&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;package-info.java&lt;/b&gt; files without a &lt;b&gt;package&lt;/b&gt; statement.
The Javadoc tool considers such files documentation for the default package even when the file is located somewhere else.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavadocHtmlLint" displayName="HTML problems in Javadoc (DocLint)" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects HTML issues in the Javadoc comments (such as unclosed, empty, or misplaced tags) outlawed since Java 8.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavadocReference" displayName="Declaration has problems in Javadoc references" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection points out unresolved references inside javadoc
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MissingDeprecatedAnnotation" displayName="Missing @Deprecated annotation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any module declarations, classes, fields, or methods which have the &lt;b&gt;@deprecated&lt;/b&gt;
javadoc tag but do not have the &lt;b&gt;@java.lang.Deprecated&lt;/b&gt; annotation.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher&lt;/p&gt;
&lt;p&gt;
Use the checkbox below to warn on symbols annotated with &lt;b&gt;@Deprecated&lt;/b&gt; without a corresponding explanation in a
&lt;b&gt;@deprecated&lt;/b&gt; Javadoc tag.

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Security">
    <inspection shortName="SerializableDeserializableClassInSecureContext" displayName="Serializable class in secure context" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes which may be serialized or deserialized. A class
may be serialized if it supports the &lt;b&gt;Serializable&lt;/b&gt; interface,
and its &lt;b&gt;readObject()&lt;/b&gt; and &lt;b&gt;writeObject()&lt;/b&gt; methods are not defined to always
throw an exception. Serializable classes may be dangerous in code intended for secure use.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the table below to specify what specific classes and their inheritors should be excluded
  from being checked by this inspection. This is meant for those classes which, although they inherit
  Serializable from a superclass, are not intended for serialization. Such classes would lead this
  inspection to report unnecessarily. &lt;br&gt;
  Note that it may be more secure to add &lt;b&gt;readObject()&lt;/b&gt; and &lt;b&gt;writeObject()&lt;/b&gt; methods which always throw an exception, instead.
&lt;p&gt;
  Use the checkbox below to ignore &lt;b&gt;Serializable&lt;/b&gt; anonymous classes.
&lt;p&gt;
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JDBCExecuteWithNonConstantString" displayName="Call to &apos;Statement.execute()&apos; with non-constant string" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;java.sql.Statement.execute()&lt;/b&gt;, or any
of its variants, which take a dynamically-constructed string as the query to execute.
Constructed SQL statements are a common source of security breaches.
By default this inspection ignores compile-time constants.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to consider any &lt;b&gt;static&lt;/b&gt; &lt;b&gt;final&lt;/b&gt; fields as constant.
Be careful, because strings like the following will be ignored when the option is enabled:
&lt;pre&gt;
&lt;code&gt;&lt;b&gt;private static final&lt;/b&gt; String SQL =
  &quot;SELECT * FROM user WHERE name=&apos;&quot; + getUserInput() + &quot;&apos;&quot;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CustomClassloader" displayName="Custom ClassLoader" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any user-defined subclasses of &lt;b&gt;java.lang.ClassLoader&lt;/b&gt;.
While not necessarily representing a security hole, such classes should be thoroughly
and professionally inspected for possible security issues.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CloneableClassInSecureContext" displayName="Cloneable class in secure context" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes which may be cloned. A class
may be cloned if it supports the &lt;b&gt;Cloneable&lt;/b&gt; interface,
and its &lt;b&gt;clone()&lt;/b&gt; method is not defined to immediately
throw an error. Cloneable classes may be dangerous in code intended for secure use.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonFinalClone" displayName="Non-final &apos;clone()&apos; in secure context" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;clone()&lt;/b&gt; methods which
are not declared &lt;b&gt;final&lt;/b&gt;. Since &lt;b&gt;clone()&lt;/b&gt; may
be used to instantiate objects without using a constructor, allowing the &lt;b&gt;clone()&lt;/b&gt;
method to be overridden may result in corrupted objects, and possible security
exploits. This may be prevented by making the &lt;b&gt;clone()&lt;/b&gt;
method &lt;b&gt;final&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LoadLibraryWithNonConstantString" displayName="Call to &apos;System.loadLibrary()&apos; with non-constant string" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;java.lang.System.loadLibrary()&lt;/b&gt;, &lt;b&gt;java.lang.System.load()&lt;/b&gt;, &lt;b&gt;java.lang.Runtime.loadLibrary()&lt;/b&gt;
and &lt;b&gt;java.lang.Runtime.load()&lt;/b&gt;
which take a dynamically-constructed string as the name of the library.
Constructed library name strings are a common source of security breaches.
By default this inspection ignores compile-time constants.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to consider any &lt;b&gt;static&lt;/b&gt; &lt;b&gt;final&lt;/b&gt; fields as constant.
Be careful, because strings like the following will be ignored when the option is enabled:
&lt;pre&gt;
&lt;code&gt;&lt;b&gt;private static final&lt;/b&gt; String LIBRARY = getUserInput();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CustomSecurityManager" displayName="Custom SecurityManager" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any user-defined subclasses of &lt;b&gt;java.lang.SecurityManager&lt;/b&gt;.
While not necessarily representing a security hole, such classes should be thoroughly
and professionally inspected for possible security issues.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonStaticInnerClassInSecureContext" displayName="Non-&apos;static&apos; inner class in secure context" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;b&gt;static&lt;/b&gt; inner classes.
Compilation of such classes causes the creation of hidden, package-visible methods on the parent class, which may
compromise security.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicStaticCollectionField" displayName="&apos;public static&apos; collection field" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports modifiable &lt;b&gt;public&lt;/b&gt; &lt;b&gt;static&lt;/b&gt; Collection fields. Often used
to store collections of constant values, these fields nonetheless represent a security
hazard, as their contents may be modified, even if the field is declared as &lt;b&gt;final&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the table below to specify methods returning unmodifiable collections.
  &lt;b&gt;public&lt;/b&gt; &lt;b&gt;static&lt;/b&gt; Collection fields initialized with these methods will not be reported.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicStaticArrayField" displayName="&apos;public static&apos; array field" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;public&lt;/b&gt; &lt;b&gt;static&lt;/b&gt; array fields. Often used
to store arrays of constant values, these fields nonetheless represent a security
hazard, as their contents may be modified, even if the field is declared as &lt;b&gt;final&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassLoaderInstantiation" displayName="ClassLoader instantiation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any instantiations of &lt;b&gt;java.lang.ClassLoader&lt;/b&gt; objects.
While often benign, any instantiations to &lt;b&gt;ClassLoader&lt;/b&gt; should be closely examined in any security audit.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DesignForExtension" displayName="Design for extension" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any methods which are not &lt;b&gt;static&lt;/b&gt;,
&lt;b&gt;private&lt;/b&gt;, &lt;b&gt;final&lt;/b&gt; or &lt;b&gt;abstract&lt;/b&gt;,
and whose bodies are not empty. Coding in a style that avoids such methods protects
the contracts of classes from being broken by their subclasses. The benefit of this style is that
subclasses cannot corrupt the state of the superclass by forgetting to call the super method.
The cost is that subclasses are limited in their flexibility, in particular they cannot prevent
execution of code in the superclass.
&lt;p&gt;
This inspection is intended for code to be used in secure environments, and is probably not
appropriate for less restrictive environments.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SystemProperties" displayName="Access of system properties" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any accesses of the System properties. While accessing the
System properties is not a security risk in it self, it is often found in malicious code.
Accesses to System properties should be closely examined in any security audit.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RuntimeExecWithNonConstantString" displayName="Call to &apos;Runtime.exec()&apos; with non-constant string" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;java.lang.Runtime.exec()&lt;/b&gt; or any
of its variants which take a dynamically-constructed string as the command to execute.
Constructed execution strings are a common source of security breaches.
By default this inspection ignores compile-time constants.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to consider any &lt;b&gt;static&lt;/b&gt; &lt;b&gt;final&lt;/b&gt; fields as constant.
Be careful, because strings like the following will be ignored when the option is enabled:
&lt;pre&gt;
&lt;code&gt;&lt;b&gt;private static final&lt;/b&gt; String COMMAND =
  &quot;ping &quot; + getDomainFromUserInput() + &quot;&apos;&quot;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SystemSetSecurityManager" displayName="Call to &apos;System.setSecurityManager()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;System.setSecurityManager()&lt;/b&gt;.
While often benign, any call to &lt;b&gt;System.setSecurityManager()&lt;/b&gt; should be closely examined in any security audit.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnsecureRandomNumberGeneration" displayName="Insecure random number generation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any uses of &lt;b&gt;java.lang.Random&lt;/b&gt; or
&lt;b&gt;java.lang.math.Random()&lt;/b&gt;. In secure environments,
&lt;b&gt;java.secure.SecureRandom&lt;/b&gt; is a better choice, offering cryptographically secure
random number generation.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JDBCPrepareStatementWithNonConstantString" displayName="Call to &apos;Connection.prepare*()&apos; with non-constant string" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;java.sql.Connection.prepareStatement()&lt;/b&gt;,
&lt;b&gt;java.sql.Connection.prepareCall()&lt;/b&gt;, or any
of their variants, which take a dynamically-constructed string as the statement to prepare.
Constructed SQL statements are a common source of security breaches.
By default this inspection ignores compile-time constants.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to consider any &lt;b&gt;static&lt;/b&gt; &lt;b&gt;final&lt;/b&gt; fields as constant.
Be careful, because strings like the following will be ignored when the option is enabled:
&lt;pre&gt;
&lt;code&gt;&lt;b&gt;private static final&lt;/b&gt; String SQL =
  &quot;SELECT * FROM user WHERE name=&apos;&quot; + getUserInput() + &quot;&apos;&quot;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Java 7">
    <inspection shortName="TryFinallyCanBeTryWithResources" displayName="&apos;try finally&apos; replaceable with &apos;try&apos; with resources" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;try finally&lt;/b&gt; statements which can use Java 7
Automatic Resource Management. A quickfix is available to convert the &lt;b&gt;try finally&lt;/b&gt;
statement into a &lt;b&gt;try&lt;/b&gt; with resources statement.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 7 or higher&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SafeVarargsDetector" displayName="Possible heap pollution from parameterized vararg type" enabled="false">&lt;html&gt;
&lt;body&gt;
  Reports all methods with variable arity which can be annotated as @SafeVarargs.
  @SafeVarargs annotation suppresses unchecked warnings about parameterized array creation at call sites.
  &lt;p&gt;
  This annotation is not supported under Java 1.6 or earlier JVMs.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EqualsReplaceableByObjectsCall" displayName="&apos;equals()&apos; expression replaceable by &apos;Objects.equals()&apos; expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports expressions that can be replaced with a call to &lt;code&gt;java.util.Objects.equals()&lt;/code&gt;, which is available since JDK 1.7.
For example:
&lt;p&gt;
  &lt;code&gt;&lt;pre&gt;a == b || a != &lt;b&gt;null&lt;/b&gt; &amp;&amp; a.equals(b)&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;
  &lt;code&gt;&lt;pre&gt;a != &lt;b&gt;null&lt;/b&gt; ? a.equals(b) : b == &lt;b&gt;null&lt;/b&gt;&lt;/pre&gt;&lt;/code&gt;
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Replacing expressions like &lt;code&gt;&lt;pre&gt;a != null &amp;&amp; a.equals(b)&lt;/pre&gt;&lt;/code&gt; with
  &lt;code&gt;&lt;pre&gt;Objects.equals(a, b)&lt;/pre&gt;&lt;/code&gt; slightly changes the semantics,
  but if that&apos;s what you need there&apos;s a check box for that in the inspection settings.
&lt;p&gt;This inspection only reports if the language level of the project or module is 7 or higher&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Convert2Diamond" displayName="Explicit type can be replaced with &lt;&gt;" enabled="false">&lt;html&gt;
&lt;body&gt;
  Reports all new expressions with type arguments which can be replaced with diamond type &amp;lt;&amp;gt;
  &lt;p&gt;
  Such &lt;b&gt;&amp;lt;&amp;gt;&lt;/b&gt; syntax is not supported under Java 1.6 or earlier JVMs.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="TryWithIdenticalCatches" displayName="Identical &apos;catch&apos; branches in &apos;try&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports identical &lt;b&gt;catch&lt;/b&gt; sections in &lt;b&gt;try&lt;/b&gt; blocks under JDK 7. A quickfix is available to collapse the sections into
a multi-catch section.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 7 or higher&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Style issues">
    <inspection shortName="NestedLambdaShadowedImplicitParameter" displayName="Nested lambda has shadowed implicit parameter" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a nested lambda with shadowed implicit parameter.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReplaceNegatedIsEmptyWithIsNotEmpty" displayName="Replace negated &apos;isEmpty&apos; with &apos;isNotEmpty&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;!collection.isEmpty()/isNotEmpty()&lt;/b&gt; call can be replaced with &lt;b&gt;collection.isNotEmpty()/isEmpty()&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ObjectLiteralToLambda" displayName="Object literal can be converted to lambda" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports an anonymous object literal implementing a Java interface with a single abstract method that can be converted into a call with a lambda expression.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SuspiciousAsDynamic" displayName="Suspicious &apos;asDynamic&apos; member invocation" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a suspicious &lt;b&gt;asDynamic&lt;/b&gt; member invocation.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReplaceRangeStartEndInclusiveWithFirstLast" displayName="Replace Range &apos;start&apos; or &apos;endInclusive&apos; with &apos;first&apos; or &apos;last&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports usages of &lt;b&gt;boxed&lt;/b&gt; &lt;code&gt;Range.start&lt;/code&gt; and &lt;code&gt;Range.endInclusive&lt;/code&gt; properties.
These properties can be replaced with &lt;b&gt;unboxed&lt;/b&gt; &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; properties.
Example: &lt;b&gt;range.start&lt;/b&gt; can be replaced with &lt;b&gt;range.first&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReplaceNotNullAssertionWithElvisReturn" displayName="Replace &apos;!!&apos; with &apos;?: return&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports not-null assertion (&lt;b&gt;!!&lt;/b&gt;) calls that can be replaced with elvis and return (&lt;b&gt;?: return&lt;/b&gt;). For example:
&lt;br /&gt;&lt;br /&gt;
&lt;pre&gt;
val number: Int? = 42
fun foo() {
    val a = number!! // Replace &apos;!!&apos; with &apos;?: return&apos;
    println(1 + a)
}
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SortModifiers" displayName="Non-canonical modifier order" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports modifiers which have a different order from the one recommended in the style guide,
and offers to reorder them.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="OptionalExpectation" displayName="Optionally expected annotation has no actual annotation" enabled="false">&lt;html&gt;
&lt;body&gt;
This special inspection reports optionally expected annotations without actual annotation in some platform modules.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AddVarianceModifier" displayName="Type parameter can have &apos;in&apos; or &apos;out&apos; variance" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports type parameters that can have an &lt;b&gt;in&lt;/b&gt; or &lt;b&gt;out&lt;/b&gt; variance.
Usage of &lt;b&gt;in&lt;/b&gt; and &lt;b&gt;out&lt;/b&gt; variances leads to more precise type inference in Kotlin.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CanBeVal" displayName="Local &apos;var&apos; is never modified and can be declared as &apos;val&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports mutable local variables (declared with a &lt;b&gt;var&lt;/b&gt; keyword) that can be made immutable.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JoinDeclarationAndAssignment" displayName="Join declaration and assignment" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports property declarations that can be joined with the following assignment.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReplaceRangeToWithUntil" displayName="&apos;rangeTo&apos; or the &apos;..&apos; call can be replaced with &apos;until&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports calls to &lt;b&gt;rangeTo&lt;/b&gt; or the &lt;b&gt;..&lt;/b&gt; operator instead of calls to &lt;b&gt;until&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DirectUseOfResultType" displayName="Function returning Result directly" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports functions with &lt;b&gt;Result&lt;/b&gt; result.

&lt;b&gt;Result&lt;/b&gt; should never be used as return type.
Throw exception, or use nullable type, or use domain-specific result class to indicate failure.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnusedMainParameter" displayName="Main parameter is not necessary" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports an unused main function parameter which is not necessary since Kotlin 1.3.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SimplifiableCall" displayName="Library function call could be simplified" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports library function calls which could be replaced by simplified one,
e.g. &lt;b&gt;flatMap { it }&lt;/b&gt; call could be simplified to &lt;b&gt;flatten()&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JavaMapForEach" displayName="Java Map.forEach method call should be replaced with Kotlin&apos;s forEach" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a Java Map.&lt;b&gt;forEach&lt;/b&gt; method call replaceable by Kotlin&apos;s &lt;b&gt;forEach&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConvertTryFinallyToUseCall" displayName="Convert try / finally to use() call" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a &lt;b&gt;try-finally&lt;/b&gt; block with &lt;b&gt;resource.close()&lt;/b&gt; in &lt;b&gt;finally&lt;/b&gt; which can be converted to a &lt;b&gt;resource.use()&lt;/b&gt; call.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReplaceToWithInfixForm" displayName="Replace ’to’ with infix form" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;to&lt;/b&gt; function calls replaceable with the infix form.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MoveLambdaOutsideParentheses" displayName="Lambda argument inside parentheses" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects a lambda expression inside parentheses which can be moved outside of them.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseWithIndex" displayName="Manually incremented index variable can be replaced with use of &apos;withIndex()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;for&lt;/b&gt; loops with a manually incremented index variable that can be replaced with the use of a &lt;b&gt;withIndex()&lt;/b&gt; function.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConvertSecondaryConstructorToPrimary" displayName="Convert to primary constructor" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a secondary constructor that can be replaced with a more concise primary constructor.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReplaceCollectionCountWithSize" displayName="Collection count can be converted to size" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports usages of collection &lt;code&gt;count()&lt;/code&gt;. These function calls can be replaced with &lt;code&gt;size&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReplaceSizeCheckWithIsNotEmpty" displayName="Replace size check with &apos;isNotEmpty()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects size checks of &lt;b&gt;Collections/Array/String&lt;/b&gt; that should be replaced with &lt;b&gt;isNotEmpty()&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SimplifyBooleanWithConstants" displayName="Boolean expression that can be simplified" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports boolean expressions that have parts which can be reduced to constants.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReplaceToStringWithStringTemplate" displayName="Replace &apos;toString&apos; with string template" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;code&gt;toString&lt;/code&gt; function calls replaceable with string template.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConvertTwoComparisonsToRangeCheck" displayName="Convert two comparisons to &apos;in&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports two consecutive comparisons which can be converted to a range check.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReplaceJavaStaticMethodWithKotlinAnalog" displayName="Replace Java static method with Kotlin analog" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a Java static method call replaceable by a Kotlin function, e.g. &lt;b&gt;System.out.println()&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReplaceAssociateFunction" displayName="Replace &apos;associate&apos; with &apos;associateBy&apos; or &apos;associateWith&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;associate&lt;/b&gt; calls that can be replaced with &lt;b&gt;associateBy&lt;/b&gt; or &lt;b&gt;associateWith&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReplacePutWithAssignment" displayName="map.put() can be converted to assignment" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;map.put&lt;/b&gt; function calls replaceable with the indexing operator (&lt;b&gt;[]&lt;/b&gt;).
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimplifyAssertNotNull" displayName="‘assert’ call can be replaced with ‘!!’ or ‘?:&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects &lt;b&gt;assert&lt;/b&gt; calls checking that a variable declared above has a non-null value.
Such asserts can be replaced with a use of &lt;b&gt;!!&lt;/b&gt; or &lt;b&gt;?:&lt;/b&gt; operator in the variable initializer.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="IfThenToSafeAccess" displayName="If-Then foldable to &apos;?.&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;if-then&lt;/b&gt; expressions that can be folded into safe-access (&lt;b&gt;?.&lt;/b&gt;) expressions.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConvertLambdaToReference" displayName="Can be replaced with function reference" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a lambda (function literal) expression that can be replaced with a function reference expression.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CopyWithoutNamedArguments" displayName="&apos;copy&apos; method of data class is called without named arguments" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports calls to a data class&apos; &lt;b&gt;copy&lt;/b&gt; method without named arguments.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReplaceSizeZeroCheckWithIsEmpty" displayName="Replace size zero check with &apos;isEmpty()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects &lt;b&gt;size == 0&lt;/b&gt; checks of &lt;b&gt;Collections/Array/String&lt;/b&gt; that should be replaced with &lt;b&gt;isEmpty()&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MoveVariableDeclarationIntoWhen" displayName="Variable declaration could be moved inside `when`" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports the variable declaration that can be moved inside &lt;code&gt;when&lt;/code&gt; expression.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReplaceGetOrSet" displayName="Explicit &apos;get&apos; or &apos;set&apos; call" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports explicit calls of &lt;b&gt;get&lt;/b&gt; or &lt;b&gt;set&lt;/b&gt; functions which can be replaced by an indexing operator &lt;b&gt;[]&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ProtectedInFinal" displayName="&apos;protected&apos; visibility is effectively &apos;private&apos; in a final class" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;protected&lt;/b&gt; visibility used inside of a non-inheritable class.
In such cases &lt;b&gt;protected&lt;/b&gt; members are accessible only in the class itself, so they are effectively &lt;b&gt;private&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DeferredIsResult" displayName="Function returning Deferred directly" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports functions with &lt;b&gt;kotlinx.coroutines.Deferred&lt;/b&gt; result.

Functions which use &lt;b&gt;Deferred&lt;/b&gt; as return type should have a name with suffix &lt;b&gt;Async&lt;/b&gt;.
Otherwise, it&apos;s recommended to turn a function into a suspend function and unwrap &lt;b&gt;Deferred&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimplifyNegatedBinaryExpression" displayName="Negated boolean expression that can be simplified" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports negated binary expressions that can be simplified.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MayBeConstant" displayName="Might be &apos;const&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports an object and a top-level &lt;b&gt;val&lt;/b&gt; that might be declared as &lt;b&gt;const&lt;/b&gt;
for better performance and Java interoperability.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="BooleanLiteralArgument" displayName="Boolean literal argument without parameter name" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports boolean literal arguments that could be named to remove ambiguity.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="Reformat" displayName="File is not formatted according to project settings" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports places that are not formatted according to project settings.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UsePropertyAccessSyntax" displayName="Accessor call that can be replaced with property access syntax" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports calls to Java &lt;b&gt;get&lt;/b&gt; and &lt;b&gt;set&lt;/b&gt; methods that can be replaced with the use of Kotlin synthetic properties.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReplaceCallWithBinaryOperator" displayName="Can be replaced with binary operator" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports function calls that can be replaced with binary operators, especially comparison-related.
Example: &lt;b&gt;2.compareTo(1) &gt; 0&lt;/b&gt; can be replaced by &lt;b&gt;2 &gt; 1&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReplaceWithOperatorAssignment" displayName="Assignment that can be replaced with operator assignment" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports modifications of variables with a simple assignment (such as &lt;b&gt;y = y + x&lt;/b&gt;)
that can be replaced with an operator assignment.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnlabeledReturnInsideLambda" displayName="Unlabeled return inside lambda" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports unlabeled &lt;b&gt;return&lt;/b&gt; inside lambda.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CascadeIf" displayName="Cascade if can be replaced with when" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;if&lt;/b&gt; statements with three or more branches that can be replaced with a &lt;b&gt;when&lt;/b&gt; expression.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ScopeFunctionConversion" displayName="Scope function can be converted to another one" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection provides actions for converting scope functions (&lt;b&gt;let&lt;/b&gt;, &lt;b&gt;run&lt;/b&gt;, &lt;b&gt;apply&lt;/b&gt;, &lt;b&gt;also&lt;/b&gt;) between each other.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReplaceAssertBooleanWithAssertEquality" displayName="Replace assert boolean with assert equality" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports assert boolean function calls replaceable with assert equality function.
Example: &lt;b&gt;assertTrue(a == b)&lt;/b&gt; can be replaced by &lt;b&gt;assertEquals(a, b)&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MapGetWithNotNullAssertionOperator" displayName="map.get() with not-null assertion operator (!!)" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;map.get()!!&lt;/b&gt; that can be replaced with &lt;b&gt;map.getValue()&lt;/b&gt;, &lt;b&gt;map.getOrElse()&lt;/b&gt;, etc.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MemberVisibilityCanBePrivate" displayName="Class member can have &apos;private&apos; visibility" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports class members which can be made private.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConvertPairConstructorToToFunction" displayName="Convert Pair constructor to &apos;to&apos; function" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a &lt;b&gt;Pair&lt;/b&gt; constructor that can be converted to a &lt;b&gt;to&lt;/b&gt; function call.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ImplicitThis" displayName="Implicit &apos;this&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports usages of implicit &lt;b&gt;this&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="IfThenToElvis" displayName="If-Then foldable to &apos;?:&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;if-then&lt;/b&gt; expressions that can be folded into elvis (&lt;b&gt;?:&lt;/b&gt;) expressions.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConvertReferenceToLambda" displayName="Can be replaced with lambda" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a function reference expression that can be replaced with a lambda.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReplaceStringFormatWithLiteral" displayName="Replace with string templates" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;String.format&lt;/b&gt; call can be replaced with string templates.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConvertToStringTemplate" displayName="String concatenation that can be converted to string template" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports string concatenation that can be converted to a simple string template (the one with no &lt;b&gt;${...}&lt;/b&gt; entries).
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConvertCallChainIntoSequence" displayName="Call chain on collection could be converted into &apos;Sequence&apos; to improve performance" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports call chain on collection should be converted into &lt;b&gt;Sequence&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FunctionWithLambdaExpressionBody" displayName="Function with `= { ... }` and inferred return type" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports function with `&lt;b&gt;= { ... }&lt;/b&gt;` and inferred return type.

&lt;pre&gt;
fun sum(a: Int, b: Int) = { a + b } // The return type of this function is &apos;() -&gt; Int&apos;.
&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RemoveEmptyParenthesesFromAnnotationEntry" displayName="Remove unnecessary parentheses" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports unnecessary parentheses in annotation entries. For example:
&lt;br /&gt;&lt;br /&gt;
&lt;pre&gt;
annotation class MyAnnotation

@MyAnnotation&lt;b&gt;()&lt;/b&gt; // There parentheses can be omitted
fun test() {

}
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantElseInIf" displayName="Redundant &apos;else&apos; in &apos;if&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports redundant &lt;b&gt;else&lt;/b&gt; in &lt;b&gt;if&lt;/b&gt; with &lt;b&gt;return&lt;/b&gt;:

&lt;pre&gt;
fun foo(arg: Boolean): Int {
    if (arg) return 0
    // This else is redundant, code in braces could be just shifted left
    else {
        ...
    }
}
&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JavaCollectionsStaticMethod" displayName="Java Collections static method call can be replaced with Kotlin stdlib" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a Java &lt;b&gt;Collections&lt;/b&gt; static method call replaceable by Kotlin stdlib, e.g. &lt;b&gt;Collections.sort(list)&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantAsync" displayName="Redundant &apos;async&apos; call" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;async&lt;/b&gt; call that is immediately followed by &lt;b&gt;await&lt;/b&gt;.
Such a call can be replaced with a kind of blocking call.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LiftReturnOrAssignment" displayName="Return or assignment can be lifted out" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;if&lt;/b&gt;, &lt;b&gt;when&lt;/b&gt; and &lt;b&gt;try&lt;/b&gt; statements that can be converted to expressions
by lifting a return or an assignment out. Typical example:
&lt;br /&gt;&lt;br /&gt;

&lt;pre&gt;
&lt;b&gt;fun&lt;/b&gt; foo(arg: Boolean): String {
    &lt;b&gt;when&lt;/b&gt; (arg) {
        &lt;b&gt;true&lt;/b&gt; -&gt; &lt;b&gt;return&lt;/b&gt; &quot;Truth&quot;
        &lt;b&gt;false&lt;/b&gt; -&gt; &lt;b&gt;return&lt;/b&gt; &quot;Falsehood&quot;
    }
}
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LoopToCallChain" displayName="Loop can be replaced with stdlib operations" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;for&lt;/b&gt; loops that can be replaced with a sequence of stdlib operations (like &lt;b&gt;map&lt;/b&gt;, &lt;b&gt;filter&lt;/b&gt;, etc).
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UseExpressionBody" displayName="Expression body syntax is preferable here" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports returns (one-liners or &lt;b&gt;when&lt;/b&gt;s) replaceable by expression body syntax.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NullableBooleanElvis" displayName="Equality check can be used instead of elvis for nullable boolean check" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports when an equality check should be used instead of the elvis operator.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantRunCatching" displayName="Redundant &apos;runCatching&apos; call" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;runCatching&lt;/b&gt; call that is immediately followed by &lt;b&gt;getOrThrow&lt;/b&gt;.
Such a call can be replaced with just &lt;b&gt;run&lt;/b&gt; call.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IntroduceWhenSubject" displayName="&apos;when&apos; that can be simplified by introducing an argument" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a &lt;b&gt;when&lt;/b&gt; expression that can be simplified by introducing a subject argument.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SafeCastWithReturn" displayName="Safe cast with &apos;return&apos; should be replaced with &apos;if&apos; type check" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports safe cast with &apos;return&apos; should be replaced with &apos;if&apos; type check. For example:
&lt;br /&gt;&lt;br /&gt;
&lt;pre&gt;
fun test(x: Any) {
    &lt;b&gt;x as? String ?: return&lt;/b&gt; // Should be replaced with &apos;&lt;b&gt;if (x !is String) return&lt;/b&gt;&apos;
}
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Destructure" displayName="Use destructuring declaration" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports declarations that can be destructured.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReplaceArrayOfWithLiteral" displayName="&apos;arrayOf&apos; call can be replaced with array literal [...]" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;arrayOf&lt;/b&gt; calls that can be replaced with array literals &lt;b&gt;[...]&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SimplifiableCallChain" displayName="Call chain on collection type can be simplified" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports two-call chains replaceable by a single call, e.g. &lt;b&gt;map {}.filterNotNull()&lt;/b&gt; to &lt;b&gt;mapNotNull {}&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="FoldInitializerAndIfToElvis" displayName="If-Null return/break/... foldable to &apos;?:&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports an &lt;b&gt;if&lt;/b&gt; expression checking variable being null or not right after initializing it that can be converted into an elvis operator in the initializer.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantObjectTypeCheck" displayName="Redundant type checks for object" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports redundant type checks for an object.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Java 8">
    <inspection shortName="Convert2MethodRef" displayName="Lambda can be replaced with method reference" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports lambdas which can be replaced with method references. Use the &lt;a href=&quot;settings://preferences.sourceCode.Java&quot;&gt; File | Settings | Editor | Code Style | Java | Code Generation&lt;/a&gt; settings to configure special method references.
&lt;p&gt;
Lambda/method references syntax is not supported under Java 1.7 or earlier JVMs.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="Guava" displayName="Guava&apos;s functional primitives can be replaced by Java" enabled="false">&lt;html&gt;
&lt;body&gt;
Inspection detects usages of Guava&apos;s functional primitives like
&lt;b&gt;FluentIterable&lt;/b&gt;, &lt;b&gt;Optional&lt;/b&gt;, &lt;b&gt;Function&lt;/b&gt;, &lt;b&gt;Predicate&lt;/b&gt; and &lt;b&gt;Supplier&lt;/b&gt;.
&lt;br&gt;
May change semantic: some of lazy-evaluated guava&apos;s iterables could be transformed to eager-evaluated iterable.
&lt;p&gt;This inspection only reports if the language level of the project or module is 8 or higher&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimplifyForEach" displayName="forEach call can be simplified" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;forEach()&lt;/b&gt; calls which can be replaced with more concise method or from which intermediate steps can be extracted.
&lt;p&gt;
The Stream API is not available under Java 7 or earlier JVMs
&lt;p&gt;
&lt;small&gt;New in 2017.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Convert2streamapi" displayName="Loop can be collapsed with Stream API" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports loops which can be replaced with stream API calls.
&lt;p&gt;
The Stream API is not available under Java 7 or earlier JVMs.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FoldExpressionIntoStream" displayName="Expression can be folded into Stream chain" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports expressions with repeating pattern which could be replaced with Stream API for String.join.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 8 or higher&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Java8MapForEach" displayName="Map.forEach can be used" enabled="false">&lt;html&gt;
&lt;body&gt;
Suggests to replace &lt;code&gt;for(Entry&amp;lt;?,?&amp;gt; entry : map.entrySet()) {...}&lt;/code&gt; or
&lt;code&gt;map.entrySet().forEach(entry -&amp;gt; ...)&lt;/code&gt; with &lt;code&gt;map.forEach((key, value) -&gt; ...)&lt;/code&gt;.
&lt;p&gt;
  When checkbox is checked, only &lt;code&gt;entrySet().forEach()&lt;/code&gt; cases will be reported.
  However the quick-fix action will be available for &lt;code&gt;for&lt;/code&gt;-loops as well.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 8 or higher&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ComparatorCombinators" displayName="Comparator combinator can be used" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports Comparators defined as lambda expressions which could be expressed using
methods like &lt;code&gt;Comparator.comparing()&lt;/code&gt;.
&lt;p&gt;Some comparators like &lt;code&gt;(person1, person2) -&gt; person1.getName().compareTo(person2.getName())&lt;/code&gt;
  could be simplified like this: &lt;code&gt;Comparator.comparing(Person::getName)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also suggests to replace chain comparisons with Comparator.thenComparing(), e.g.
  &lt;code&gt;
    int res = o1.first.compareTo(o2.first);
    if(res == 0) res = o1.second.compareTo(o2.second);
    if(res == 0) res = o1.third - o2.third;
    return res;
  &lt;/code&gt; will be replaced with
  &lt;code&gt;
    objs.sort(Comparator.comparing((Obj o) -&gt; o.first).thenComparing(o -&gt; o.second).thenComparingInt(o -&gt; o.third));
  &lt;/code&gt;
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2016.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Anonymous2MethodRef" displayName="Anonymous type can be replaced with method reference" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous types which can be replaced with method references.
&lt;p&gt;
  Note that if an anonymous class is converted into an unbound method reference, the same method reference object 
  can be reused by Java runtime during subsequent invocations. On the other hand, when an anonymous class is used, 
  separate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases, 
  e.g. when anonymous class instances are used as &lt;code&gt;HashMap&lt;/code&gt; keys.
&lt;/p&gt;
&lt;p&gt;
Method references syntax is not supported under Java 1.7 or earlier JVMs.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Java8CollectionRemoveIf" displayName="Loop can be replaced with Collection.removeIf()" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports loops which could be collapsed into single &lt;code&gt;Collection.removeIf&lt;/code&gt; call.
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
  for (Iterator&amp;lt;String&amp;gt; it = collection.iterator(); it.hasNext(); ) {
    String aValue = it.next();
    if(shouldBeRemoved(aValue)) {
      it.remove();
    }
  }
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 8 or higher&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2016.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AnonymousHasLambdaAlternative" displayName="Anonymous type has shorter lambda alternative" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous classes which could be transformed to constructor or factory method call accepting lambda expression.
&lt;p&gt;The following classes are reported by this inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;ThreadLocal&lt;/b&gt; anonymous classes having &lt;b&gt;initialValue()&lt;/b&gt; method (could be replaced with &lt;b&gt;ThreadLocal.withInitial&lt;/b&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Thread&lt;/b&gt; anonymous classes having &lt;b&gt;run()&lt;/b&gt; method (could be replaced with &lt;b&gt;new Thread(Runnable)&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2016.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticPseudoFunctionalStyleMethod" displayName="Pseudo functional expression using static class" enabled="false">&lt;html&gt;
&lt;body&gt;
Inspection detects usages of pseudo-functional code if Java Stream API is available.
&lt;br/&gt;
Consider cases when monad behaviour is emulated by static method call:
&lt;br/&gt;
&lt;code&gt;
List&amp;lt;String&amp;gt; transformedIterable = Iterables.transform(someList, someTransformFunction);
&lt;/code&gt;
&lt;br&gt;
Note, that code semantic could be changed, for example: guava&apos;s &lt;b&gt;Iterable.transform&lt;/b&gt; produce lazy-evaluated iterable
but replacement produced by quick fix will be eager-evaluated.
&lt;br&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 8 or higher&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Convert2Lambda" displayName="Anonymous type can be replaced with lambda" enabled="false">&lt;html&gt;
&lt;body&gt;
  Reports all anonymous classes which can be replaced with lambda expressions.
  &lt;p&gt;
    Note that if an anonymous class is converted into a stateless lambda, the same lambda object 
    can be reused by Java runtime during subsequent invocations. On the other hand, when an anonymous class is used,
    separate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases, 
    e.g. when anonymous class instances are used as &lt;code&gt;HashMap&lt;/code&gt; keys.
  &lt;/p&gt;
  &lt;p&gt;
  Lambda syntax is not supported under Java 1.7 or earlier JVMs.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="Java8ListSort" displayName="Collections.sort() can be replaced with List.sort()" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Collections.sort(list, comparator)&lt;/code&gt; which could be replaced with &lt;code&gt;list.sort(comparator)&lt;/code&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 8 or higher&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2016.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CodeBlock2Expr" displayName="Statement lambda can be replaced with expression lambda" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports lambda expressions with code block bodies when expression-style bodies can be used
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Java8MapApi" displayName="Single Map method can be used" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports common usage patterns of &lt;code&gt;java.util.Map&lt;/code&gt; that could be replaced with Java 8 methods:
&lt;code&gt;getOrDefault()&lt;/code&gt;, &lt;code&gt;computeIfAbsent()&lt;/code&gt;, &lt;code&gt;putIfAbsent()&lt;/code&gt;, &lt;code&gt;merge()&lt;/code&gt;, or &lt;code&gt;replaceAll()&lt;/code&gt;.
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;b&gt;Map.getOrDefault&lt;/b&gt; method can be used in:
    &lt;pre&gt;
      String val = map.containsKey(key) ? map.get(key) : &quot;none&quot;;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;b&gt;Map.computeIfAbsent&lt;/b&gt; method can be used in:
    &lt;pre&gt;
      List&amp;lt;String&amp;gt; list = map.get(key);
      if (list == null) {
        list = new ArrayList&amp;lt;&amp;gt;();
        map.put(key, list);
      }&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;b&gt;Map.putIfAbsent&lt;/b&gt; method can be used in:
    &lt;pre&gt;
      String val = map.get(key);
      if (val == null) map.put(key, newVal);&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;b&gt;Map.merge&lt;/b&gt; method can be used in:
    &lt;pre&gt;
      Integer val = map.get(key);
      if (val == null) map.put(key, 1);
      else map.put(key, val + 1);&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;b&gt;Map.replaceAll&lt;/b&gt; method can be used in:
    &lt;pre&gt;
      for (Map.Entry&amp;lt;String, String&amp;gt; entry : map.entrySet()) {
        map.put(entry.getKey(), transform(entry.getValue()));
      }
    &lt;/pre&gt;
  &lt;/li&gt;

&lt;/ul&gt;
&lt;p&gt;Note that the replacement with &lt;code&gt;computeIfAbsent()&lt;/code&gt; or &lt;code&gt;merge()&lt;/code&gt; might work incorrectly for some &lt;code&gt;Map&lt;/code&gt;
implementations if the code extracted to the lambda expression modifies the same &lt;code&gt;Map&lt;/code&gt;. By default,
the warning doesn’t appear if this code might have side effects. If necessary, enable the last checkbox to always show the warning.&lt;/p&gt;
&lt;p&gt;Also, due to different handling of the &lt;code&gt;null&lt;/code&gt; value in old methods like &lt;code&gt;put()&lt;/code&gt; and newer methods like 
&lt;code&gt;computeIfAbsent()&lt;/code&gt; or &lt;code&gt;merge()&lt;/code&gt;, semantics might change if storing the &lt;code&gt;null&lt;/code&gt; value into given 
&lt;code&gt;Map&lt;/code&gt; is important. The inspection won&apos;t suggest the replacement when the value is statically known to be nullable, 
but for values with unknown nullability the replacement is still suggested. In these cases, we recommended suppressing the warning 
and adding an explanatory comment. 
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection works only if the language level of the project or module is 8 or higher&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2016.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LambdaCanBeMethodCall" displayName="Lambda can be replaced with method call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports lambda expressions which could be replaced with JDK method call.
&lt;p&gt;For example, the expression &lt;code&gt;x -&amp;gt; x&lt;/code&gt; of type &lt;code&gt;Function&amp;lt;T, T&amp;gt;&lt;/code&gt;
  could be replaced with &lt;code&gt;Function.identity()&lt;/code&gt; call.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Validity issues">
    <inspection shortName="GroovyDuplicateSwitchBranch" displayName="Duplicate switch case" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports duplicated &lt;b&gt;case&lt;/b&gt; expressions in &lt;b&gt;switch&lt;/b&gt;
statements.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyUnreachableStatement" displayName="Unreachable statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports statements that are unreachable.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="JavaBeans issues">
    <inspection shortName="PropertyValueSetToItself" displayName="Property value set to itself" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls on a setter with the value of the same object&apos;s getter.
For example: &lt;code&gt;bean.setPayerId(bean.getPayerId());&lt;/code&gt;
In regular circumstances this code is a no-op and probably not what was intended.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassWithoutConstructor" displayName="Class without constructor" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes without constructors. Some coding standards prohibit such classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassWithoutNoArgConstructor" displayName="Class without no-arg constructor" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes without a no-argument constructor.
Such constructors are necessary in some contexts if a class is to be created reflexively.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to indicate that this inspection should ignore classes which
contain no explicit constructors. These classes are provided a default no-argument constructor
by the compiler.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldHasSetterButNoGetter" displayName="Field has setter but no getter" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any fields which have a &quot;setter&quot; method but no &quot;getter&quot; method.
While within the Java beans spec, such fields may be unnecessarily difficult to work with in
certain bean containers.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuspiciousGetterSetter" displayName="Suspicious getter/setter" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports suspicious getter or setter methods.
A getter or setter is suspicious if it accesses a different field than would be expected by its name.

&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to indicate the inspection should only warn when a field
with a name matching the getter or setter name is present in the class.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Java 9">
    <inspection shortName="JavaRequiresAutoModule" displayName="Dependencies on automatic modules" enabled="false">&lt;html&gt;
&lt;body&gt;
The inspection warns about use of automatic modules in the &quot;requires&quot; directive.
Corresponds to &lt;code&gt;-Xlint:requires-automatic&lt;/code&gt; and &lt;code&gt;-Xlint:requires-transitive-automatic&lt;/code&gt; Javac options.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReplaceNullCheck" displayName="Null check can be replaced with method call" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection suggests to replace null check with Objects/Stream static method.
&lt;!-- tooltip end --&gt;
Example:
&lt;pre&gt;&lt;code&gt;
if (message == null) {
  application.messageStorage().save(new EmptyMessage());
} else {
  application.messageStorage().save(message);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;can be replaced with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  application.messageStorage()
    .save(Objects.requireNonNullElseGet(message, () -&gt; new EmptyMessage()));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Java9CollectionFactory" displayName="Immutable collection creation can be replaced with collection factory call" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection helps to convert unmodifiable collections created before Java 9 to new collection factory methods
like &lt;code&gt;List.of&lt;/code&gt; or &lt;code&gt;Set.of&lt;/code&gt;. Also since Java 10 the conversion to &lt;code&gt;List.copyOf&lt;/code&gt;, etc. could be suggested.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Note that Java 9 collection factory methods do not accept null values. Also set elements and map keys are required to be different.
It&apos;s not always possible to statically check whether original elements are different and not null. Using the checkbox you may enforce
the inspection to warn only if original elements are compile-time constants, so the conversion is guaranteed to be correct.&lt;/p&gt;
&lt;p&gt;This inspection is available since Java 9 only.&lt;/p&gt;
&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Modularization issues">
    <inspection shortName="ModuleWithTooFewClasses" displayName="Module with too few classes" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any modules which contain too few classes. Overly small modules may
indicate an overly fragmented design.
Because this inspection requires global code analysis it is only available for &lt;em&gt;Analyze|Inspect Code&lt;/em&gt; or
&lt;em&gt;Analyze|Run Inspection by Name&lt;/em&gt; and it will not report in the editor.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the minimum number of classes a module may have before triggering this inspection.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ModuleWithTooManyClasses" displayName="Module with too many classes" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any modules which contain too many classes. Overly large modules may
indicate a lack of design clarity.
Because this inspection requires global code analysis it is only available for &lt;em&gt;Analyze|Inspect Code&lt;/em&gt; or
&lt;em&gt;Analyze|Run Inspection by Name&lt;/em&gt; and it will not report in the editor.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of classes a module may have before triggering this inspection.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassOnlyUsedInOneModule" displayName="Class only used from one other module" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any classes which is only depended on and only depends on one module which
is different from the module containing the class. Such class could be moved into
that module.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InconsistentLanguageLevel" displayName="Inconsistent language level settings" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection lists modules which depend on other modules with higher language level. Such dependencies should be broken off.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ClassIndependentOfModule" displayName="Class independent of its module" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any classes which are neither dependent on nor depended on by other classes
in their module. Such classes are an indication of ad-hoc or incoherent modularisation strategies,
and may often profitably be moved.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Android Lint: Usability">
    <inspection shortName="AndroidLintAppLinkUrlError" displayName="URL not supported by app for Firebase App Indexing" enabled="false">&lt;html&gt;&lt;body&gt;URL not supported by app for Firebase App Indexing&lt;br&gt;&lt;br&gt;Ensure the URL is supported by your app, to get installs and traffic to your app from Google Search.&lt;br&gt;&lt;br&gt;Issue id: AppLinkUrlError&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://g.co/AppIndexing/AndroidStudio&quot;&gt;https://g.co/AppIndexing/AndroidStudio&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGifUsage" displayName="Using .gif format for bitmaps is discouraged" enabled="false">&lt;html&gt;&lt;body&gt;Using &lt;code&gt;.gif&lt;/code&gt; format for bitmaps is discouraged&lt;br&gt;&lt;br&gt;The &lt;code&gt;.gif&lt;/code&gt; file format is discouraged. Consider using &lt;code&gt;.png&lt;/code&gt; (preferred) or &lt;code&gt;.jpg&lt;/code&gt; (acceptable) instead.&lt;br&gt;&lt;br&gt;Issue id: GifUsage&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/resources/drawable-resource.html#Bitmap&quot;&gt;http://developer.android.com/guide/topics/resources/drawable-resource.html#Bitmap&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintBackButton" displayName="Back button" enabled="false">&lt;html&gt;&lt;body&gt;Back button&lt;br&gt;&lt;br&gt;According to the Android Design Guide,&lt;br/&gt;
&lt;br/&gt;
&quot;Other platforms use an explicit back button with label to allow the user to navigate up the application&apos;s hierarchy. Instead, Android uses the main action bar&apos;s app icon for hierarchical navigation and the navigation bar&apos;s back button for temporal navigation.&quot;&lt;br/&gt;
This check is not very sophisticated (it just looks for buttons with the label &quot;Back&quot;), so it is disabled by default to not trigger on common scenarios like pairs of Back/Next buttons to paginate through screens.&lt;br&gt;&lt;br&gt;Issue id: BackButton&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/design/patterns/pure-android.html&quot;&gt;http://developer.android.com/design/patterns/pure-android.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIconLocation" displayName="Image defined in density-independent drawable folder" enabled="false">&lt;html&gt;&lt;body&gt;Image defined in density-independent drawable folder&lt;br&gt;&lt;br&gt;The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to &lt;code&gt;drawable-mdpi&lt;/code&gt; and consider providing higher and lower resolution versions in &lt;code&gt;drawable-ldpi&lt;/code&gt;, &lt;code&gt;drawable-hdpi&lt;/code&gt; and &lt;code&gt;drawable-xhdpi&lt;/code&gt;. If the icon &lt;b&gt;really&lt;/b&gt; is density independent (for example a solid color) you can place it in &lt;code&gt;drawable-nodpi&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: IconLocation&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/practices/screens_support.html&quot;&gt;http://developer.android.com/guide/practices/screens_support.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintButtonOrder" displayName="Button order" enabled="false">&lt;html&gt;&lt;body&gt;Button order&lt;br&gt;&lt;br&gt;According to the Android Design Guide,&lt;br/&gt;
&lt;br/&gt;
&quot;Action buttons are typically Cancel and/or OK, with OK indicating the preferred or most likely action. However, if the options consist of specific actions such as Close or Wait rather than a confirmation or cancellation of the action described in the content, then all the buttons should be active verbs. As a rule, the dismissive action of a dialog is always on the left whereas the affirmative actions are on the right.&quot;&lt;br/&gt;
&lt;br/&gt;
This check looks for button bars and buttons which look like cancel buttons, and makes sure that these are on the left.&lt;br&gt;&lt;br&gt;Issue id: ButtonOrder&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/design/building-blocks/dialogs.html&quot;&gt;http://developer.android.com/design/building-blocks/dialogs.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintTypographyFractions" displayName="Fraction string can be replaced with fraction character" enabled="false">&lt;html&gt;&lt;body&gt;Fraction string can be replaced with fraction character&lt;br&gt;&lt;br&gt;You can replace certain strings, such as 1/2, and 1/4, with dedicated characters for these, such as ½ (&amp;amp;#189;) and ¼ (&amp;amp;#188;). This can help make the text more readable.&lt;br&gt;&lt;br&gt;Issue id: TypographyFractions&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Number_Forms&quot;&gt;http://en.wikipedia.org/wiki/Number_Forms&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWebpUnsupported" displayName="WebP Unsupported" enabled="false">&lt;html&gt;&lt;body&gt;WebP Unsupported&lt;br&gt;&lt;br&gt;The WebP format requires Android 4.0 (API 15). Certain features, such as lossless encoding and transparency, requires Android 4.2.1 (API 18; API 17 is 4.2.0.)&lt;br&gt;&lt;br&gt;Issue id: WebpUnsupported&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGoogleAppIndexingWarning" displayName="Missing support for Firebase App Indexing" enabled="false">&lt;html&gt;&lt;body&gt;Missing support for Firebase App Indexing&lt;br&gt;&lt;br&gt;Adds URLs to get your app into the Google index, to get installs and traffic to your app from Google Search.&lt;br&gt;&lt;br&gt;Issue id: GoogleAppIndexingWarning&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://g.co/AppIndexing/AndroidStudio&quot;&gt;https://g.co/AppIndexing/AndroidStudio&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSmallSp" displayName="Text size is too small" enabled="false">&lt;html&gt;&lt;body&gt;Text size is too small&lt;br&gt;&lt;br&gt;Avoid using sizes smaller than 12sp.&lt;br&gt;&lt;br&gt;Issue id: SmallSp&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIconDensities" displayName="Icon densities validation" enabled="false">&lt;html&gt;&lt;body&gt;Icon densities validation&lt;br&gt;&lt;br&gt;Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.&lt;br/&gt;
&lt;br/&gt;
Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable &lt;code&gt;ANDROID_LINT_INCLUDE_LDPI=true&lt;/code&gt;. For more information on current density usage, see &lt;a href=&quot;http://developer.android.com/resources/dashboard/screens.html&quot;&gt;http://developer.android.com/resources/dashboard/screens.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;Issue id: IconDensities&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/practices/screens_support.html&quot;&gt;http://developer.android.com/guide/practices/screens_support.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIconDuplicates" displayName="Duplicated icons under different names" enabled="false">&lt;html&gt;&lt;body&gt;Duplicated icons under different names&lt;br&gt;&lt;br&gt;If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.&lt;br&gt;&lt;br&gt;Issue id: IconDuplicates&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAllCaps" displayName="Combining textAllCaps and markup" enabled="false">&lt;html&gt;&lt;body&gt;Combining textAllCaps and markup&lt;br&gt;&lt;br&gt;The textAllCaps text transform will end up calling &lt;code&gt;toString&lt;/code&gt; on the &lt;code&gt;CharSequence&lt;/code&gt;, which has the net effect of removing any markup such as &lt;code&gt;&amp;lt;b&gt;&lt;/code&gt;. This check looks for usages of strings containing markup that also specify &lt;code&gt;textAllCaps=true&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: AllCaps&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIconDuplicatesConfig" displayName="Identical bitmaps across various configurations" enabled="false">&lt;html&gt;&lt;body&gt;Identical bitmaps across various configurations&lt;br&gt;&lt;br&gt;If an icon is provided under different configuration parameters such as &lt;code&gt;drawable-hdpi&lt;/code&gt; or &lt;code&gt;-v11&lt;/code&gt;, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.&lt;br&gt;&lt;br&gt;Issue id: IconDuplicatesConfig&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIconMissingDensityFolder" displayName="Missing density folder" enabled="false">&lt;html&gt;&lt;body&gt;Missing density folder&lt;br&gt;&lt;br&gt;Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as &lt;code&gt;drawable-hdpi&lt;/code&gt;.&lt;br/&gt;
&lt;br/&gt;
Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable &lt;code&gt;ANDROID_LINT_INCLUDE_LDPI=true&lt;/code&gt;. For more information on current density usage, see &lt;a href=&quot;http://developer.android.com/resources/dashboard/screens.html&quot;&gt;http://developer.android.com/resources/dashboard/screens.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;Issue id: IconMissingDensityFolder&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/practices/screens_support.html&quot;&gt;http://developer.android.com/guide/practices/screens_support.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintTypographyEllipsis" displayName="Ellipsis string can be replaced with ellipsis character" enabled="false">&lt;html&gt;&lt;body&gt;Ellipsis string can be replaced with ellipsis character&lt;br&gt;&lt;br&gt;You can replace the string &quot;...&quot; with a dedicated ellipsis character, ellipsis character (&amp;#8230;, &amp;amp;#8230;). This can help make the text more readable.&lt;br&gt;&lt;br&gt;Issue id: TypographyEllipsis&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Ellipsis&quot;&gt;http://en.wikipedia.org/wiki/Ellipsis&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMipmapIcons" displayName="Use Mipmap Launcher Icons" enabled="false">&lt;html&gt;&lt;body&gt;Use Mipmap Launcher Icons&lt;br&gt;&lt;br&gt;Launcher icons should be provided in the &lt;code&gt;mipmap&lt;/code&gt; resource directory. This is the same as the &lt;code&gt;drawable&lt;/code&gt; resource directory, except resources in the &lt;code&gt;mipmap&lt;/code&gt; directory will not get stripped out when creating density-specific APKs.&lt;br/&gt;
&lt;br/&gt;
In certain cases, the Launcher app may use a higher resolution asset (than would normally be computed for the device) to display large app shortcuts. If drawables for densities other than the device&apos;s resolution have been stripped out, then the app shortcut could appear blurry.&lt;br/&gt;
&lt;br/&gt;
To fix this, move your launcher icons from `drawable-`dpi to `mipmap-`dpi and change references from @drawable/ and R.drawable to @mipmap/ and R.mipmap.&lt;br/&gt;
In Android Studio this lint warning has a quickfix to perform this automatically.&lt;br&gt;&lt;br&gt;Issue id: MipmapIcons&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMenuTitle" displayName="Missing menu title" enabled="false">&lt;html&gt;&lt;body&gt;Missing menu title&lt;br&gt;&lt;br&gt;From the action bar documentation:&lt;br/&gt;
&quot;It&apos;s important that you always define android:title for each menu item &amp;#8212; even if you don&apos;t declare that the title appear with the action item &amp;#8212; for three reasons:&lt;br/&gt;
&lt;br/&gt;
* If there&apos;s not enough room in the action bar for the action item, the menu item appears in the overflow menu and only the title appears.&lt;br/&gt;
* Screen readers for sight-impaired users read the menu item&apos;s title.&lt;br/&gt;
* If the action item appears with only the icon, a user can long-press the item to reveal a tool-tip that displays the action item&apos;s title.&lt;br/&gt;
The android:icon is always optional, but recommended.&lt;br&gt;&lt;br&gt;Issue id: MenuTitle&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/ui/actionbar.html&quot;&gt;http://developer.android.com/guide/topics/ui/actionbar.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIconDipSize" displayName="Icon density-independent size validation" enabled="false">&lt;html&gt;&lt;body&gt;Icon density-independent size validation&lt;br&gt;&lt;br&gt;Checks the all icons which are provided in multiple densities, all compute to roughly the same density-independent pixel (&lt;code&gt;dip&lt;/code&gt;) size. This catches errors where images are either placed in the wrong folder, or icons are changed to new sizes but some folders are forgotten.&lt;br&gt;&lt;br&gt;Issue id: IconDipSize&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIconXmlAndPng" displayName="Icon is specified both as .xml file and as a bitmap" enabled="false">&lt;html&gt;&lt;body&gt;Icon is specified both as &lt;code&gt;.xml&lt;/code&gt; file and as a bitmap&lt;br&gt;&lt;br&gt;If a drawable resource appears as an &lt;code&gt;.xml&lt;/code&gt; file in the &lt;code&gt;drawable/&lt;/code&gt; folder, it&apos;s usually not intentional for it to also appear as a bitmap using the same name; generally you expect the drawable XML file to define states and each state has a corresponding drawable bitmap.&lt;br&gt;&lt;br&gt;Issue id: IconXmlAndPng&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintViewConstructor" displayName="Missing View constructors for XML inflation" enabled="false">&lt;html&gt;&lt;body&gt;Missing View constructors for XML inflation&lt;br&gt;&lt;br&gt;Some layout tools (such as the Android layout editor) need to find a constructor with one of the following signatures:&lt;br/&gt;
* &lt;code&gt;View(Context context)&lt;/code&gt;&lt;br/&gt;
* &lt;code&gt;View(Context context, AttributeSet attrs)&lt;/code&gt;&lt;br/&gt;
* &lt;code&gt;View(Context context, AttributeSet attrs, int defStyle)&lt;/code&gt;&lt;br/&gt;
&lt;br/&gt;
If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if &lt;code&gt;View#isInEditMode()&lt;/code&gt; is false, since that method will return &lt;code&gt;false&lt;/code&gt; at runtime but true within a user interface editor.&lt;br&gt;&lt;br&gt;Issue id: ViewConstructor&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGoogleAppIndexingApiWarning" displayName="Missing support for Firebase App Indexing Api" enabled="false">&lt;html&gt;&lt;body&gt;Missing support for Firebase App Indexing Api&lt;br&gt;&lt;br&gt;Adds URLs to get your app into the Google index, to get installs and traffic to your app from Google Search.&lt;br&gt;&lt;br&gt;Issue id: GoogleAppIndexingApiWarning&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://g.co/AppIndexing/AndroidStudio&quot;&gt;https://g.co/AppIndexing/AndroidStudio&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintTypographyQuotes" displayName="Straight quotes can be replaced with curvy quotes" enabled="false">&lt;html&gt;&lt;body&gt;Straight quotes can be replaced with curvy quotes&lt;br&gt;&lt;br&gt;Straight single quotes and double quotes, when used as a pair, can be replaced by &quot;curvy quotes&quot; (or directional quotes). This can make the text more readable.&lt;br/&gt;
&lt;br/&gt;
Note that you should never use grave accents and apostrophes to quote, `like this&apos;.&lt;br/&gt;
&lt;br/&gt;
(Also note that you should not use curvy quotes for code fragments.)&lt;br&gt;&lt;br&gt;Issue id: TypographyQuotes&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Quotation_mark&quot;&gt;http://en.wikipedia.org/wiki/Quotation_mark&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSelectableText" displayName="Dynamic text should probably be selectable" enabled="false">&lt;html&gt;&lt;body&gt;Dynamic text should probably be selectable&lt;br&gt;&lt;br&gt;If a &lt;code&gt;&amp;lt;TextView&gt;&lt;/code&gt; is used to display data, the user might want to copy that data and paste it elsewhere. To allow this, the &lt;code&gt;&amp;lt;TextView&gt;&lt;/code&gt; should specify &lt;code&gt;android:textIsSelectable=&quot;true&quot;&lt;/code&gt;.&lt;br/&gt;
&lt;br/&gt;
This lint check looks for TextViews which are likely to be displaying data: views whose text is set dynamically. This value will be ignored on platforms older than API 11, so it is okay to set it regardless of your &lt;code&gt;minSdkVersion&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: SelectableText&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIconExpectedSize" displayName="Icon has incorrect size" enabled="false">&lt;html&gt;&lt;body&gt;Icon has incorrect size&lt;br&gt;&lt;br&gt;There are predefined sizes (for each density) for launcher icons. You should follow these conventions to make sure your icons fit in with the overall look of the platform.&lt;br&gt;&lt;br&gt;Issue id: IconExpectedSize&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/design/style/iconography.html&quot;&gt;http://developer.android.com/design/style/iconography.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingApplicationIcon" displayName="Missing application icon" enabled="false">&lt;html&gt;&lt;body&gt;Missing application icon&lt;br&gt;&lt;br&gt;You should set an icon for the application as whole because there is no default. This attribute must be set as a reference to a drawable resource containing the image (for example &lt;code&gt;@drawable/icon&lt;/code&gt;).&lt;br&gt;&lt;br&gt;Issue id: MissingApplicationIcon&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/tools/publishing/preparing.html#publishing-configure&quot;&gt;http://developer.android.com/tools/publishing/preparing.html#publishing-configure&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintButtonCase" displayName="Cancel/OK dialog button capitalization" enabled="false">&lt;html&gt;&lt;body&gt;Cancel/OK dialog button capitalization&lt;br&gt;&lt;br&gt;The standard capitalization for OK/Cancel dialogs is &quot;OK&quot; and &quot;Cancel&quot;. To ensure that your dialogs use the standard strings, you can use the resource strings @android:string/ok and @android:string/cancel.&lt;br&gt;&lt;br&gt;Issue id: ButtonCase&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintButtonStyle" displayName="Button should be borderless" enabled="false">&lt;html&gt;&lt;body&gt;Button should be borderless&lt;br&gt;&lt;br&gt;Button bars typically use a borderless style for the buttons. Set the &lt;code&gt;style=&quot;?android:attr/buttonBarButtonStyle&quot;&lt;/code&gt; attribute on each of the buttons, and set &lt;code&gt;style=&quot;?android:attr/buttonBarStyle&quot;&lt;/code&gt; on the parent layout&lt;br&gt;&lt;br&gt;Issue id: ButtonStyle&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/design/building-blocks/buttons.html&quot;&gt;http://developer.android.com/design/building-blocks/buttons.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintNegativeMargin" displayName="Negative Margins" enabled="false">&lt;html&gt;&lt;body&gt;Negative Margins&lt;br&gt;&lt;br&gt;Margin values should be positive. Negative values are generally a sign that you are making assumptions about views surrounding the current one, or may be tempted to turn off child clipping to allow a view to escape its parent. Turning off child clipping to do this not only leads to poor graphical performance, it also results in wrong touch event handling since touch events are based strictly on a chain of parent-rect hit tests. Finally, making assumptions about the size of strings can lead to localization problems.&lt;br&gt;&lt;br&gt;Issue id: NegativeMargin&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAlwaysShowAction" displayName="Usage of showAsAction=always" enabled="false">&lt;html&gt;&lt;body&gt;Usage of &lt;code&gt;showAsAction=always&lt;/code&gt;&lt;br&gt;&lt;br&gt;Using &lt;code&gt;showAsAction=&quot;always&quot;&lt;/code&gt; in menu XML, or &lt;code&gt;MenuItem.SHOW_AS_ACTION_ALWAYS&lt;/code&gt; in Java code is usually a deviation from the user interface style guide.Use &lt;code&gt;ifRoom&lt;/code&gt; or the corresponding &lt;code&gt;MenuItem.SHOW_AS_ACTION_IF_ROOM&lt;/code&gt; instead.&lt;br/&gt;
&lt;br/&gt;
If &lt;code&gt;always&lt;/code&gt; is used sparingly there are usually no problems and behavior is roughly equivalent to &lt;code&gt;ifRoom&lt;/code&gt; but with preference over other &lt;code&gt;ifRoom&lt;/code&gt; items. Using it more than twice in the same menu is a bad idea.&lt;br/&gt;
&lt;br/&gt;
This check looks for menu XML files that contain more than two &lt;code&gt;always&lt;/code&gt; actions, or some &lt;code&gt;always&lt;/code&gt; actions and no &lt;code&gt;ifRoom&lt;/code&gt; actions. In Java code, it looks for projects that contain references to &lt;code&gt;MenuItem.SHOW_AS_ACTION_ALWAYS&lt;/code&gt; and no references to &lt;code&gt;MenuItem.SHOW_AS_ACTION_IF_ROOM&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: AlwaysShowAction&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/design/patterns/actionbar.html&quot;&gt;http://developer.android.com/design/patterns/actionbar.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIconColors" displayName="Icon colors do not follow the recommended visual style" enabled="false">&lt;html&gt;&lt;body&gt;Icon colors do not follow the recommended visual style&lt;br&gt;&lt;br&gt;Notification icons and Action Bar icons should only white and shades of gray. See the Android Design Guide for more details. Note that the way Lint decides whether an icon is an action bar icon or a notification icon is based on the filename prefix: &lt;code&gt;ic_menu_&lt;/code&gt; for action bar icons, &lt;code&gt;ic_stat_&lt;/code&gt; for notification icons etc. These correspond to the naming conventions documented in &lt;a href=&quot;http://developer.android.com/guide/practices/ui_guidelines/icon_design.html&quot;&gt;http://developer.android.com/guide/practices/ui_guidelines/icon_design.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;Issue id: IconColors&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/design/style/iconography.html&quot;&gt;http://developer.android.com/design/style/iconography.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIconExtension" displayName="Icon format does not match the file extension" enabled="false">&lt;html&gt;&lt;body&gt;Icon format does not match the file extension&lt;br&gt;&lt;br&gt;Ensures that icons have the correct file extension (e.g. a &lt;code&gt;.png&lt;/code&gt; file is really in the PNG format and not for example a GIF file named &lt;code&gt;.png&lt;/code&gt;).&lt;br&gt;&lt;br&gt;Issue id: IconExtension&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintTypographyDashes" displayName="Hyphen can be replaced with dash" enabled="false">&lt;html&gt;&lt;body&gt;Hyphen can be replaced with dash&lt;br&gt;&lt;br&gt;The &quot;n dash&quot; (&amp;#8211;, &amp;amp;#8211;) and the &quot;m dash&quot; (&amp;#8212;, &amp;amp;#8212;) characters are used for ranges (n dash) and breaks (m dash). Using these instead of plain hyphens can make text easier to read and your application will look more polished.&lt;br&gt;&lt;br&gt;Issue id: TypographyDashes&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dash&quot;&gt;http://en.wikipedia.org/wiki/Dash&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintConvertToWebp" displayName="Convert to WebP" enabled="false">&lt;html&gt;&lt;body&gt;Convert to WebP&lt;br&gt;&lt;br&gt;The WebP format is typically more compact than PNG and JPEG. As of Android 4.2.1 it supports transparency and lossless conversion as well. Note that there is a quickfix in the IDE which lets you perform conversion.&lt;br/&gt;
&lt;br/&gt;
Launcher icons must be in the PNG format.&lt;br&gt;&lt;br&gt;Issue id: ConvertToWebp&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIconNoDpi" displayName="Icon appears in both -nodpi and dpi folders" enabled="false">&lt;html&gt;&lt;body&gt;Icon appears in both &lt;code&gt;-nodpi&lt;/code&gt; and dpi folders&lt;br&gt;&lt;br&gt;Bitmaps that appear in &lt;code&gt;drawable-nodpi&lt;/code&gt; folders will not be scaled by the Android framework. If a drawable resource of the same name appears &lt;b&gt;both&lt;/b&gt; in a &lt;code&gt;-nodpi&lt;/code&gt; folder as well as a dpi folder such as &lt;code&gt;drawable-hdpi&lt;/code&gt;, then the behavior is ambiguous and probably not intentional. Delete one or the other, or use different names for the icons.&lt;br&gt;&lt;br&gt;Issue id: IconNoDpi&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintTextFields" displayName="Missing inputType or hint" enabled="false">&lt;html&gt;&lt;body&gt;Missing &lt;code&gt;inputType&lt;/code&gt;&lt;br&gt;&lt;br&gt;Providing an &lt;code&gt;inputType&lt;/code&gt; attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). &lt;br/&gt;
&lt;br/&gt;
The lint detector also looks at the &lt;code&gt;id&lt;/code&gt; of the view, and if the id offers a hint of the purpose of the field (for example, the &lt;code&gt;id&lt;/code&gt; contains the phrase &lt;code&gt;phone&lt;/code&gt; or &lt;code&gt;email&lt;/code&gt;), then lint will also ensure that the &lt;code&gt;inputType&lt;/code&gt; contains the corresponding type attributes.&lt;br/&gt;
&lt;br/&gt;
If you really want to keep the text field generic, you can suppress this warning by setting &lt;code&gt;inputType=&quot;text&quot;&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: TextFields&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAutofill" displayName="Use Autofill" enabled="false">&lt;html&gt;&lt;body&gt;Use Autofill&lt;br&gt;&lt;br&gt;Specify an &lt;code&gt;autofillHints&lt;/code&gt; attribute when targeting SDK version 26 or higher or explicitly specify that the view is not important for autofill. Your app can help an autofill service classify the data correctly by providing the meaning of each view that could be autofillable, such as views representing usernames, passwords, credit card fields, email addresses, etc.&lt;br/&gt;
&lt;br/&gt;
The hints can have any value, but it is recommended to use predefined values like &apos;username&apos; for a username or &apos;creditCardNumber&apos; for a credit card number. For a list of all predefined autofill hint constants, see the &lt;code&gt;AUTOFILL_HINT_&lt;/code&gt; constants in the &lt;code&gt;View&lt;/code&gt; reference at &lt;a href=&quot;https://developer.android.com/reference/android/view/View.html&quot;&gt;https://developer.android.com/reference/android/view/View.html&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
You can mark a view unimportant for autofill by specifying an &lt;code&gt;importantForAutofill&lt;/code&gt; attribute on that view or a parent view. See &lt;a href=&quot;https://developer.android.com/reference/android/view/View.html#setImportantForAutofill&quot;&gt;https://developer.android.com/reference/android/view/View.html#setImportantForAutofill&lt;/a&gt;(int).&lt;br&gt;&lt;br&gt;Issue id: Autofill&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/guide/topics/text/autofill.html&quot;&gt;https://developer.android.com/guide/topics/text/autofill.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIconMixedNinePatch" displayName="Clashing PNG and 9-PNG files" enabled="false">&lt;html&gt;&lt;body&gt;Clashing PNG and 9-PNG files&lt;br&gt;&lt;br&gt;If you accidentally name two separate resources &lt;code&gt;file.png&lt;/code&gt; and &lt;code&gt;file.9.png&lt;/code&gt;, the image file and the nine patch file will both map to the same drawable resource, &lt;code&gt;@drawable/file&lt;/code&gt;, which is probably not what was intended.&lt;br&gt;&lt;br&gt;Issue id: IconMixedNinePatch&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintTypographyOther" displayName="Other typographical problems" enabled="false">&lt;html&gt;&lt;body&gt;Other typographical problems&lt;br&gt;&lt;br&gt;This check looks for miscellaneous typographical problems and offers replacement sequences that will make the text easier to read and your application more polished.&lt;br&gt;&lt;br&gt;Issue id: TypographyOther&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIconLauncherShape" displayName="The launcher icon shape should use a distinct silhouette" enabled="false">&lt;html&gt;&lt;body&gt;The launcher icon shape should use a distinct silhouette&lt;br&gt;&lt;br&gt;According to the Android Design Guide (&lt;a href=&quot;http://developer.android.com/design/style/iconography.html&quot;&gt;http://developer.android.com/design/style/iconography.html&lt;/a&gt;) your launcher icons should &quot;use a distinct silhouette&quot;, a &quot;three-dimensional, front view, with a slight perspective as if viewed from above, so that users perceive some depth.&quot;&lt;br/&gt;
&lt;br/&gt;
The unique silhouette implies that your launcher icon should not be a filled square.&lt;br&gt;&lt;br&gt;Issue id: IconLauncherShape&lt;/body&gt;&lt;/html&gt;</inspection>
  </group>
  <group name="Naming conventions">
    <inspection shortName="ConfusingMainMethod" displayName="Confusing &apos;main()&apos; method" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports methods named &quot;main&quot; which do not have signature
public static void main(String[]). Such methods may be confusing, as methods named &quot;main&quot;
are expected to be application entry points.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstPropertyName" displayName="Const property naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;const&lt;/b&gt; property names that do not follow the recommended naming conventions.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LambdaUnfriendlyMethodOverload" displayName="Lambda-unfriendly method overload" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports overloaded methods or constructors with similar functional interface type parameters for which
any call sites will need a cast or parameter type specified on the lambda expression to resolve ambiguity.
Such calls can look ugly and should be avoided if possible.
It is preferable to give the overloaded methods a different name from each other, so that this problem does not occur.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 16&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PackageNamingConvention" displayName="Package naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports packages whose names are either too short, too long, or do not follow the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the fields below to specify minimum length, maximum length and regular expression matching valid package names
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format).
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyStaticMethodNamingConvention" displayName="Static method naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports static methods whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
 Use the fields provided below to specify minimum length, maximum length and regular expression expected for static method names.
 (Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="StandardVariableNames" displayName="Standard variable names" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any variables with &apos;standard&apos; names which are of unexpected types.
Such names may be confusing. Standard names and types are as follows:
&lt;ul&gt;
&lt;li&gt;i, j, k, m, n  - &lt;b&gt;int&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;f  - &lt;b&gt;float&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;d  - &lt;b&gt;double&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;b  - &lt;b&gt;byte&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;c, ch  - &lt;b&gt;char&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;l - &lt;b&gt;long&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;s, str - &lt;b&gt;String&lt;/b&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore parameter names which are identical to the parameter name from a direct super method.

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyInstanceMethodNamingConvention" displayName="Instance method naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports instance methods whose names are either too short, too long, or do not follow
the specified regular expression pattern. Instance methods that override library
methods are ignored by this inspection.
&lt;p&gt;
 Use the fields provided below to specify minimum length, maximum length and regular expression expected for instance method names.
 (Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ParameterNameDiffersFromOverriddenParameter" displayName="Parameter name differs from parameter in overridden method" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports parameters that have different names from the corresponding
parameters in the methods they override. While legal in Java, such inconsistent names may be confusing,
and lessen the documentation benefits of good naming practices.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkboxes below to indicate whether overridden parameter names which are only
a single character long or come from a library method should be ignored. Both can be useful if
you do not wish to be bound by dubious naming conventions used in libraries.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldNamingConvention" displayName="Field naming convention" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports fields whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use list below to specify which fields should be checked.
  For each field type use the fields to specify minimum length, maximum length and regular expression expected for class names.
  Specify &lt;b&gt;0&lt;/b&gt; in length fields to skip corresponding checks. Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonExceptionNameEndsWithException" displayName="Non-exception class name ends with &apos;Exception&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports non-exception classes whose names end with &apos;Exception&apos;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NewGroovyClassNamingConvention" displayName="Class naming convention" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports classes whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
 Use the fields provided below to specify minimum length, maximum length and regular expression expected for class names.
 (Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MisspelledMethodName" displayName="Method names differing only by case" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on cases where multiple methods of a class have names which differ only by
case. Such method names may be very confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the checkbox below to ignore methods overriding or implementing a method from a superclass.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyLocalVariableNamingConvention" displayName="Local variable naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports local variables whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
 Use the fields provided below to specify minimum length, maximum length and regular expression expected for local variables names.
 (Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ClassName" displayName="Class naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports class names that do not follow the recommended naming conventions.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PackageName" displayName="Package naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports package names that do not follow the recommended naming conventions.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonBooleanMethodNameMayNotStartWithQuestion" displayName="Non-boolean method name must not start with question word" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports non-boolean methods whose names start with a question
word. Non-boolean methods that override library methods are ignored by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the list below to specify question words which should only be used for boolean methods.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LocalVariableName" displayName="Local variable naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports local variable names that do not follow the recommended naming conventions.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyParameterNamingConvention" displayName="Method parameter naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports method parameters whose names are either too short, too
long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length and regular expression
  expected for method parameter names.
  (Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ClassNameSameAsAncestorName" displayName="Class name same as ancestor name" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports class being named identically to one of their
super classes (but in different packages). Such class name may be very confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExceptionNameDoesntEndWithException" displayName="Exception class name does not end with &apos;Exception&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports exception classes whose names don&apos;t end with &apos;Exception&apos;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="FunctionName" displayName="Function naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports function names that do not follow the recommended naming conventions.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PrivatePropertyName" displayName="Private property naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports private property names that do not follow the recommended naming conventions.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodNameSameAsParentName" displayName="Method name same as parent class name" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports methods being named identically to the superclass of the method&apos;s class.
Such a method name may be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="QuestionableName" displayName="Questionable name" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on any variables, methods, or classes with questionable names.
This inspection is best used to report common metasyntactic variables which may be
used as names by lazy or confused developers.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the list below to specify names which should be reported
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NewMethodNamingConvention" displayName="Method naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods whose names are either too short, too long, or do not follow
the specified regular expression pattern. Instance methods that override library
methods and constructors are ignored by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use list below to specify which methods should be checked. When unchecked, common instance/static method name pattern &lt;b&gt;won&apos;t be applied&lt;/b&gt;.
  For each type use the fields to specify minimum length, maximum length and regular expression expected for method names.
  Specify &lt;b&gt;0&lt;/b&gt; in length fields to skip corresponding checks. Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LambdaParameterNamingConvention" displayName="Lambda parameter naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports lambda parameters whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the fields below to specify minimum length, maximum length and regular expression expected for lambda parameter names.
Specify &lt;b&gt;0&lt;/b&gt; to not check the length of names. Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.
&lt;p&gt;
&lt;small&gt;New in 15&lt;/small&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyInstanceVariableNamingConvention" displayName="Instance variable naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports instance variables whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
 Use the fields provided below to specify minimum length, maximum length and regular expression expected for
 instance variable names.
 (Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EnumEntryName" displayName="Enum entry naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports enum entry names that do not follow the recommended naming conventions.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UpperCaseFieldNameNotConstant" displayName="Non-constant field with upper-case name" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;b&gt;static&lt;/b&gt; non-&lt;b&gt;final&lt;/b&gt;
fields whose names are all upper-case. Such fields may cause confusion by breaking a common naming convention, and
are often the result of developer error.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavaModuleNaming" displayName="Java module naming conventions" enabled="false">&lt;html&gt;
&lt;body&gt;
The inspection detects situations when a module name contradicts Java Platform Module System recommendations.
&lt;br&gt;Example:
&lt;code&gt;module &lt;b&gt;foo1.bar2&lt;/b&gt; { }&lt;/code&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DollarSignInName" displayName="Use of &apos;$&apos; in identifier" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports identifers containing dollar signs (&apos;$&apos;). While
such identifiers are legal Java, their use outside of generated java code is strongly discouraged.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NewClassNamingConvention" displayName="Class naming convention" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports classes whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use list below to specify which classes should be checked. When unchecked, common class name patterns &lt;b&gt;won&apos;t be applied&lt;/b&gt;. 
  For each class type use the fields to specify minimum length, maximum length and regular expression expected for class names.
Specify &lt;b&gt;0&lt;/b&gt; in length fields to skip corresponding checks. Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyStaticVariableNamingConvention" displayName="Static variable naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;static&lt;/b&gt; variables whose names are either too short, too long,
or do not follow
the specified regular expression pattern. Constants, i.e. variables of immutable type declared
&lt;b&gt;static final&lt;/b&gt;, are not checked by this inspection
&lt;p&gt;
 Use the fields provided below to specify minimum length, maximum length and regular expression expected for static variable names.
 (Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ClassNamePrefixedWithPackageName" displayName="Class name prefixed with package name" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes whose names are prefixed with their package names, irrespective of
capitalization. While occasionally reasonable, this is often due to a poor naming scheme, and may be redundant and
annoying.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ParameterNamingConvention" displayName="Method parameter naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports method parameters whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the fields below to specify minimum length, maximum length and regular expression expected for method parameter names.
Specify &lt;b&gt;0&lt;/b&gt; to not check the length of names. Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TestFunctionName" displayName="Test function naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports test function names that do not follow the recommended naming conventions.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverloadedVarargsMethod" displayName="Overloaded varargs method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports varargs methods with the same name as other methods in the class or in a superclass.
Overloaded methods which take a variable number of arguments can be very confusing,
as it is often not clear which overloading gets called.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyConstantNamingConvention" displayName="Constant naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports constants whose names are either too short, too long, or do not follow
the specified regular expression pattern.
Constants are variables of immutable type declared &lt;b&gt;static final&lt;/b&gt;.
&lt;p&gt;
 Use the fields provided below to specify minimum length, maximum length and regular expression expected for constant names.
 (Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ObjectPropertyName" displayName="Object property naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports names of properties in objects and companion objects, as well as top-level properties, that do not follow the recommended naming conventions.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodNameSameAsClassName" displayName="Method name same as class name" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports methods being named identically to their class.
A method with such a name may be easily mistaken for a constructor.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverloadedMethodsWithSameNumberOfParameters" displayName="Overloaded methods with same number of parameters" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on cases where multiple methods in the same class are declared
with an identical name and the same number of parameters.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore overloaded methods whose parameter types are definitely incompatible.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PropertyName" displayName="Property naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports property names that do not follow the recommended naming conventions.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BooleanMethodNameMustStartWithQuestion" displayName="Boolean method name must start with question word" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports boolean methods whose names do not start with a question
word. Boolean methods that override library methods are ignored by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the list below to specify acceptable question words to start boolean method names with.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LocalVariableNamingConvention" displayName="Local variable naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports local variables whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the fields below to specify minimum length, maximum length and regular expression expected for local variables names.
Specify &lt;b&gt;0&lt;/b&gt; to not check the length of names. Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="J2ME issues">
    <inspection shortName="RecordStoreResource" displayName="RecordStore opened but not safely closed" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
Reports any J2ME RecordStore resource which is not opened in front of a &lt;b&gt;try&lt;/b&gt;
block and closed in the corresponding &lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConnectionResource" displayName="Connection opened but not safely closed" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
Reports any J2ME Connection resource which is not opened in front of a &lt;b&gt;try&lt;/b&gt;
block and closed in the corresponding &lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed.
  &lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ArrayLengthInLoopCondition" displayName="Array.length in loop condition" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
Reports any access to the &lt;b&gt;.length&lt;/b&gt; of an array in the condition part of a
loop statement. In highly resource constrained environments, such calls may
have adverse performance implications.
  &lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckForOutOfMemoryOnLargeArrayAllocation" displayName="Large array allocation with no OutOfMemoryError check" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
Reports large array allocations which do not check
for &lt;b&gt;java.lang.OutOfMemoryError&lt;/b&gt;. In memory
constrained environments, allocations of large data objects should probably
be checked for memory depletion.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of elements to allow in
unchecked array allocations.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MultiplyOrDivideByPowerOfTwo" displayName="Multiply or divide by power of two" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports multiplication of an integer value by a constant power of 2. These
expressions may be replaced by right or left shift operations, for a possible performance improvement.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to enable the inspection for divisions by a power of two. Note that replacing
a power of two division by a shift does not work for negative numbers.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InterfaceWithOnlyOneDirectInheritor" displayName="Interface which has only one direct inheritor" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
Reports interfaces which have precisely one
direct inheritor. While such interfaces may offer admirable clarity of design,
in memory-constrained or bandwidth-limited environments,
they needlessly increase the total footprint of the application. Consider
merging the interface with its inheritor.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PrivateMemberAccessBetweenOuterAndInnerClass" displayName="Synthetic accessor call" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
Reports references to non-constant &lt;b&gt;private&lt;/b&gt; members of a different class,
for which javac will generate a package-private synthetic accessor method.
&lt;p&gt;
An inner class and its containing class are compiled to separate
class files. The Java virtual machine normally prohibits access from a class to private fields and methods of
another class. To enable access from an inner class to private members of a
containing class or the other way around javac creates a package-private
synthetic accessor method. Less use of memory and greater performance may be achieved by making the
member package-private, thus allowing direct access without the creation of a synthetic accessor method.
&lt;p&gt;
This inspection does not report anything if language level is set to Java 11 or higher
as thanks to nest-based access control (JEP 181), accessor methods are not generated anymore.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverlyLargePrimitiveArrayInitializer" displayName="Overly large initializer for array of primitive type" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
Reports array initializer expressions for primitive
arrays which contain too many elements. Such initializers may result in overly large
class files, as code must be generated to initialize each array element. In memory
or bandwidth constrained environments, it may be more efficient to load large arrays
of primitives from resource files.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of elements to allow in
primitive array initializers.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodCallInLoopCondition" displayName="Method call in loop condition" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
Reports method calls in the condition part of a
loop statement. In highly resource constrained environments, such calls may
have adverse performance implications.
  &lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore method calls to common java iteration methods like &lt;b&gt;Iterator.hasNext()&lt;/b&gt;.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AbstractClassWithOnlyOneDirectInheritor" displayName="Abstract class which has only one direct inheritor" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
Reports abstract classes which have precisely one
direct inheritor. While such classes may offer admirable clarity of design,
in memory-constrained or bandwidth-limited environments, they needlessly increase
the total footprint of the application. Consider merging the abstract class with its inheritor.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SingleCharacterStartsWith" displayName="Single character &apos;startsWith()&apos; or &apos;endsWith()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
Reports any calls to &lt;b&gt;String.startsWith()&lt;/b&gt; or
&lt;b&gt;String.endsWith()&lt;/b&gt; which are passed single character string
literals as parameter. Such calls may be more efficiently implemented with
&lt;b&gt;String.charAt()&lt;/b&gt;. Because the performance gain is
minimal, the needed extra check for non-zero length, and the negative effect on
code clarity, it is recommended to do so only inside tight loops.
  &lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Method metrics">
    <inspection shortName="GroovyMethodParameterCount" displayName="Method with too many parameters" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods with too many parameters. Methods with too many parameters
can be a good sign that refactoring is necessary. Methods whose signatures are inherited from
library classes are ignored by this inspection.
&lt;p&gt;
 Use the field provided below to specify the maximum acceptable number of parameters a method might have.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ThrownExceptionsPerMethod" displayName="Method with too many exceptions declared" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports methods that are declared as throwing too many
different types of exceptions. Methods with too many exceptions declared
are a good sign that your error handling code is getting overly complex.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of &lt;b&gt;throws&lt;/b&gt; clauses a method might have.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodWithMultipleLoops" displayName="Method with multiple loops" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods containing multiple loop statements.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MultipleReturnPointsPerMethod" displayName="Method with multiple return points" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods with too many &lt;b&gt;return&lt;/b&gt; points. Methods with too many &lt;b&gt;return&lt;/b&gt; points may be confusing,
and hard to refactor. A &lt;b&gt;return&lt;/b&gt; point is either a &lt;b&gt;return&lt;/b&gt; statement or the falling through the bottom of a
&lt;b&gt;void&lt;/b&gt; method or constructor.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of &lt;b&gt;return&lt;/b&gt; points a method is allowed to have.
&lt;p&gt;
Use the first checkbox below to ignore guard clauses.
&lt;p&gt;
Use the second checkbox below to ignore &lt;b&gt;return&lt;/b&gt; points inside &lt;b&gt;equals()&lt;/b&gt; methods.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyMultipleReturnPointsPerMethod" displayName="Method with multiple return points" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods with too many return points. Methods with too
many return points may be confusing, and hard to refactor.
&lt;p&gt;
  Use the field provided below to specify the maximum acceptable number of return points a method
  might have.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyOverlyLongMethod" displayName="Overly long method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods that are too long. Methods that are too long
may be confusing, and are a good sign that refactoring is necessary.
&lt;p&gt;
  Use the field provided below to specify the maximum acceptable number of non-comment source
  statements a method might have.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ParametersPerMethod" displayName="Method with too many parameters" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods with too many parameters. Methods with too many parameters can be a good sign that refactoring is necessary.
Methods which have super methods are ignored by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of parameters a method is allowed to have.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NestingDepth" displayName="Overly nested method" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports methods whose bodies are too deeply nested. Methods with too much statement
nesting may be confusing, and are a good sign that refactoring may be necessary.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum nesting depth a method is allowed to have.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyOverlyNestedMethod" displayName="Overly nested method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods whose bodies are too deeply nested. Methods with too much statement
nesting may be confusing, and are a good sign that refactoring may be necessary.
&lt;p&gt;
 Use the field provided below to specify the maximum acceptable nesting depth a method might have.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MethodCoupling" displayName="Overly coupled method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods which are highly coupled, i.e. that reference too many other classes.
Methods with too high a coupling can be very fragile, and should probably be broken up. References to system classes
(those in the &lt;b&gt;java.&lt;/b&gt;or &lt;b&gt;javax.&lt;/b&gt; packages), are not
counted for purposes of this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum coupling a method is allowed to have.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverlyLongLambda" displayName="Overly long lambda expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports lambda expressions that are too long.
Lambda expressions that are too long
may be confusing, and it is often better to extract the statements into their own method.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of non-comment source statements a lambda expression is allowed to have.
&lt;p&gt;
&lt;small&gt;New in 2016.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyOverlyComplexMethod" displayName="Overly complex method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods that have too high a cyclomatic complexity. Cyclomatic
complexity is basically a measurement of the number of branching points in a method. Methods with too high
a cyclomatic complexity may be confusing and difficult to test.
&lt;p&gt;
 Use the field provided below to specify the maximum acceptable cyclomatic complexity a method might have.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ParametersPerConstructor" displayName="Constructor with too many parameters" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports constructors with too many parameters. Constructors
with too many parameters can be a good sign that refactoring is necessary, e.g. Replace Constructor with Builder.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of parameters a constructor is allowed to have.
&lt;p&gt;
Use the combobox below to specify if the inspection should ignore private, package-private &amp; private or protected, package-private and
private constructors
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThreeNegationsPerMethod" displayName="Method with more than three negations" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods with three or more negation operations (&lt;b&gt;!&lt;/b&gt; or &lt;b&gt;!=&lt;/b&gt;).
Such methods may be unnecessarily confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to disable this inspection within &apos;equals()&apos; methods.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CyclomaticComplexity" displayName="Overly complex method" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports methods that have too high a cyclomatic complexity. Cyclomatic
complexity is basically a measurement of the number of branching points in a method. Methods with too high
a cyclomatic complexity may be confusing and difficult to test.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum cyclomatic complexity a method is allowed to have.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyMethodWithMoreThanThreeNegations" displayName="Method with more than three negations" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods with three or more negation operations (&lt;b&gt;!&lt;/b&gt; or &lt;b&gt;!=&lt;/b&gt;).
Such methods may be unnecessarily confusing.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NonCommentSourceStatements" displayName="Overly long method" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports methods that are too long. Methods that are too long
may be confusing, and are a good sign that refactoring is necessary.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of non-comment source statements a method is allowed to have.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Packaging issues">
    <inspection shortName="ClassUnconnectedToPackage" displayName="Class independent of its package" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any classes which are neither dependent on nor depended on by other classes
in their package. Such classes are an indication of ad-hoc or incoherent packaging strategies,
and may often profitably be moved.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EmptyDirectory" displayName="Empty directory" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports empty directories.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to have this inspection only report directories under source roots.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExceptionPackage" displayName="Exception package" enabled="false">&lt;html&gt;
&lt;body&gt;
Report packages which contain only classes extending &lt;b&gt;java.lang.Throwable&lt;/b&gt;, either directly or indirectly.
Although exceptions usually don&apos;t depend on other classes for their implementation, they are normally not used separately.
It is often a better design to locate exceptions in the same package as the classes that use them.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Because this inspection requires global code analysis it is only available for &lt;em&gt;Analyze|Inspect Code&lt;/em&gt; or
&lt;em&gt;Analyze|Run Inspection by Name&lt;/em&gt; and it will not report in the editor.
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PackageInMultipleModules" displayName="Package with classes in multiple modules" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any packages which are present in multiple modules.
Because this inspection requires global code analysis it is only available for &lt;em&gt;Analyze|Inspect Code&lt;/em&gt; or
&lt;em&gt;Analyze|Run Inspection by Name&lt;/em&gt; and it will not report in the editor.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PackageWithTooManyClasses" displayName="Package with too many classes" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any packages which contain too many classes. Overly large packages may
indicate a lack of design clarity.
Because this inspection requires global code analysis it is only available for &lt;em&gt;Analyze|Inspect Code&lt;/em&gt; or
&lt;em&gt;Analyze|Run Inspection by Name&lt;/em&gt; and it will not report in the editor.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of classes a package may have before triggering this inspection.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PackageWithTooFewClasses" displayName="Package with too few classes" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any packages which contain too few classes. Overly small packages may indicate a fragmented design.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Because this inspection requires global code analysis it is only available for &lt;em&gt;Analyze|Inspect Code&lt;/em&gt; or
&lt;em&gt;Analyze|Run Inspection by Name&lt;/em&gt; and it will not report in the editor.
&lt;p&gt;
Use the field below to specify the minimum number of classes a package may have.

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DisjointPackage" displayName="Package with disjoint dependency graph" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any packages whose classes can be separated into disjoint, mutually independent
subsets. Such disjoint packages are a symptom of ad-hoc packaging, and may indicate a lack of
conceptual cohesion.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassOnlyUsedInOnePackage" displayName="Class only used from one other package" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any classes which is only depended on and only depends on one module which
is different from the module containing the class. Such class could be moved into
that module.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Android Lint: Performance">
    <inspection shortName="AndroidLintNestedWeights" displayName="Nested layout weights" enabled="false">&lt;html&gt;&lt;body&gt;Nested layout weights&lt;br&gt;&lt;br&gt;Layout weights require a widget to be measured twice. When a LinearLayout with non-zero weights is nested inside another LinearLayout with non-zero weights, then the number of measurements increase exponentially.&lt;br&gt;&lt;br&gt;Issue id: NestedWeights&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWearableBindListener" displayName="Usage of Android Wear BIND_LISTENER is deprecated" enabled="false">&lt;html&gt;&lt;body&gt;Usage of Android Wear BIND_LISTENER is deprecated&lt;br&gt;&lt;br&gt;BIND_LISTENER receives all Android Wear events whether the application needs them or not. This can be inefficient and cause applications to wake up unnecessarily. With Google Play Services 8.2.0 or later it is recommended to use a more efficient combination of manifest listeners and api-based live listeners filtered by action, path and/or path prefix. &lt;br&gt;&lt;br&gt;Issue id: WearableBindListener&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://android-developers.blogspot.com/2016/04/deprecation-of-bindlistener.html&quot;&gt;http://android-developers.blogspot.com/2016/04/deprecation-of-bindlistener.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUselessLeaf" displayName="Useless leaf layout" enabled="false">&lt;html&gt;&lt;body&gt;Useless leaf layout&lt;br&gt;&lt;br&gt;A layout that has no children or no background can often be removed (since it is invisible) for a flatter and more efficient layout hierarchy.&lt;br&gt;&lt;br&gt;Issue id: UselessLeaf&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDevModeObsolete" displayName="Dev Mode Obsolete" enabled="false">&lt;html&gt;&lt;body&gt;Dev Mode Obsolete&lt;br&gt;&lt;br&gt;In the past, our documentation recommended creating a &lt;code&gt;dev&lt;/code&gt; product flavor with has a minSdkVersion of 21, in order to enable multidexing to speed up builds significantly during development.&lt;br/&gt;
&lt;br/&gt;
That workaround is no longer necessary, and it has some serious downsides, such as breaking API access checking (since the true &lt;code&gt;minSdkVersion&lt;/code&gt; is no longer known).&lt;br/&gt;
&lt;br/&gt;
In recent versions of the IDE and the Gradle plugin, the IDE automatically passes the API level of the connected device used for deployment, and if that device is at least API 21, then multidexing is automatically turned on, meaning that you get the same speed benefits as the &lt;code&gt;dev&lt;/code&gt; product flavor but without the downsides.&lt;br&gt;&lt;br&gt;Issue id: DevModeObsolete&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAnimatorKeep" displayName="Missing @Keep for Animated Properties" enabled="false">&lt;html&gt;&lt;body&gt;Missing @Keep for Animated Properties&lt;br&gt;&lt;br&gt;When you use property animators, properties can be accessed via reflection. Those methods should be annotated with @Keep to ensure that during release builds, the methods are not potentially treated as unused and removed, or treated as internal only and get renamed to something shorter.&lt;br/&gt;
&lt;br/&gt;
This check will also flag other potential reflection problems it encounters, such as a missing property, wrong argument types, etc.&lt;br&gt;&lt;br&gt;Issue id: AnimatorKeep&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDuplicateDivider" displayName="Unnecessary Divider Copy" enabled="false">&lt;html&gt;&lt;body&gt;Unnecessary Divider Copy&lt;br&gt;&lt;br&gt;Older versions of the RecyclerView library did not include a divider decorator, but one was provided as a sample in the support demos. This divider class has been widely copy/pasted into various projects.&lt;br/&gt;
&lt;br/&gt;
In recent versions of the support library, the divider decorator is now included, so you can replace custom copies with the &quot;built-in&quot; version, &lt;code&gt;android.support.v7.widget.DividerItemDecoration&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: DuplicateDivider&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSyntheticAccessor" displayName="Synthetic Accessor" enabled="false">&lt;html&gt;&lt;body&gt;Synthetic Accessor&lt;br&gt;&lt;br&gt;A private inner class which is accessed from the outer class will force the compiler to insert a synthetic accessor; this means that you are causing extra overhead. This is not important in small projects, but is important for large apps running up against the 64K method handle limit, and especially for &lt;b&gt;libraries&lt;/b&gt; where you want to make sure your library is as small as possible for the cases where your library is used in an app running up against the 64K limit.&lt;br&gt;&lt;br&gt;Issue id: SyntheticAccessor&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWakelockTimeout" displayName="Using wakeLock without timeout" enabled="false">&lt;html&gt;&lt;body&gt;Using wakeLock without timeout&lt;br&gt;&lt;br&gt;Wakelocks have two acquire methods: one with a timeout, and one without. You should generally always use the one with a timeout. A typical timeout is 10 minutes. If the task takes longer than it is critical that it happens (i.e. can&apos;t use &lt;code&gt;JobScheduler&lt;/code&gt;) then maybe they should consider a foreground service instead (which is a stronger run guarantee and lets the user know something long/important is happening).&lt;br&gt;&lt;br&gt;Issue id: WakelockTimeout&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDuplicateStrings" displayName="Duplicate Strings" enabled="false">&lt;html&gt;&lt;body&gt;Duplicate Strings&lt;br&gt;&lt;br&gt;Duplicate strings can make applications larger unnecessarily.&lt;br/&gt;
&lt;br/&gt;
This lint check looks for duplicate strings, including differences for strings where the only difference is in capitalization. Title casing and all uppercase can all be adjusted in the layout or in code.&lt;br&gt;&lt;br&gt;Issue id: DuplicateStrings&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/widget/TextView.html#attr_android:inputType&quot;&gt;https://developer.android.com/reference/android/widget/TextView.html#attr_android:inputType&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintStaticFieldLeak" displayName="Static Field Leaks" enabled="false">&lt;html&gt;&lt;body&gt;Static Field Leaks&lt;br&gt;&lt;br&gt;A static field will leak contexts.&lt;br/&gt;
&lt;br/&gt;
Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a &lt;code&gt;Fragment&lt;/code&gt; or &lt;code&gt;Activity&lt;/code&gt;, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&lt;br/&gt;
&lt;br/&gt;
Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&lt;br/&gt;
&lt;br/&gt;
ViewModel classes should never point to Views or non-application Contexts.&lt;br&gt;&lt;br&gt;Issue id: StaticFieldLeak&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintObsoleteLayoutParam" displayName="Obsolete layout params" enabled="false">&lt;html&gt;&lt;body&gt;Obsolete layout params&lt;br&gt;&lt;br&gt;The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed.&lt;br&gt;&lt;br&gt;Issue id: ObsoleteLayoutParam&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintHandlerLeak" displayName="Handler reference leaks" enabled="false">&lt;html&gt;&lt;body&gt;Handler reference leaks&lt;br&gt;&lt;br&gt;Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object.&lt;br&gt;&lt;br&gt;Issue id: HandlerLeak&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMergeRootFrame" displayName="FrameLayout can be replaced with &lt;merge&gt; tag" enabled="false">&lt;html&gt;&lt;body&gt;FrameLayout can be replaced with &lt;code&gt;&amp;lt;merge&gt;&lt;/code&gt; tag&lt;br&gt;&lt;br&gt;If a &lt;code&gt;&amp;lt;FrameLayout&gt;&lt;/code&gt; is the root of a layout and does not provide background or padding etc, it can often be replaced with a &lt;code&gt;&amp;lt;merge&gt;&lt;/code&gt; tag which is slightly more efficient. Note that this depends on context, so make sure you understand how the &lt;code&gt;&amp;lt;merge&gt;&lt;/code&gt; tag works before proceeding.&lt;br&gt;&lt;br&gt;Issue id: MergeRootFrame&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html&quot;&gt;http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintViewHolder" displayName="View Holder Candidates" enabled="false">&lt;html&gt;&lt;body&gt;View Holder Candidates&lt;br&gt;&lt;br&gt;When implementing a view Adapter, you should avoid unconditionally inflating a new layout; if an available item is passed in for reuse, you should try to use that one instead. This helps make for example ListView scrolling much smoother.&lt;br&gt;&lt;br&gt;Issue id: ViewHolder&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/training/improving-layouts/smooth-scrolling.html#ViewHolder&quot;&gt;http://developer.android.com/training/improving-layouts/smooth-scrolling.html#ViewHolder&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintTooManyViews" displayName="Layout has too many views" enabled="false">&lt;html&gt;&lt;body&gt;Layout has too many views&lt;br&gt;&lt;br&gt;Using too many views in a single layout is bad for performance. Consider using compound drawables or other tricks for reducing the number of views in this layout.&lt;br/&gt;
&lt;br/&gt;
The maximum view count defaults to 80 but can be configured with the environment variable &lt;code&gt;ANDROID_LINT_MAX_VIEW_COUNT&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: TooManyViews&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUseCompoundDrawables" displayName="Node can be replaced by a TextView with compound drawables" enabled="false">&lt;html&gt;&lt;body&gt;Node can be replaced by a &lt;code&gt;TextView&lt;/code&gt; with compound drawables&lt;br&gt;&lt;br&gt;A &lt;code&gt;LinearLayout&lt;/code&gt; which contains an &lt;code&gt;ImageView&lt;/code&gt; and a &lt;code&gt;TextView&lt;/code&gt; can be more efficiently handled as a compound drawable (a single TextView, using the &lt;code&gt;drawableTop&lt;/code&gt;, &lt;code&gt;drawableLeft&lt;/code&gt;, &lt;code&gt;drawableRight&lt;/code&gt; and/or &lt;code&gt;drawableBottom&lt;/code&gt; attributes to draw one or more images adjacent to the text).&lt;br/&gt;
&lt;br/&gt;
If the two widgets are offset from each other with margins, this can be replaced with a &lt;code&gt;drawablePadding&lt;/code&gt; attribute.&lt;br/&gt;
&lt;br/&gt;
There&apos;s a lint quickfix to perform this conversion in the Eclipse plugin.&lt;br&gt;&lt;br&gt;Issue id: UseCompoundDrawables&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUselessParent" displayName="Useless parent layout" enabled="false">&lt;html&gt;&lt;body&gt;Useless parent layout&lt;br&gt;&lt;br&gt;A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy.&lt;br&gt;&lt;br&gt;Issue id: UselessParent&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUseOfBundledGooglePlayServices" displayName="Use of bunlded version of Google Play services" enabled="false">&lt;html&gt;&lt;body&gt;Use of bundled version of Google Play services&lt;br&gt;&lt;br&gt;Google Play services SDK&apos;s can be selectively included, which enables a smaller APK size. Consider declaring dependencies on individual Google Play services SDK&apos;s. If you are using Firebase API&apos;s (&lt;a href=&quot;http://firebase.google.com/docs/android/setup&quot;&gt;http://firebase.google.com/docs/android/setup&lt;/a&gt;), Android Studio&apos;s Tools &amp;#8594; Firebase assistant window can automatically add just the dependencies needed for each feature.&lt;br&gt;&lt;br&gt;Issue id: UseOfBundledGooglePlayServices&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developers.google.com/android/guides/setup#split&quot;&gt;http://developers.google.com/android/guides/setup#split&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDisableBaselineAlignment" displayName="Missing baselineAligned attribute" enabled="false">&lt;html&gt;&lt;body&gt;Missing &lt;code&gt;baselineAligned&lt;/code&gt; attribute&lt;br&gt;&lt;br&gt;When a LinearLayout is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster.&lt;br&gt;&lt;br&gt;Issue id: DisableBaselineAlignment&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintLogConditional" displayName="Unconditional Logging Calls" enabled="false">&lt;html&gt;&lt;body&gt;Unconditional Logging Calls&lt;br&gt;&lt;br&gt;The BuildConfig class (available in Tools 17) provides a constant, &quot;DEBUG&quot;, which indicates whether the code is being built in release mode or in debug mode. In release mode, you typically want to strip out all the logging calls. Since the compiler will automatically remove all code which is inside a &quot;if (false)&quot; check, surrounding your logging calls with a check for BuildConfig.DEBUG is a good idea.&lt;br/&gt;
&lt;br/&gt;
If you &lt;b&gt;really&lt;/b&gt; intend for the logging to be present in release mode, you can suppress this warning with a @SuppressLint annotation for the intentional logging calls.&lt;br&gt;&lt;br&gt;Issue id: LogConditional&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintFloatMath" displayName="Using FloatMath instead of Math" enabled="false">&lt;html&gt;&lt;body&gt;Using &lt;code&gt;FloatMath&lt;/code&gt; instead of &lt;code&gt;Math&lt;/code&gt;&lt;br&gt;&lt;br&gt;In older versions of Android, using &lt;code&gt;android.util.FloatMath&lt;/code&gt; was recommended for performance reasons when operating on floats. However, on modern hardware doubles are just as fast as float (though they take more memory), and in recent versions of Android, &lt;code&gt;FloatMath&lt;/code&gt; is actually slower than using &lt;code&gt;java.lang.Math&lt;/code&gt; due to the way the JIT optimizes &lt;code&gt;java.lang.Math&lt;/code&gt;. Therefore, you should use &lt;code&gt;Math&lt;/code&gt; instead of &lt;code&gt;FloatMath&lt;/code&gt; if you are only targeting Froyo and above.&lt;br&gt;&lt;br&gt;Issue id: FloatMath&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/practices/design/performance.html#avoidfloat&quot;&gt;http://developer.android.com/guide/practices/design/performance.html#avoidfloat&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDrawAllocation" displayName="Memory allocations within drawing code" enabled="false">&lt;html&gt;&lt;body&gt;Memory allocations within drawing code&lt;br&gt;&lt;br&gt;You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&lt;br/&gt;
&lt;br/&gt;
The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&lt;br/&gt;
&lt;br/&gt;
Some methods allocate memory on your behalf (such as &lt;code&gt;Bitmap.create&lt;/code&gt;), and these should be handled in the same way.&lt;br&gt;&lt;br&gt;Issue id: DrawAllocation&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUseSparseArrays" displayName="HashMap can be replaced with SparseArray" enabled="false">&lt;html&gt;&lt;body&gt;HashMap can be replaced with SparseArray&lt;br&gt;&lt;br&gt;For maps where the keys are of type integer, it&apos;s typically more efficient to use the Android &lt;code&gt;SparseArray&lt;/code&gt; API. This check identifies scenarios where you might want to consider using &lt;code&gt;SparseArray&lt;/code&gt; instead of &lt;code&gt;HashMap&lt;/code&gt; for better performance.&lt;br/&gt;
&lt;br/&gt;
This is &lt;b&gt;particularly&lt;/b&gt; useful when the value types are primitives like ints, where you can use &lt;code&gt;SparseIntArray&lt;/code&gt; and avoid auto-boxing the values from &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;Integer&lt;/code&gt;.&lt;br/&gt;
&lt;br/&gt;
If you need to construct a &lt;code&gt;HashMap&lt;/code&gt; because you need to call an API outside of your control which requires a &lt;code&gt;Map&lt;/code&gt;, you can suppress this warning using for example the &lt;code&gt;@SuppressLint&lt;/code&gt; annotation.&lt;br&gt;&lt;br&gt;Issue id: UseSparseArrays&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintRecycle" displayName="Missing recycle() calls" enabled="false">&lt;html&gt;&lt;body&gt;Missing &lt;code&gt;recycle()&lt;/code&gt; calls&lt;br&gt;&lt;br&gt;Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a &lt;code&gt;recycle()&lt;/code&gt; call) after use. This lint check looks for missing &lt;code&gt;recycle()&lt;/code&gt; calls.&lt;br&gt;&lt;br&gt;Issue id: Recycle&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUseValueOf" displayName="Should use valueOf instead of new" enabled="false">&lt;html&gt;&lt;body&gt;Should use &lt;code&gt;valueOf&lt;/code&gt; instead of &lt;code&gt;new&lt;/code&gt;&lt;br&gt;&lt;br&gt;You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the &lt;code&gt;valueOf&lt;/code&gt; factory method, such as &lt;code&gt;Integer.valueOf(42)&lt;/code&gt;. This will typically use less memory because common integers such as 0 and 1 will share a single instance.&lt;br&gt;&lt;br&gt;Issue id: UseValueOf&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintOverdraw" displayName="Overdraw: Painting regions more than once" enabled="false">&lt;html&gt;&lt;body&gt;Overdraw: Painting regions more than once&lt;br&gt;&lt;br&gt;If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&lt;br/&gt;
&lt;br/&gt;
NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&lt;br/&gt;
&lt;br/&gt;
If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&lt;br/&gt;
&lt;br/&gt;
Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.&lt;br&gt;&lt;br&gt;Issue id: Overdraw&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInefficientWeight" displayName="Inefficient layout weight" enabled="false">&lt;html&gt;&lt;body&gt;Inefficient layout weight&lt;br&gt;&lt;br&gt;When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of &lt;code&gt;0dp&lt;/code&gt; to it since it will absorb all the remaining space anyway. With a declared width/height of &lt;code&gt;0dp&lt;/code&gt; it does not have to measure its own size first.&lt;br&gt;&lt;br&gt;Issue id: InefficientWeight&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUnusedIds" displayName="Unused id" enabled="false">&lt;html&gt;&lt;body&gt;Unused id&lt;br&gt;&lt;br&gt;This resource id definition appears not to be needed since it is not referenced from anywhere. Having id definitions, even if unused, is not necessarily a bad idea since they make working on layouts and menus easier, so there is not a strong reason to delete these.&lt;br/&gt;
&lt;br/&gt;
The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&lt;br/&gt;
&lt;br/&gt;
You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests=true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests=true.&lt;br&gt;&lt;br&gt;Issue id: UnusedIds&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintVectorPath" displayName="Long vector paths" enabled="false">&lt;html&gt;&lt;body&gt;Long vector paths&lt;br&gt;&lt;br&gt;Using long vector paths is bad for performance. There are several ways to make the &lt;code&gt;pathData&lt;/code&gt; shorter:&lt;br/&gt;
* Using less precision&lt;br/&gt;
* Removing some minor details&lt;br/&gt;
* Using the Android Studio vector conversion tool&lt;br/&gt;
* Rasterizing the image (converting to PNG)&lt;br&gt;&lt;br&gt;Issue id: VectorPath&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUnpackedNativeCode" displayName="Missing android:extractNativeLibs manifest attribute" enabled="false">&lt;html&gt;&lt;body&gt;Missing &lt;code&gt;android:extractNativeLibs=false&lt;/code&gt;&lt;br&gt;&lt;br&gt;This app loads native libraries using &lt;code&gt;System.loadLibrary()&lt;/code&gt;.&lt;br/&gt;
&lt;br/&gt;
Consider adding &lt;code&gt;android:extractNativeLibs=&quot;false&quot;&lt;/code&gt; to the &lt;code&gt;&amp;lt;application&gt;&lt;/code&gt; tag in AndroidManifest.xml. Starting with Android 6.0, this will make installation faster, the app will take up less space on the device and updates will have smaller download sizes.&lt;br&gt;&lt;br&gt;Issue id: UnpackedNativeCode&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUnusedResources" displayName="Unused resources" enabled="false">&lt;html&gt;&lt;body&gt;Unused resources&lt;br&gt;&lt;br&gt;Unused resources make applications larger and slow down builds.&lt;br/&gt;
&lt;br/&gt;
The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&lt;br/&gt;
&lt;br/&gt;
You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests=true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests=true.&lt;br&gt;&lt;br&gt;Issue id: UnusedResources&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintTooDeepLayout" displayName="Layout hierarchy is too deep" enabled="false">&lt;html&gt;&lt;body&gt;Layout hierarchy is too deep&lt;br&gt;&lt;br&gt;Layouts with too much nesting is bad for performance. Consider using a flatter layout (such as &lt;code&gt;RelativeLayout&lt;/code&gt; or &lt;code&gt;GridLayout&lt;/code&gt;).The default maximum depth is 10 but can be configured with the environment variable &lt;code&gt;ANDROID_LINT_MAX_DEPTH&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: TooDeepLayout&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintViewTag" displayName="Tagged object leaks" enabled="false">&lt;html&gt;&lt;body&gt;Tagged object leaks&lt;br&gt;&lt;br&gt;Prior to Android 4.0, the implementation of &lt;code&gt;View.setTag(int, Object)&lt;/code&gt; would store the objects in a static map, where the values were strongly referenced. This means that if the object contains any references pointing back to the context, the context (which points to pretty much everything else) will leak. If you pass a view, the view provides a reference to the context that created it. Similarly, view holders typically contain a view, and cursors are sometimes also associated with views.&lt;br&gt;&lt;br&gt;Issue id: ViewTag&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintObsoleteSdkInt" displayName="Obsolete SDK_INT Version Check" enabled="false">&lt;html&gt;&lt;body&gt;Obsolete SDK_INT Version Check&lt;br&gt;&lt;br&gt;This check flags version checks that are not necessary, because the &lt;code&gt;minSdkVersion&lt;/code&gt; (or surrounding known API level) is already at least as high as the version checked for.&lt;br/&gt;
&lt;br/&gt;
Similarly, it also looks for resources in &lt;code&gt;-vNN&lt;/code&gt; folders, such as &lt;code&gt;values-v14&lt;/code&gt; where the version qualifier is less than or equal to the &lt;code&gt;minSdkVersion&lt;/code&gt;, where the contents should be merged into the best folder.&lt;br&gt;&lt;br&gt;Issue id: ObsoleteSdkInt&lt;/body&gt;&lt;/html&gt;</inspection>
  </group>
  <group name="UI form">
    <inspection shortName="NoScrollPane" displayName="Scrollable component not in JScrollPane" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;Scrollable&lt;/font&gt;&lt;/b&gt; components,
except for &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;JTextField&lt;/font&gt;&lt;/b&gt; , which are not placed in a
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;JScrollPane&lt;/font&gt;&lt;/b&gt; . The quickfix surrounds the problematic
component with a scroll pane.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="BoundFieldAssignment" displayName="Assignment to UI-bound field" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports assignments to fields which are bound to components
in UI Designer forms. Such assignments will cause the component setup code generated by UI Designer
for such fields to be ignored.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NoButtonGroup" displayName="Radio button not in a group" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;JRadioButton&lt;/font&gt;&lt;/b&gt; components which are not placed in a
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;ButtonGroup&lt;/font&gt;&lt;/b&gt; . A quick fix is available to group radio
buttons placed in adjacent grid cells.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MissingMnemonic" displayName="Missing mnemonics" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports focusable components with the
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;text&lt;/font&gt;&lt;/b&gt; property or labels with assigned
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;labelFor&lt;/font&gt;&lt;/b&gt; property which do not have a mnemonic
character. The quickfix allows to assign a unique mnemonic to such a component.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="InvalidPropertyKeyForm" displayName="Invalid property key in a UI form" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks for unresolved references to *.properties files.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NoLabelFor" displayName="No label for component" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports components which do not have any static
text and do not have any label which is marked with &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;setLabelFor&lt;/font&gt;&lt;/b&gt;
for this component. Components which do not have static text include edit fields and combo boxes.
Such components cannot be activated with a keyboard shortcut. The quickfix for this inspection
allows to automatically associate an adjacent label with the problematic component.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="OneButtonGroup" displayName="Button group with one button" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;ButtonGroup&lt;/font&gt;&lt;/b&gt; instances which contain only one
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;JRadioButton&lt;/font&gt;&lt;/b&gt; .
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DuplicateMnemonic" displayName="Duplicate mnemonics" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports components which have the same mnemonic
character. The quickfix allows to assign unique mnemonic characters to each of the components.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="I18nForm" displayName="Hard coded string literal in a UI form" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any instances of hardcoded strings in your UI forms.
Hardcoded string literals are probably errors in
an internationalized environment.
This inspection won&apos;t report empty strings and strings consisting of only whitespace.

There is a quickfix provided that transforms a string literal
into a reference to a property in resource bundle.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FormSpellChecking" displayName="Typo in a UI form" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Locates typos and misspelling in your UI forms, (e.g. in a JLabel text or JPanel title etc) and fix them in one click.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Portability">
    <inspection shortName="SystemExit" displayName="Call to &apos;System.exit()&apos; or related methods" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;System.exit()&lt;/b&gt;,
&lt;b&gt;Runtime.exit()&lt;/b&gt;, or &lt;b&gt;Runtime.halt()&lt;/b&gt;.
Calls to these methods make the calling code unportable to most application servers.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore calls in main methods.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseOfProcessBuilder" displayName="Use of &apos;java.lang.ProcessBuilder&apos; class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports uses of &lt;b&gt;java.lang.ProcessBuilder&lt;/b&gt;.
Uses of &lt;b&gt;ProcessBuilder&lt;/b&gt; are inherently unportable between operating systems.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SystemGetenv" displayName="Call to &apos;System.getenv()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;System.getenv()&lt;/b&gt;.
Calls to &lt;b&gt;System.getenv()&lt;/b&gt; are inherently unportable.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseOfAWTPeerClass" displayName="Use of AWT peer class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any uses of concrete AWT peer classes. Such classes represent
native windowing system widgets, and will be non-portable between different windowing
systems.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HardcodedFileSeparators" displayName="Hardcoded file separator" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports the forward (/) or backward (\) slash in a string or
character literal. These characters are commonly used as file separators, and portability may suffer if their use is hardcoded.
This will not report a forward slash immediately following a &apos;&amp;lt;&apos; character,
or immediately preceding a &apos;&amp;gt;&apos; character, as those often indicate XML or HTML tags rather than file names,
strings representing a &lt;b&gt;java.util.TimeZone&lt;/b&gt; ID, strings that are a valid regular expression or strings that equal an IANA-registered MIME media type.
&lt;p&gt;
Normally, usage of the &lt;b&gt;example/*&lt;/b&gt; MIME media type outside of an example (&lt;em&gt;e.g.&lt;/em&gt; in a &lt;b&gt;Content-Type&lt;/b&gt;
header) is an error.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to include &lt;b&gt;example/*&lt;/b&gt; in the set of recognized media types.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NativeMethods" displayName="Native method" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports methods declared &lt;b&gt;native&lt;/b&gt;. Native methods are inherently unportable.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseOfJDBCDriverClass" displayName="Use of concrete JDBC driver class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any uses of concrete JDBC driver classes. Use of such classes will
bind your project to a specific database and driver, defeating the purpose of JDBC and
resulting in loss of portability.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HardcodedLineSeparators" displayName="Hardcoded line separator" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports the newline (&lt;b&gt;\n&lt;/b&gt;) or return (&lt;b&gt;\r&lt;/b&gt;) characters in a string or
character literal. These characters are commonly used as line separators, and portability may suffer they are hardcoded.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RuntimeExec" displayName="Call to &apos;Runtime.exec()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;Runtime.exec()&lt;/b&gt; or any
of its variants. Calls to &lt;b&gt;Runtime.exec()&lt;/b&gt; are inherently unportable
between operating systems.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseOfSunClasses" displayName="Use of sun.* classes" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any uses of classes from the &lt;b&gt;&lt;i&gt;sun.*&lt;/i&gt;&lt;/b&gt; hierarchy.
Such classes are non-portable between different JVM&apos;s.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Code">
    <inspection shortName="UndesirableClassUsage" displayName="Undesirable class usage" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects usages of internally deprecated classes.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UsePrimitiveTypes" displayName="Use .equals with primitive types" enabled="false">&lt;html&gt;
&lt;body&gt;
Primitive types should be compared with &lt;code&gt;.equals&lt;/code&gt; due to Java 8 type annotations also applicable to primitive types.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseVirtualFileEquals" displayName="Use VirtualFile.equals" enabled="false">&lt;html&gt;
&lt;body&gt;
Use &lt;code&gt;equals&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; when comparing &lt;code&gt;VirtualFile&lt;/code&gt; objects
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InspectionUniqueToolbarId" displayName="Specify toolbar id" enabled="false">&lt;html&gt;
&lt;body&gt;
Please specify unique toolbar id.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FileEqualsUsage" displayName="File.equals() usage" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects usages of &lt;code&gt;File.equals/hashCode/compareTo&lt;/code&gt; methods - which do not honor case-insensitivity on macOS.
Please use &lt;code&gt;FileUtil.filesEquals/fileHashCode/compareFiles&lt;/code&gt; methods instead.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MissingRecentApi" displayName="Usage of IntelliJ API not available in older IDEs" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports usages of IntelliJ API that were introduced in a version newer than &quot;since-build&quot; specified in the &lt;code&gt;plugin.xml&lt;/code&gt;.
It may lead to incompatibilities of the plugin with older IDE builds.

&lt;p&gt;
  To avoid possible issues when running the plugin in older IDEs, it may be necessary to increase &quot;since-build&quot; constraint of the plugin,
  alternatively avoid using the APIs.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnsafeReturnStatementVisitor" displayName="Unsafe return statements visitor" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports recursive Java element visitors which process &lt;code&gt;PsiReturnStatement&lt;/code&gt;s
even if they belong to another &lt;code&gt;PsiClass&lt;/code&gt; or &lt;code&gt;PsiLambdaExpression&lt;/code&gt;. In most cases it&apos;s a bug.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PresentationAnnotation" displayName="Invalid icon path in @Presentation" enabled="false">&lt;html&gt;
&lt;body&gt;
Validates the icon path in &lt;code&gt;@Presentation&lt;/code&gt; annotation.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseDPIAwareBorders" displayName="Use DPI-aware borders" enabled="false">&lt;html&gt;
&lt;body&gt;
Use &lt;code&gt;JBUI.Borders.empty&lt;/code&gt; for DPI-aware empty borders.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InspectionUsingGrayColors" displayName="Using new Color(a,a,a)" enabled="false">&lt;html&gt;
&lt;body&gt;
Use cache (&lt;code&gt;com.intellij.ui.Gray&lt;/code&gt;) for gray colors.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UseJBColor" displayName="Use Darcula aware JBColor" enabled="false">&lt;html&gt;
&lt;body&gt;
Use dark theme aware &lt;code&gt;JBColor&lt;/code&gt; instead of &lt;code&gt;java.awt.Color&lt;/code&gt;.
Use the &lt;code&gt;JBColor&lt;/code&gt; constructor to specify regular and dark theme colors, to avoid using bad looking colors under dark themes.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StatefulEp" displayName="Stateful extension" enabled="false">&lt;html&gt;
&lt;body&gt;
Potential memory leak detected. Please don&apos;t hold heavy objects in extensions if you&apos;re not 100% sure.
Ideally, extensions should be stateless.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseCouple" displayName="Use Couple instead of Pair" enabled="false">&lt;html&gt;
&lt;body&gt;
Use &lt;code&gt;Couple&amp;lt;T&amp;gt;&lt;/code&gt; instead of &lt;code&gt;Pair&amp;lt;T, T&amp;gt;&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ComponentNotRegistered" displayName="Component/Action not registered" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects plugin components and actions that are not (yet) registered in a plugin.xml
descriptor and offers a QuickFix to register the component. This eases developing new components when
making use of the &quot;Create Class&quot; intention and helps to keep track of potentially obsolete
components.
&lt;p&gt;
    There&apos;s an option to turn off the check for Actions as they may be intentionally created and
    registered dynamically. Note that the inspection can also be suppressed on a per-class level,
    so it normally shouldn&apos;t be necessary to switch off the inspection completely. Especially
    because the inspection ignores abstract classes and by default non-public classes as well.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UElementAsPsi" displayName="UElement as PsiElement usage" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports usage of &lt;code&gt;UElement&lt;/code&gt; as &lt;code&gt;PsiElement&lt;/code&gt;. The &lt;code&gt;PsiElement&lt;/code&gt; obtained this way is ambiguous.
&lt;p&gt;
If you need &quot;physical&quot; &lt;code&gt;PsiElement&lt;/code&gt; please use &lt;code&gt;UElementKt.getSourcePsiElement()&lt;/code&gt;,
if you need &lt;code&gt;PsiElement&lt;/code&gt; that &quot;emulates&quot; behaviour of Java-elements (&lt;code&gt;PsiClass&lt;/code&gt;, &lt;code&gt;PsiMethod&lt;/code&gt;, etc.)
then please use &lt;code&gt;UElementKt.getAsJavaPsiElement()&lt;/code&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseDPIAwareInsets" displayName="Use DPI-aware insets" enabled="false">&lt;html&gt;
&lt;body&gt;
Use &lt;code&gt;JBUI.insets&lt;/code&gt; for DPI-aware insets.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DontUsePairConstructor" displayName="Don&apos;t use constructor of Pair class" enabled="false">&lt;html&gt;
&lt;body&gt;
Use of &lt;code&gt;Pair&lt;/code&gt; constructor produces unnecessary generic declarations, use &lt;code&gt;Pair.create(a, b)&lt;/code&gt; instead.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonDefaultConstructor" displayName="Non default constructors for extension class" enabled="false">&lt;html&gt;
&lt;body&gt;
Validates that extension class has only default constructor.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="QuickFixGetFamilyNameViolation" displayName="QuickFix&apos;s getFamilyName() implementation must not depend on a specific context" enabled="false">&lt;html&gt;
&lt;body&gt;
Inspection reports cases when &lt;code&gt;QuickFix#getFamilyName()&lt;/code&gt;
implementation uses non-static fields, methods, containing method local variables variables etc.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnsafeVfsRecursion" displayName="Unsafe VFS recursion" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects calls of &lt;code&gt;VirtualFile.getChildren()&lt;/code&gt; inside recursive methods.
Such code may cause dead loops when iterating over cyclic symlinks -
so please use &lt;code&gt;VfsUtilCore.visitChildrenRecursively()&lt;/code&gt; instead.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PsiElementConcatenation" displayName="Using PsiElement string representation to generate new expression is incorrect" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks that &lt;code&gt;PsiElement&lt;/code&gt; is not directly concatenated in the string which will be used for
&lt;code&gt;createExpressionFromText&lt;/code&gt;, etc. &lt;code&gt;PsiElement.getText()&lt;/code&gt; usually should be used instead.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="JSON and JSON5">
    <inspection shortName="JsonSchemaDeprecation" displayName="Deprecated JSON property" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks for deprecated properties in JSON files&lt;br&gt;
Note that deprecation mechanism is not defined in the JSON Schema specification yet,
and this inspection uses a non-standard extension &apos;deprecationMessage&apos;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JsonSchemaCompliance" displayName="Compliance with JSON schema" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks that JSON files conform to JSON Schemas assigned to them&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Json5StandardCompliance" displayName="Compliance with JSON5 standard" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks that JSON5 files conform to language specification (http://json5.org/).&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JsonSchemaRefReference" displayName="Unresolved &apos;$ref&apos; and &apos;$schema&apos; references" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks that &apos;$ref&apos; and &apos;$schema&apos; paths are valid&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JsonStandardCompliance" displayName="Compliance with JSON standard" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks that JSON files conform to language specification (RFC-7159).&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JsonDuplicatePropertyKeys" displayName="Duplicate keys in object literals" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks that object literals don&apos;t contain duplicate keys.&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Android Lint: Interoperability">
    <inspection shortName="AndroidLintLambdaLast" displayName="Lambda Parameters Last" enabled="false">&lt;html&gt;&lt;body&gt;Lambda Parameters Last&lt;br&gt;&lt;br&gt;To improve calling this code from Kotlin,&lt;br/&gt;
parameter types eligible for SAM conversion should be last.&lt;br&gt;&lt;br&gt;Issue id: LambdaLast&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://android.github.io/kotlin-guides/interop.html#lambda-parameters-last&quot;&gt;https://android.github.io/kotlin-guides/interop.html#lambda-parameters-last&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintNoHardKeywords" displayName="No Hard Kotlin Keywords" enabled="false">&lt;html&gt;&lt;body&gt;No Hard Kotlin Keywords&lt;br&gt;&lt;br&gt;Do not use Kotlin&amp;#8217;s hard keywords as the name of methods or fields.&lt;br/&gt;
These require the use of backticks to escape when calling from Kotlin.&lt;br/&gt;
Soft keywords, modifier keywords, and special identifiers are allowed.&lt;br/&gt;
&lt;br/&gt;
For example, Mockito&amp;#8217;s &lt;code&gt;when&lt;/code&gt; function requires backticks when used from Kotlin:&lt;br/&gt;
&lt;br/&gt;
    val callable = Mockito.mock(Callable::class.java)&lt;br/&gt;
    Mockito.`when`(callable.call()).thenReturn(/* &amp;#8230; */)&lt;br&gt;&lt;br&gt;Issue id: NoHardKeywords&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://android.github.io/kotlin-guides/interop.html#no-hard-keywords&quot;&gt;https://android.github.io/kotlin-guides/interop.html#no-hard-keywords&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUnknownNullness" displayName="Unknown nullness" enabled="false">&lt;html&gt;&lt;body&gt;Unknown nullness&lt;br&gt;&lt;br&gt;To improve referencing this code from Kotlin, consider adding&lt;br/&gt;
explicit nullness information here with either &lt;code&gt;@NonNull&lt;/code&gt; or &lt;code&gt;@Nullable&lt;/code&gt;.&lt;br/&gt;
&lt;br/&gt;
You can set the environment variable&lt;br/&gt;
    &lt;code&gt;ANDROID_LINT_NULLNESS_IGNORE_DEPRECATED=true&lt;/code&gt;&lt;br/&gt;
if you want lint to ignore classes and members that have been annotated with&lt;br/&gt;
&lt;code&gt;@Deprecated&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: UnknownNullness&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://android.github.io/kotlin-guides/interop.html#nullability-annotations&quot;&gt;https://android.github.io/kotlin-guides/interop.html#nullability-annotations&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintKotlinPropertyAccess" displayName="Kotlin Property Access" enabled="false">&lt;html&gt;&lt;body&gt;Kotlin Property Access&lt;br&gt;&lt;br&gt;For a method to be represented as a property in Kotlin, strict &amp;#8220;bean&amp;#8221;-style prefixing must be used.&lt;br/&gt;
&lt;br/&gt;
Accessor methods require a &amp;#8216;get&amp;#8217; prefix or for boolean-returning methods an &amp;#8216;is&amp;#8217; prefix can be used.&lt;br&gt;&lt;br&gt;Issue id: KotlinPropertyAccess&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://android.github.io/kotlin-guides/interop.html#property-prefixes&quot;&gt;https://android.github.io/kotlin-guides/interop.html#property-prefixes&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
  </group>
  <group name="JVM languages">
    <inspection shortName="NonExtendableApiUsage" displayName="Class, interface, or method should not be extended" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports classes, interfaces and methods that extend, implement or override API elements marked with &lt;code&gt;@ApiStatus.NonExtendable&lt;/code&gt;
  annotation.
&lt;/p&gt;
&lt;code&gt;@ApiStatus.NonExtendable&lt;/code&gt; annotation indicates that the annotated API class, interface or method &lt;strong&gt;must not be extended,
  implemented or overridden&lt;/strong&gt;. Instances of classes and interfaces marked with this annotation may be cast to an internal
implementing class in the library code,
leading to &lt;code&gt;ClassCastException&lt;/code&gt; if a different implementation is provided by client. New abstract methods may be added to such
classes and interfaces breaking compatibility with client&apos;s implementations.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="OverrideOnly" displayName="Method can only be overridden" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports invocations of API methods marked with &lt;code&gt;@ApiStatus.OverrideOnly&lt;/code&gt; annotation.
&lt;/p&gt;
&lt;code&gt;@ApiStatus.OverrideOnly&lt;/code&gt; indicates that the annotated method is part of SPI (Service Provider Interface),
which is intended to be &lt;strong&gt;only implemented or overridden&lt;/strong&gt; but not called by clients of the declaring library.
If a class or interface is marked with this annotation it means that all its methods can be only overridden.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="BlockingMethodInNonBlockingContext" displayName="Inappropriate thread-blocking method call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports thread-blocking method calls found in a code fragment where a thread should not be blocked
&lt;!-- tooltip end --&gt;
(e.g. Reactive frameworks, Kotlin coroutines)
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ScheduledForRemoval" displayName="Usage of API scheduled for removal" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports usages of API scheduled for removal (annotated  with
&lt;code&gt;@ApiStatus.ScheduledForRemoval&lt;/code&gt;)
&lt;small&gt;New in 2018.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnstableApiUsage" displayName="Unstable API Usage" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unstable API (elements annotated with one of annotations from list) usages.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Performance">
    <inspection shortName="SetReplaceableByEnumSet" displayName="Set replaceable with EnumSet" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any instantiations of &lt;b&gt;java.util.Set&lt;/b&gt; objects
whose content types are enumerated classes. Such &lt;b&gt;java.util.Set&lt;/b&gt; objects
can be replaced by &lt;b&gt;java.util.EnumSet&lt;/b&gt; objects.
&lt;b&gt;java.util.EnumSet&lt;/b&gt; implementations can be much more efficient
that those of other sets, as the underlying data structure is a simple bitmap.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringEqualsEmptyString" displayName="&apos;String.equals(&quot;&quot;)&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports cases when &lt;b&gt;.equals()&lt;/b&gt; is called to compare a String with an empty string. In this case, using &lt;b&gt;.isEmpty()&lt;/b&gt; is better as
it shows you exactly what you&apos;re checking.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;b&gt;&quot;&quot;.equals(str)&lt;/b&gt; returns false when &lt;b&gt;str&lt;/b&gt; is null. For safety, this inspection&apos;s quick fix inserts an explicit null-check when 
  the &lt;b&gt;equals()&lt;/b&gt; argument is nullable. Use the checkbox below to suppress the warning in this case.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LengthOneStringInIndexOf" displayName="Single character string argument in &apos;String.indexOf()&apos; call" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports String literals of length one being used
as a parameter in &lt;b&gt;String.indexOf()&lt;/b&gt; or
&lt;b&gt;String.lastIndexOf()&lt;/b&gt; calls.
These String literals may be replaced by equivalent character literals, gaining some performance enhancement.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassInitializerMayBeStatic" displayName="Class initializer may be &apos;static&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any class initializers which may safely be made &lt;b&gt;static&lt;/b&gt;.
A class initializer may be static if it does not reference any of its class&apos; non static methods
and non static fields.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ToArrayCallWithZeroLengthArrayArgument" displayName="&apos;Collection.toArray()&apos; call style" enabled="false">&lt;html&gt;
&lt;body&gt;
There are two styles to convert a collection to an array: either using a pre-sized array
(like &lt;b&gt;c.toArray(new String[c.size()])&lt;/b&gt;) or using an empty array (like
&lt;b&gt;c.toArray(new String[0])&lt;/b&gt;.
&lt;p&gt;
  In older Java versions using pre-sized array was recommended, as the reflection
  call which is necessary to create an array of proper size was quite slow.
  However since late updates of OpenJDK 6 this call was intrinsified, making
  the performance of the empty array version the same and sometimes even better, compared
  to the pre-sized version. Also passing pre-sized array is dangerous for a concurrent or
  synchronized collection as a data race is possible between the &lt;b&gt;size&lt;/b&gt; and &lt;b&gt;toArray&lt;/b&gt;
  call which may result in extra nulls at the end of the array, if the collection was concurrently
  shrunk during the operation.
&lt;/p&gt;
&lt;p&gt;
  This inspection allows to follow the uniform style: either using an empty array
  (which is recommended in modern Java)
  or using a pre-sized array (which might be faster in older Java versions or non-HotSpot based JVMs).
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstantiatingObjectToGetClassObject" displayName="Instantiating object to get Class object" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any cases where new objects are instantiated for the purpose
of accessing its class object. It is more performant to access the class object
directly by name.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RandomDoubleForRandomInteger" displayName="Using &apos;Random.nextDouble()&apos; to get random integer" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports calls to
&lt;b&gt;java.util.Random.nextDouble()&lt;/b&gt;, which are used to create a positive integer number, by multiplying
the call with a factor and casting to an integer. For generating a random positive integer in a range,
&lt;b&gt;java.util.Random.nextInt(int)&lt;/b&gt; is simpler and more efficient.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DynamicRegexReplaceableByCompiledPattern" displayName="Dynamic regular expression could be replaced by compiled Pattern" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to the regular expression methods of
&lt;b&gt;java.lang.String&lt;/b&gt; using constants arguments.
Such calls may be profitably replaced with a
&lt;b&gt;private static final Pattern&lt;/b&gt; field so
that the regular expression does not have to be compiled each time it is used.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EqualsHashCodeCalledOnUrl" displayName="&apos;equals()&apos; or &apos;hashCode()&apos; called on &apos;java.net.URL&apos; object" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;.equals()&lt;/b&gt; or
&lt;b&gt;.hashCode()&lt;/b&gt; being called
on &lt;b&gt;java.net.URL&lt;/b&gt; objects. This can cause performance
problems because those methods uses a DNS lookup
to determine the equality of two &lt;b&gt;java.net.URL&lt;/b&gt; objects.
Depending on the availability of the network and the speed of the DNS server, this can cause
significant delays.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ObjectInstantiationInEqualsHashCode" displayName="Object instantiation inside &apos;equals()&apos; or &apos;hashCode()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports construction of (temporary) new objects inside an &lt;b&gt;equals()&lt;/b&gt;, &lt;b&gt;hashCode()&lt;/b&gt;, &lt;b&gt;compareTo&lt;/b&gt; or
&lt;b&gt;Comparator.compare()&lt;/b&gt; method.
Besides constructor invocations, new objects can also be created by autoboxing or iterator creation inside a foreach statement.
This can cause performance problems for example when objects are added to a &lt;b&gt;Set&lt;/b&gt; or &lt;b&gt;Map&lt;/b&gt;,
where these methods will be called often.
This inspection will not warn when the objects are created in a &lt;b&gt;throw&lt;/b&gt; or &lt;b&gt;assert&lt;/b&gt; statement.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2016.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ObjectEqualsCanBeEquality" displayName="&apos;equals()&apos; call can be replaced with &apos;==&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;equals()&lt;/b&gt; which can be replaced by &lt;b&gt;==&lt;/b&gt; or &lt;b&gt;!=&lt;/b&gt; expressions without a change in semantics.
These calls can be replaced when they are used to compare &lt;b&gt;final&lt;/b&gt; classes which don&apos;t have their own &lt;b&gt;equals()&lt;/b&gt; implementation,
but use the default &lt;b&gt;Object.equals()&lt;/b&gt;.
This may result in better performance.
There is a separate inspection for &lt;b&gt;equals()&lt;/b&gt; calls on Enums.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExplicitArgumentCanBeLambda" displayName="Explicit argument can be lambda" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports cases where method call accepts a non-trivial expression, and there&apos;s an equivalent method,
which accepts lambda instead. Converting an expression to lambda ensures that expression will not be evaluated
if it happens to be unused inside the method. E.g. &lt;b&gt;optional.orElse(createDefaultValue())&lt;/b&gt; could be converted
to &lt;b&gt;optional.orElseGet(this::createDefaultValue)&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ManualArrayCopy" displayName="Manual array copy" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports the manual copying of array contents which may be replaced by
calls to &lt;b&gt;System.arraycopy()&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ListRemoveInLoop" displayName="&apos;List.remove()&apos; called in loop" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;List.remove(index)&lt;/b&gt; called in a loop, which can be replaced with &lt;b&gt;List.subList().clear()&lt;/b&gt;. The replacement
is more efficient for most List implementations, when many elements are deleted.
&lt;p&gt;
  The quick-fix adds a range-check automatically to prevent a possible &lt;b&gt;IndexOutOfBoundsException&lt;/b&gt; when the minimal value is bigger
  than the maximal value. It can be removed if such a situation is impossible in your code.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringConcatenationInsideStringBufferAppend" displayName="String concatenation as argument to &apos;StringBuilder.append()&apos; call" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports String concatenation used as
the argument to &lt;b&gt;StringBuffer.append()&lt;/b&gt;,
&lt;b&gt;StringBuilder.append()&lt;/b&gt; or
&lt;b&gt;Appendable.append()&lt;/b&gt;. Such calls
may profitably be turned into chained append calls on the existing
&lt;b&gt;StringBuffer/Builder/Appendable&lt;/b&gt;, saving the
cost of an extra &lt;b&gt;StringBuffer/Builder&lt;/b&gt;
allocation.
&lt;p&gt;
This inspection ignores compile time evaluated String
concatenations, which when converted to chained append calls would only
worsen performance.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldMayBeStatic" displayName="Field may be &apos;static&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any instance variables which may safely be made &lt;b&gt;static&lt;/b&gt;. A field
may be static if it is declared &lt;b&gt;final&lt;/b&gt;, and is initialized with a constant.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringBufferMustHaveInitialCapacity" displayName="StringBuilder without initial capacity" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any attempt to instantiate a new &lt;b&gt;StringBuffer&lt;/b&gt; or
&lt;b&gt;StringBuilder&lt;/b&gt; object without specifying its initial capacity.
If no initial capacity is specified, a default capacity is used, which will rarely be optimal. Failing
to specify initial capacities for &lt;b&gt;StringBuffer&lt;/b&gt;s may result in performance issues, if space needs to be reallocated and
memory copied when capacity is exceeded
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringReplaceableByStringBuffer" displayName="Non-constant String should be StringBuilder" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any variables declared as &lt;b&gt;java.lang.String&lt;/b&gt; which are
repeatedly appended to. Such variables may be more efficiently declared as &lt;b&gt;java.lang.StringBuffer&lt;/b&gt;
or &lt;b&gt;java.lang.StringBuilder&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to specify that this inspection should only warn when the variable is appended
to in a loop.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CallToSimpleSetterInClass" displayName="Call to simple setter from within class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to a simple property setter from within the property&apos;s class.
A simple property setter is defined as one which simply assigns the value of its parameter to a field,
and does no other calculation. Such simple setter calls may be safely inlined.
Some coding standards also suggest against the use of simple setters for code clarity
reasons.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first option below to only report on setter calls on &lt;b&gt;this&lt;/b&gt;, not on objects of the same type passed in as a parameter. Use
the second option below to only report when the setter is &lt;b&gt;private&lt;/b&gt;.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringBufferToStringInConcatenation" displayName="&apos;StringBuilder.toString()&apos; in concatenation" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;StringBuffer.toString()&lt;/b&gt; or &lt;b&gt;StringBuilder.toString()&lt;/b&gt; calls in String concatenations.
Such calls are unnecessary when concatenating and can be removed, saving a method call and an object allocation which may improve performance.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TrivialStringConcatenation" displayName="Concatenation with empty string" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports string concatenations where one of the arguments is the
empty string. Such a concatenation is unnecessary and inefficient, particularly when used as
an idiom for formatting non-String objects or primitives into Strings.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ObjectAllocationInLoop" displayName="Object allocation in loop" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports object or array allocation inside loops. While not
necessarily a problem, object allocation inside loop is a great place to look for memory leaks
and performance issues.
&lt;p&gt;
  The inspection reports the following constructs:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Explicit allocations via &lt;b&gt;new&lt;/b&gt; operator&lt;/li&gt;
  &lt;li&gt;Methods known to return new object&lt;/li&gt;
  &lt;li&gt;Instance-bound method references&lt;/li&gt;
  &lt;li&gt;Lambdas that capture variables or &lt;b&gt;this&lt;/b&gt; reference&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MapReplaceableByEnumMap" displayName="Map replaceable with EnumMap" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any instantiations of &lt;b&gt;java.util.Map&lt;/b&gt; objects
whose key types are enumerated classes. Such &lt;b&gt;java.util.Map&lt;/b&gt; objects
can be replaced by &lt;b&gt;java.util.EnumMap&lt;/b&gt; objects.
&lt;b&gt;java.util.EnumMap&lt;/b&gt; implementations can be much more efficient
that those of other sets, as the underlying data structure is a simple array.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryTemporaryOnConversionToString" displayName="Unnecessary temporary object in conversion to String" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports unnecessary creation of temporary objects when converting
from primitive types to Strings.
&lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;
    new Integer(3).toString()
&lt;/pre&gt;&lt;/code&gt;
will be reported, and can be automatically converted to:
&lt;code&gt;&lt;pre&gt;
    Integer.toString(3)
&lt;/pre&gt;&lt;/code&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CollectionContainsUrl" displayName="Map or Set may contain &apos;java.net.URL&apos; objects" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports objects which are a subtype of
&lt;b&gt;java.util.Set&lt;/b&gt; or &lt;b&gt;java.util.Map&lt;/b&gt;
and which may contain &lt;b&gt;java.net.URL&lt;/b&gt; objects. Adding &lt;b&gt;java.net.URL&lt;/b&gt;
objects to such collections can cause performance problems because of calls to the
&lt;b&gt;equals()&lt;/b&gt; and &lt;b&gt;hashCode()&lt;/b&gt;
methods of &lt;b&gt;java.net.URL&lt;/b&gt;.
&lt;b&gt;java.net.URL&lt;/b&gt;&apos;s &lt;b&gt;equals()&lt;/b&gt; and &lt;b&gt;hashCode()&lt;/b&gt; method use a DNS
lookup, which depending on the availability of the network and the speed of the DNS server
can cause significant delays.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodMayBeStatic" displayName="Method may be &apos;static&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any methods which may safely be made &lt;b&gt;static&lt;/b&gt;.
A method may be &lt;b&gt;static&lt;/b&gt; if it is not &lt;b&gt;synchronized&lt;/b&gt;, it does not reference any of its class&apos; non static methods
and non static fields and is not overridden in a sub class.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to inspect only &lt;b&gt;private&lt;/b&gt;
or &lt;b&gt;final&lt;/b&gt; methods, which increases the
performance of this inspection.
&lt;p&gt;
Use the second checkbox to ignore empty methods.
&lt;p&gt;
Use the third checkbox to ignore default methods in interface when using Java 8 or higher
&lt;p&gt;
Use the fourth checkbox to let the quick fix replace instance qualifiers with class references
in calls to methods which are made &lt;b&gt;static&lt;/b&gt;.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CallToSimpleGetterInClass" displayName="Call to simple getter from within class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to a simple property getter from within the property&apos;s class.
A simple property getter is defined as one which simply returns the value of a field,
and does no other calculation. Such simple getter calls may be safely inlined.
Some coding standards also suggest against the use of simple getters for code clarity
reasons.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first option below to only report on getter calls on &lt;b&gt;this&lt;/b&gt;, not on objects of the same type passed in as a parameter. Use
the second option below to only report when the getter is &lt;b&gt;private&lt;/b&gt;.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TailRecursion" displayName="Tail recursion" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports tail recursion, that is when a method calls itself
as its last action before returning. Tail recursion can always be replaced by looping, which will be considerably faster.
Some JVMs perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different
performance characteristics on different virtual machines.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryTemporaryOnConversionFromString" displayName="Unnecessary temporary object in conversion from String" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports unnecessary creation of temporary objects when converting
from Strings to primitive types.
&lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;
    new Integer(&quot;3&quot;).intValue()
&lt;/pre&gt;&lt;/code&gt;
will be reported, and can be automatically converted to:
&lt;code&gt;&lt;pre&gt;
    Integer.valueOf(&quot;3&quot;)
&lt;/pre&gt;&lt;/code&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseBulkOperation" displayName="Bulk operation can be used instead of iteration" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection warns when calling some method in a loop (e.g. &lt;code&gt;collection.add(x)&lt;/code&gt;) could be replaced when calling a bulk method
(e.g. &lt;code&gt;collection.addAll(listOfX)&lt;/code&gt;.
&lt;p&gt;
  If checkbox &quot;Use Arrays.asList() to wrap arrays&quot; is checked, the inspection will warn even if the original code iterates over
  an array while bulk method requires a &lt;code&gt;Collection&lt;/code&gt;. In this case the quick-fix action will automatically
  wrap an array with &lt;code&gt;Arrays.asList()&lt;/code&gt; call.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReplaceInefficientStreamCount" displayName="Inefficient Stream API call chains ending with count()" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports stream API call chains ending with count() operation which
could be optimized.
&lt;p&gt;
  The following call chains are replaced by this inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Collection.stream().count()&lt;/code&gt; &amp;rarr; &lt;code&gt;Collection.size()&lt;/code&gt;. In Java 8 Collection.stream().count()
    actually iterates over collection elements to count them while Collection.size() is much faster for most of collections.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Stream.flatMap(Collection::stream).count()&lt;/code&gt; &amp;rarr; &lt;code&gt;Stream.mapToLong(Collection::size).sum()&lt;/code&gt;. Similarly
    there&apos;s no need to iterate all the nested collections. Instead, their sizes could be summed up.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;collection.stream().filter(o -&gt; ...).count() &gt; 0&lt;/code&gt; &amp;rarr; &lt;code&gt;collection.stream().anyMatch(o -&gt; ...)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;collection.stream().filter(o -&gt; ...).count() == 0&lt;/code&gt; &amp;rarr; &lt;code&gt;collection.stream().noneMatch(o -&gt; ...)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;small&gt;New in 2016.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LengthOneStringsInConcatenation" displayName="Single character string concatenation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports String literals of length one being used in concatenation.
These literals may be replaced by equivalent character literals, gaining some performance enhancement.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantStringFormatCall" displayName="Redundant call to &apos;String.format()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;String.format()&lt;/b&gt; or &lt;b&gt;PrintStream.printf()&lt;/b&gt; where only a format string is
provided, but no arguments. Such a call is unnecessary and can be replaced with just
the string or a call to &lt;b&gt;PrintStream.print()&lt;/b&gt; respectively.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BoxingBoxedValue" displayName="Boxing of already boxed value" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports boxing of already boxed values. This is a redundant
operation since any boxed value will first be auto-unboxed before boxing the
value again. If done inside an inner loop such code may cause performance
problems.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringConcatenationInLoops" displayName="String concatenation in loop" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports String concatenation in loops. As every String concatenation copies the whole String, usually it is preferable to replace
it with explicit calls to &lt;b&gt;StringBuilder.append()&lt;/b&gt; or &lt;b&gt;StringBuffer.append()&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Sometimes quick-fix actions are available which allow you to convert &lt;code&gt;String&lt;/code&gt; variable to &lt;code&gt;StringBuilder&lt;/code&gt; or
  introduce a new &lt;code&gt;StringBuilder&lt;/code&gt;. Be careful if the original code handles &lt;code&gt;null&lt;/code&gt; value specially: the replacement
  might not be semantically correct after that. If &lt;code&gt;null&lt;/code&gt; value is possible, null-safe fixes are suggested which generate
  necessary null-checks. Also it&apos;s not guaranteed that the automatic replacement will always be more performant.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="KeySetIterationMayUseEntrySet" displayName="Iteration over &apos;keySet()&apos; may be optimized" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports iteration over the &lt;b&gt;keySet()&lt;/b&gt; of a &lt;b&gt;java.util.Map&lt;/b&gt; instance,
where the iterated keys are used to retrieve the values from the map. Such
iteration may be more efficiently replaced by iteration over the
&lt;b&gt;entrySet()&lt;/b&gt; or &lt;b&gt;values()&lt;/b&gt; (if key is not actually used). 
Similarly &lt;b&gt;keySet().forEach(key -&gt; ...)&lt;/b&gt;
can be replaced with &lt;b&gt;forEach((key, value) -&gt; ...)&lt;/b&gt; if values are retrieved
inside lambda.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ManualArrayToCollectionCopy" displayName="Manual array to collection copy" enabled="false">&lt;html&gt;
&lt;body&gt;Reports the copying of array contents to a collection where each element
is added individually using a for loop. Such constructs may be replaced by a call to
&lt;b&gt;Collection.addAll(Arrays.asList())&lt;/b&gt; or &lt;b&gt;Collections.addAll()&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ArraysAsListWithZeroOrOneArgument" displayName="Call to &apos;Arrays.asList()&apos; with too few arguments" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;Arrays.asList()&lt;/b&gt; with zero arguments or only one argument. Such calls could be replaced
with either a call to &lt;b&gt;Collections.singletonList()&lt;/b&gt; or &lt;b&gt;Collections.emptyList()&lt;/b&gt; which will save some memory.
&lt;p&gt;Note: the list returned by &lt;b&gt;Collections.singletonList()&lt;/b&gt; is immutable, while the list returned &lt;b&gt;Arrays.asList()&lt;/b&gt; allows
calling the &lt;b&gt;set()&lt;/b&gt; method. This may break the code in rare cases.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CollectionsMustHaveInitialCapacity" displayName="Collection without initial capacity" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any attempt to instantiate a new &lt;b&gt;Collection&lt;/b&gt; object without specifying
an initial capacity. If no initial capacity is specified, a default capacity is used, which will rarely be optimal. Failing
to specify initial capacities for collections may result in performance issues, if space needs to be reallocated and
memory copied when capacity is exceeded. This inspection checks allocations of the classes which are listed in inspection settings.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BooleanConstructor" displayName="Boolean constructor call" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any attempt to instantiate a new &lt;b&gt;Boolean&lt;/b&gt;
object. Constructing new &lt;b&gt;Boolean&lt;/b&gt; objects is rarely necessary,
and may cause performance problems if done often enough.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CollectionAddAllCanBeReplacedWithConstructor" displayName="Redundant &apos;Collection.addAll()&apos; call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;Collection.addAll()&lt;/b&gt; and &lt;b&gt;Map.putAll()&lt;/b&gt; calls after instantiation of a collection using a constructor call without arguments.
Such constructs can be replaced with a single call to a parametrized constructor which simplifies code. Also for some collections the replacement
might be more performant.
For example:
&lt;pre&gt;&lt;code&gt;
  Set&amp;lt;String&amp;gt; set = new HashSet&amp;lt;&amp;gt;();
  set.addAll(Arrays.asList(&quot;alpha&quot;, &quot;beta&quot;, &quot;gamma&quot;));
&lt;/code&gt;&lt;/pre&gt;
can be replaced with:
&lt;pre&gt;&lt;code&gt;
  Set&amp;lt;String&amp;gt; set = new HashSet&amp;lt;&amp;gt;(Arrays.asList(&quot;alpha&quot;, &quot;beta&quot;, &quot;gamma&quot;));
&lt;/code&gt;&lt;/pre&gt;
Standard JDK collection classes are supported by default. Additionally you may specify other classes in the settings.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IfStatementMissingBreakInLoop" displayName="Loop can be terminated after condition is met" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports cases in which a loop contains the &lt;b&gt;if&lt;/b&gt; statement that can end with &lt;b&gt;break&lt;/b&gt;.
&lt;p&gt;
  For instance, consider the following code:
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;boolean&lt;/b&gt; found = &lt;b&gt;false&lt;/b&gt;;
  &lt;b&gt;for&lt;/b&gt; (&lt;b&gt;int&lt;/b&gt; i = 0; i &amp;lt; arr.length; i++) {
    &lt;b&gt;if&lt;/b&gt; (Objects.equals(value, arr[i])) {
      found = &lt;b&gt;true&lt;/b&gt;;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
In this case, iterations have no effect after the condition is met, and you can skip them by adding a &lt;b&gt;break&lt;/b&gt;.
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;boolean&lt;/b&gt; found = &lt;b&gt;false&lt;/b&gt;;
  &lt;b&gt;for&lt;/b&gt; (&lt;b&gt;int&lt;/b&gt; i = 0; i &amp;lt; arr.length; i++) {
    &lt;b&gt;if&lt;/b&gt; (Objects.equals(value, arr[i])) {
      found = &lt;b&gt;true&lt;/b&gt;;
      &lt;b&gt;break&lt;/b&gt;;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;small&gt;New in 2019.2&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="JavaFX">
    <inspection shortName="JavaFxColorRgb" displayName="Color component is out of range" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports RGB color components which are out of valid range.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavaFxRedundantPropertyValue" displayName="JavaFX redundant property values" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports properties in .fxml files (both attributes and tags) having default values and therefore redundant.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavaFxUnusedImports" displayName="JavaFX unused imports" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unused imports in .fxml files.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavaFxResourcePropertyValue" displayName="The value from properties file is incompatible with the attribute type" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports attribute values defined in properties file that don&apos;t match the type of the attribute.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JavaFxEventHandler" displayName="Event handler method signature problems" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports event handler issues, including incompatible argument type, ambiguous event handler method, and incorrect return type.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JavaFxDefaultTag" displayName="Unnecessary default tag" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports usages of tags in .fxml which could be ommitted as these tags correspond to a class property which is declared in @DefaultProperty class annotation.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavaFxUnresolvedFxIdReference" displayName="Unresolved fx:id attribute reference" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved fx:id references. Quickfix to create corresponding field is provided.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Encapsulation">
    <inspection shortName="PackageVisibleField" displayName="Package-visible field" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports package-visible instance variables.
Constants (i.e. variables marked &lt;b&gt;static&lt;/b&gt; and &lt;b&gt;final&lt;/b&gt;) are not reported.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ProtectedField" displayName="Protected field" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;protected&lt;/b&gt; instance variables.
Constants (i.e. variables marked &lt;b&gt;static&lt;/b&gt; and &lt;b&gt;final&lt;/b&gt;) are not reported.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicField" displayName="&apos;public&apos; field" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;public&lt;/b&gt; fields.
Constants (i.e. variables marked &lt;b&gt;static&lt;/b&gt; and &lt;b&gt;final&lt;/b&gt;) are not reported.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the list below to specify special annotations. Fields annotated with one of these annotations will be ignored by this inspection.
&lt;p&gt;
Use the checkbox below to ignore &lt;b&gt;public&lt;/b&gt; &lt;b&gt;final&lt;/b&gt; fields of an &lt;b&gt;enum&lt;/b&gt; type.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssignmentOrReturnOfFieldWithMutableType" displayName="Assignment or return of field with mutable type" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any attempt to return or assign an array, &lt;b&gt;Collection&lt;/b&gt;, &lt;b&gt;java.lang.Date&lt;/b&gt; or
&lt;b&gt;java.lang.Calendar&lt;/b&gt; field from a method parameter.
Since arrays, &lt;b&gt;Collection&lt;/b&gt;, &lt;b&gt;Date&lt;/b&gt; and &lt;b&gt;Calendar&lt;/b&gt; are mutable, this construct may
result in an object having its state modified unexpectedly from outside the owning class.
While occasionally useful for performance reasons, this construct is inherently bug prone.

&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the checkbox below to ignore assignments and returns in &lt;b&gt;private&lt;/b&gt; methods.

&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PackageVisibleInnerClass" displayName="Package-visible nested class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports package-private nested classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to ignore package-private inner enums.
&lt;p&gt;
Use the seconds checkbox below to ignore package-private inner interface.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicInnerClass" displayName="&apos;public&apos; nested class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;public&lt;/b&gt; nested classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to ignore &lt;b&gt;public&lt;/b&gt; inner enums.
&lt;p&gt;
Use the seconds checkbox below to ignore &lt;b&gt;public&lt;/b&gt; inner interface.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseOfAnotherObjectsPrivateField" displayName="Accessing a non-public field of another object" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any uses of another object&apos;s private or protected fields. Java
allows the use of such fields for objects of the same class as the current objects, but
some coding styles discourage this use. Additionally, such direct access to private fields
may fail in component-oriented architectures such (e.g. Spring, Hibernate) which expect all access
to other objects to be through method calls so as to allow the framework to mediate all access
using proxies.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to ignore accesses from the same class and only report accesses
from inner or outer classes.
  To ignore accesses from inner classes also, use the nested checkbox.
&lt;p&gt;
Use the second checkbox below to ignore accesses from an &lt;b&gt;equals()&lt;/b&gt; method.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ProtectedInnerClass" displayName="Protected nested class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;protected&lt;/b&gt; nested classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to ignore &lt;b&gt;protected&lt;/b&gt; inner enums.
&lt;p&gt;
Use the seconds checkbox below to ignore &lt;b&gt;protected&lt;/b&gt; inner interface.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Android Lint: Accessibility">
    <inspection shortName="AndroidLintClickableViewAccessibility" displayName="Accessibility in Custom Views" enabled="false">&lt;html&gt;&lt;body&gt;Accessibility in Custom Views&lt;br&gt;&lt;br&gt;If a &lt;code&gt;View&lt;/code&gt; that overrides &lt;code&gt;onTouchEvent&lt;/code&gt; or uses an &lt;code&gt;OnTouchListener&lt;/code&gt; does not also implement &lt;code&gt;performClick&lt;/code&gt; and call it when clicks are detected, the &lt;code&gt;View&lt;/code&gt; may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in &lt;code&gt;View#performClick&lt;/code&gt; as some accessibility services invoke &lt;code&gt;performClick&lt;/code&gt; when a click action should occur.&lt;br&gt;&lt;br&gt;Issue id: ClickableViewAccessibility&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintLabelFor" displayName="Missing labelFor attribute" enabled="false">&lt;html&gt;&lt;body&gt;Missing accessibility label&lt;br&gt;&lt;br&gt;Editable text fields should provide an &lt;code&gt;android:hint&lt;/code&gt; or, provided your &lt;code&gt;minSdkVersion&lt;/code&gt; is at least 17, they may be referenced by a view with a &lt;code&gt;android:labelFor&lt;/code&gt; attribute.&lt;br/&gt;
&lt;br/&gt;
When using &lt;code&gt;android:labelFor&lt;/code&gt;, be sure to provide an &lt;code&gt;android:text&lt;/code&gt; or an &lt;code&gt;android:contentDescription&lt;/code&gt;.&lt;br/&gt;
&lt;br/&gt;
If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint.&lt;br&gt;&lt;br&gt;Issue id: LabelFor&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintKeyboardInaccessibleWidget" displayName="Keyboard inaccessible widget" enabled="false">&lt;html&gt;&lt;body&gt;Keyboard inaccessible widget&lt;br&gt;&lt;br&gt;A widget that is declared to be clickable but not declared to be focusable is not accessible via the keyboard. Please add the &lt;code&gt;focusable&lt;/code&gt; attribute as well.&lt;br&gt;&lt;br&gt;Issue id: KeyboardInaccessibleWidget&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGetContentDescriptionOverride" displayName="Overriding getContentDescription() on a View" enabled="false">&lt;html&gt;&lt;body&gt;Overriding &lt;code&gt;getContentDescription()&lt;/code&gt; on a View&lt;br&gt;&lt;br&gt;Overriding &lt;code&gt;getContentDescription()&lt;/code&gt; may prevent some accessibility services from properly navigating content exposed by your view. Instead, call &lt;code&gt;setContentDescription()&lt;/code&gt; when the content description needs to be changed.&lt;br&gt;&lt;br&gt;Issue id: GetContentDescriptionOverride&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintContentDescription" displayName="Image without contentDescription" enabled="false">&lt;html&gt;&lt;body&gt;Image without &lt;code&gt;contentDescription&lt;/code&gt;&lt;br&gt;&lt;br&gt;Non-textual widgets like ImageViews and ImageButtons should use the &lt;code&gt;contentDescription&lt;/code&gt; attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&lt;br/&gt;
&lt;br/&gt;
Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&lt;br/&gt;
&lt;br/&gt;
Note that for text fields, you should not set both the &lt;code&gt;hint&lt;/code&gt; and the &lt;code&gt;contentDescription&lt;/code&gt; attributes since the hint will never be shown. Just set the &lt;code&gt;hint&lt;/code&gt;. See &lt;a href=&quot;http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases&quot;&gt;http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Issue id: ContentDescription&lt;/body&gt;&lt;/html&gt;</inspection>
  </group>
  <group name="Class metrics">
    <inspection shortName="ClassComplexity" displayName="Overly complex class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes with too high of a total complexity. The
total complexity of a &lt;b&gt;class&lt;/b&gt; is the sum of the cyclomatic complexities of all the methods
and initializers the &lt;b&gt;class&lt;/b&gt; declares. Inherited methods and initializers are not counted
toward the total complexity.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum complexity a class is allowed to have.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstructorCount" displayName="Class with too many constructors" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports class with too many constructors. Classes with
too many constructors are prone to initialization errors, and may often be better modeled as
multiple subclasses.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of constructors a class is allowed to have.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AnonymousClassComplexity" displayName="Overly complex anonymous class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports anonymous inner classes with too high of a total complexity. The
total complexity of a class is the sum of the cyclomatic complexities of all the methods
and initializers the class declares. Inherited methods and initializers are not counted
toward the total complexity. Anonymous classes with more than very low complexities may be
difficult to understand, and should probably be promoted to become named inner classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum complexity a class is allowed to have.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassCoupling" displayName="Overly coupled class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports classes which are highly coupled, i.e. that reference too many other classes.
Classes with too high a coupling can be very fragile, and should probably be broken up. References to system classes
(those in the &lt;b&gt;java.&lt;/b&gt;or &lt;b&gt;javax.&lt;/b&gt; packages), are not counted.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum coupling a class is allowed to have.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldCount" displayName="Class with too many fields" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports classes with too many fields. Classes with
a large number of fields are often trying to &apos;do too much&apos;, and may need to be
refactored into multiple smaller classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of fields a class is allowed to have.
&lt;p&gt;
Use the first checkbox below to indicate whether constant fields count toward this number.
&lt;p&gt;Per default this inspection only counts immutable &lt;b&gt;static final&lt;/b&gt; objects as constant. Use the second checkbox below to
count any &lt;b&gt;static final&lt;/b&gt; field as constant.
&lt;p&gt;
Use the third checkbox below to indicate if enum constants in an enum class should count.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodCount" displayName="Class with too many methods" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any classes with too many methods. Classes with
a large number of methods are often trying to &apos;do too much&apos;, and may need to be
refactored into multiple smaller classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of methods a class is allowed to have.
&lt;p&gt;
Use the first checkbox below to ignore simple getters and setters in the method count.
&lt;p&gt;
Use the second checkbox below to ignore methods overriding or implementing a method from a superclass
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassInheritanceDepth" displayName="Class too deep in inheritance tree" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports class too deep in the inheritance hierarchy. Classes too deeply inherited
may be confusing, and are a good sign that refactoring may be necessary. This inspection counts all superclasses
from a library as a single superclass (libraries are considered unmodifiable).
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum inheritance depth a class is allowed to have.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AnonymousClassMethodCount" displayName="Anonymous inner class with too many methods" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports anonymous inner &lt;b&gt;class&lt;/b&gt; with too many methods.
Anonymous classes with more than a very low number of methods may be
difficult to understand, and should probably be promoted to become named inner classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of methods an anonymous inner &lt;b&gt;class&lt;/b&gt; is allowed to have.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassNestingDepth" displayName="Inner class too deeply nested" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports inner classes too deeply nested. Nesting inner classes inside
inner classes is almost certain to be confusing, and is a good sign that refactoring may be necessary.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum nesting depth a class is allowed have.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Finalization">
    <inspection shortName="Finalize" displayName="&apos;finalize()&apos; declaration" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any implementations of
a &lt;b&gt;finalize()&lt;/b&gt; method. For performance reasons or due to inability
to guarantee that &lt;b&gt;finalize()&lt;/b&gt; will ever be called,
some coding standards prohibit its use.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore &lt;b&gt;finalize()&lt;/b&gt; implementations with an empty
method body or a body containing only if statements which have a condition which
evaluates to false at compile time. For performance reasons it can be beneficial to
override a non-trivial &lt;b&gt;finalize()&lt;/b&gt; with an empty
implementation in a subclass. An empty final &lt;b&gt;finalize()&lt;/b&gt;
implementation can also be used to prevent subclasses from overriding.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FinalizeNotProtected" displayName="&apos;finalize()&apos; not declared &apos;protected&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any implementations of the &lt;b&gt;Object.finalize()&lt;/b&gt; method
which are not declared &lt;b&gt;protected&lt;/b&gt;. &lt;b&gt;finalize()&lt;/b&gt; should be declare &lt;b&gt;protected&lt;/b&gt;,
to prevent it from being explicitly invoked by other classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NoExplicitFinalizeCalls" displayName="&apos;finalize()&apos; called explicitly" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any call of &lt;b&gt;Object.finalize()&lt;/b&gt;. Calling
&lt;b&gt;Object.finalize()&lt;/b&gt; explicitly is a very bad idea, as it can result in objects being placed in an
inconsistent state. Calls to &lt;b&gt;super.finalize()&lt;/b&gt; from within implementations of &lt;b&gt;finalize()&lt;/b&gt;
are benign, and are not reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Imports">
    <inspection shortName="StaticImport" displayName="Static import" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;import static&lt;/b&gt; statements.
Such &lt;b&gt;import&lt;/b&gt; statements are not supported under Java 1.4 or earlier JVMs.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify classes which when used in a &lt;b&gt;import static&lt;/b&gt; statement, the statement will not be reported.
&lt;p&gt;
Use the first checkbox below to ignore single field &lt;b&gt;import static&lt;/b&gt; statements.
&lt;p&gt;
Use the second checkbox below to ignore single method &lt;b&gt;import static&lt;/b&gt; statements.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UNUSED_IMPORT" displayName="Unused import" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports redundant import statements.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OnDemandImport" displayName="&apos;*&apos; import" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;import&lt;/b&gt; statements which cover entire packages (&apos;* imports&apos;).
Some coding standards prohibit such import statements. Since IDEA can automatically
detect and fix such statements with its &quot;Optimize Imports&quot; command, this inspection is mostly useful
for off-line reporting on code bases that you don&apos;t intend to change.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SamePackageImport" displayName="Import from same package" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;import&lt;/b&gt; statements which refer to the same package as the
containing file. Such imports are unnecessary, and probably the result of incomplete
refactorings. Since IDEA can automatically detect and fix such statements with its
&quot;Optimize Imports&quot; command, this inspection is mostly useful for off-line reporting on
code bases that you don&apos;t intend to change.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SingleClassImport" displayName="Single class import" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;import&lt;/b&gt; statements which cover single classes (as opposed to entire packages).
Some coding standards prohibit such &lt;b&gt;import&lt;/b&gt; statements. Since IDEA can automatically
detect and fix such statements with its &quot;Optimize Imports&quot; command, this inspection is mostly useful
for off-line reporting on code bases that you don&apos;t intend to change.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavaLangImport" displayName="&apos;java.lang&apos; import" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;import&lt;/b&gt; statements which refer to the &lt;b&gt;java.lang&lt;/b&gt; package.
Such import statements are unnecessary. Since IDEA can automatically
detect and fix such statements with its &quot;Optimize Imports&quot; command, this inspection is mostly useful
for off-line reporting on code bases that you don&apos;t intend to change.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Declaration redundancy">
    <inspection shortName="RedundantExplicitClose" displayName="Redundant &apos;close()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Inspection reports unnecessary close of resource in the end of try-with-resources block
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnusedReturnValue" displayName="Method can be void" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods whose return values are never used when called.
The return type of such methods can be made &lt;code&gt;void&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SillyAssignment" displayName="Variable is assigned to itself" enabled="true">&lt;html&gt;
&lt;body&gt;
Detects assignments of a variable to itself, like: &lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;a = a;&lt;/font&gt;&lt;/b&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantLambdaParameterType" displayName="Redundant lambda parameter types" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports lambda formal parameter types which are redundant, because they can be inferred from the context.
&lt;p&gt;The quick fix removes the parameter types from the lambda.
&lt;p&gt;Example: &lt;pre&gt;&lt;code&gt;Map&amp;lt;String, Integer&amp;gt; map = ...
map.forEach((String s, Integer i) -&gt; log.info(s + &quot;=&quot; + i));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code above can be simplified to the following:
&lt;pre&gt;&lt;code&gt;Map&amp;lt;String, Integer&amp;gt; map = ...
map.forEach((s, i) -&gt; log.info(s + &quot;=&quot; + i));&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnusedLibrary" displayName="Unused library" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports libraries attached to the specified inspection scope that
are not used directly from code. &lt;br&gt; &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SameParameterValue" displayName="Actual method parameter is the same constant" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods where a value being passed to a particular parameter
appears to be always the same constant.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DefaultAnnotationParam" displayName="Default annotation parameter value" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports explicit assigning default value to an annotation parameter.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimplifyStreamApiCallChains" displayName="Stream API call chain can be simplified" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports stream API call chains which can be simplified.
It allows to avoid creating redundant temporary objects when traversing a collection.
&lt;p&gt;
  The following call chains are replaced by this inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;collection.stream().forEach()&lt;/code&gt; &amp;rarr; &lt;code&gt;collection.forEach()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;collection.stream().collect(toList/toSet/toCollection())&lt;/code&gt; &amp;rarr; &lt;code&gt;new CollectionType&amp;lt;&amp;gt;(collection)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;collection.stream().toArray()&lt;/code&gt; &amp;rarr; &lt;code&gt;collection.toArray()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Arrays.asList().stream()&lt;/code&gt; &amp;rarr; &lt;code&gt;Arrays.stream()&lt;/code&gt; or &lt;code&gt;Stream.of()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;IntStream.range(0, array.length).mapToObj(idx -&gt; array[idx])&lt;/code&gt; &amp;rarr; &lt;code&gt;Arrays.stream(array)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;IntStream.range(0, list.size()).mapToObj(idx -&gt; list.get(idx))&lt;/code&gt; &amp;rarr; &lt;code&gt;list.stream()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Collections.singleton().stream()&lt;/code&gt; &amp;rarr; &lt;code&gt;Stream.of()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Collections.emptyList().stream()&lt;/code&gt; &amp;rarr; &lt;code&gt;Stream.empty()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.filter().findFirst().isPresent()&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.anyMatch()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.collect(counting())&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.count()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.collect(maxBy())&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.max()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.collect(mapping())&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.map().collect()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.collect(reducing())&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.reduce()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.collect(summingInt())&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.mapToInt().sum()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.mapToObj(x -&gt; x)&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.boxed()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.map(x -&gt; {...; return x;})&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.peek(x -&gt; ...)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;!stream.anyMatch()&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.noneMatch()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;!stream.anyMatch(x -&gt; !(...))&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.allMatch()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.map().anyMatch(Boolean::booleanValue)&lt;/code&gt; -&gt; &lt;code&gt;stream.anyMatch()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;IntStream.range(expr1, expr2).mapToObj(x -&gt; array[x])&lt;/code&gt; -&gt; &lt;code&gt;Arrays.stream(array, expr1, expr2)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Collection.nCopies(count, ...)&lt;/code&gt; -&gt; &lt;code&gt;Stream.generate().limit(count)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.sorted(comparator).findFirst()&lt;/code&gt; -&gt; &lt;code&gt;Stream.min(comparator)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  Note that the replacements semantic may have minor difference in some cases.
  For example, &lt;code&gt;Collections.synchronizedList(...).stream().forEach()&lt;/code&gt; is not
  synchronized while &lt;code&gt;Collections.synchronizedList(...).forEach()&lt;/code&gt; is synchronized.
  Or &lt;code&gt;collect(Collectors.maxBy())&lt;/code&gt; would return an empty &lt;code&gt;Optional&lt;/code&gt; if the resulting
  element is &lt;code&gt;null&lt;/code&gt; while &lt;code&gt;Stream.max()&lt;/code&gt; will throw &lt;code&gt;NullPointerException&lt;/code&gt;
  in this case.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DuplicateThrows" displayName="Duplicate throws" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports duplicate exceptions in a method throws list.
For example:
&lt;code&gt;&lt;pre&gt;
&lt;b&gt;void&lt;/b&gt; f() &lt;b&gt;throws&lt;/b&gt; Exception, &lt;b&gt;Exception&lt;/b&gt; {
}
&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;
The inspection also warns if one exception subclasses another.
 For example:
&lt;code&gt;&lt;pre&gt;
&lt;b&gt;void&lt;/b&gt; f() &lt;b&gt;throws&lt;/b&gt; &lt;b&gt;IOException&lt;/b&gt;, Exception {
}
&lt;/pre&gt;&lt;/code&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore exceptions subclassing others.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantOperationOnEmptyContainer" displayName="Redundant operation on empty container" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports redundant operations on empty collections, maps or arrays. Iterating, removing elements, sorting, 
and some other operations on empty collections have no effect and could be removed or signal about a possible bug. 
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TrivialFunctionalExpressionUsage" displayName="Trivial usage of functional expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports method calls to methods of functional interfaces which are directly invoked on the definition of the lambda, method reference or anonymous class.
Such method calls, including the functional interface implementation, can be replaced with the body of the functional interface implementation, like
&lt;code&gt;((Runnable)() -&gt; doSmth()).run()&lt;/code&gt; can be replaced with &lt;code&gt;doSmth()&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyUnusedDeclaration" displayName="Unused declaration" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unused classes, methods and fields.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="WrapperTypeMayBePrimitive" displayName="Wrapper type may be primitive" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports local variable of wrapper type though all usages allowed to be primitive and count of unnecessary boxing/unboxing
  operations reduces
&lt;!-- tooltip end --&gt;
&lt;p&gt;In some cases boxing can be source of significant performance penalty, especially in loops.&lt;/p&gt;
&lt;p&gt;
  &lt;small&gt;New in 2018.2&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="unused" displayName="Unused declaration" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports classes, methods or fields in the specified inspection scope that
are not used or not reachable from entry points. It also reports parameters that are not used by their methods and all method
implementations/overriders and local variables that are declared but not used.
Some unused members might not be reported during in-editor highlighting. Due to performance reasons, a non-private member is checked only when its name rarely occurs in the project.
To see all results, please run the inspection using Analyze | Inspect Code... or Analyze | Run Inspection by Name...
&lt;br&gt; &lt;br&gt;
&lt;!-- tooltip end --&gt;
Use visibility settings below to configure what members should be reported, e.g. configuring report private methods only means
that public methods of private inner class would be reported though protected methods of top level class would be ignored.
&lt;br&gt;&lt;br&gt;
Use check boxes in the inspection options below, to specify what should be automatically assumed entry points. You will
also have a possibility to add entry points manually when inspection results are ready. You may also configure annotations to mark members as entry points as well
as code patterns.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SimplifyOptionalCallChains" displayName="Optional call chain can be simplified" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;This inspection warns about Optional call chains which could be simplified. Here are some examples of possible simplifications:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;optional.map(x -&gt; true).orElse(false)&lt;/code&gt; &amp;rarr; &lt;code&gt;optional.isPresent()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;optional.map(x -&gt; Optional.of(x.trim())).orElseGet(Optional::empty)&lt;/code&gt; &amp;rarr; &lt;code&gt;optional.map(String::trim)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;optional.map(x -&gt; (String)x).orElse(null)&lt;/code&gt; &amp;rarr; &lt;code&gt;(String) optional.orElse(null)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Optional.ofNullable(optional.orElse(null))&lt;/code&gt; &amp;rarr; &lt;code&gt;optional&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;val = optional.orElse(null); val != null ? val : defaultExpr &lt;/code&gt; &amp;rarr; &lt;code&gt;optional.orElse(defaultExpr)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;val = optional.orElse(null); if(val != null) expr(val) &lt;/code&gt; &amp;rarr; &lt;code&gt;optional.ifPresent(val -&gt; expr(val))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SameReturnValue" displayName="Method returns the same value" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods and method hierarchies where the return value appears to
be always the same constant.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="WeakerAccess" displayName="Declaration access can be weaker" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports all fields, methods or classes, found in the specified inspection
scope, that may have their access modifier narrowed down. &lt;br&gt; &lt;br&gt;
&lt;!-- tooltip end --&gt;
Use check boxes in the inspection options below, to define rules for the modifier change suggestions.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ObviousNullCheck" displayName="Null-check method is called with obviously non-null argument" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports if null-checking method (like &lt;code&gt;Objects.requireNonNull&lt;/code&gt; or &lt;code&gt;Assert.assertNotNull&lt;/code&gt;) is
called on the value which is obviously non-null. Such check is redundant and may indicate a programming error.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;New in 2017.2&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnusedLabel" displayName="Unused label" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports unused code labels.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AccessStaticViaInstance" displayName="Access static member via instance reference" enabled="true">&lt;html&gt;
&lt;body&gt;
Shows references to &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;static&lt;/font&gt;&lt;/b&gt; methods and fields
via class instance rather than a class itself.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryModuleDependencyInspection" displayName="Unnecessary module dependency" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection lists modules which contain redundant dependencies on other modules.
These dependencies can be safely removed.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantThrows" displayName="Redundant &apos;throws&apos; clause" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports exceptions that are declared in a method&apos;s signature but never
thrown by the method itself or its implementations/derivatives.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="FunctionalExpressionCanBeFolded" displayName="Functional expression can be folded" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports method references or lambda expressions which point to a method of their own functional interface type and hence can be replaced with their qualifiers, like
&lt;br/&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;SwingUtilities.invokeLater(r::run);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;SwingUtilities.invokeAndWait(() -&gt; r.run());&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
can be replaced with
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;SwingUtilities.invokeLater(r);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;SwingUtilities.invokeAndWait(r);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Java9RedundantRequiresStatement" displayName="Redundant &apos;requires&apos; statement in module-info" enabled="false">&lt;html&gt;
&lt;body&gt;
The inspection detects a situation where Java 9 module A requires Java 9 module B, but A doesn&apos;t use any package from B.
Also, requiring the module &apos;java.base&apos; is redundant.
&lt;p&gt;
  The fix deletes the &apos;requires&apos; directive for such redundant dependencies.
  If the deleted dependency re-exported modules that are actually used, the fix adds &apos;requires&apos; directive for these modules.
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EmptyMethod" displayName="Empty method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods where: &lt;br&gt; &lt;br&gt;
&amp;nbsp;- method is empty OR &lt;br&gt;
&amp;nbsp;- all implementations of interface method are empty OR &lt;br&gt;
&amp;nbsp;- method is empty itself and is overridden only by empty methods &lt;br&gt; &lt;br&gt;
Note that a method containing only the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;super()&lt;/font&gt;&lt;/b&gt;
call and passing its own parameter is also considered empty.
&lt;br&gt; &lt;br&gt;
This inspection is automatically suppressed for methods annotated with special annotations,
for example, EJB annotations javax.ejb.Init and javax.ejb.Remove.
&lt;!-- tooltip end --&gt;
Additional annotations can be configured below.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantStreamOptionalCall" displayName="Redundant step in Stream or Optional call chain" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports redundant Stream or Optional calls like &lt;code&gt;map(x -&gt; x)&lt;/code&gt; or &lt;code&gt;filter(x -&gt; true)&lt;/code&gt;,
redundant &lt;code&gt;sorted&lt;/code&gt; or &lt;code&gt;distinct&lt;/code&gt;.
&lt;p&gt;Note that a mapping operation in code like &lt;code&gt;streamOfIntegers.map(Integer::valueOf)&lt;/code&gt; works as &lt;code&gt;requireNonNull&lt;/code&gt;
  check:
  if stream contains a &lt;code&gt;null&lt;/code&gt;, it will throw &lt;code&gt;NullPointerException&lt;/code&gt;, thus it&apos;s not absolutely redundant. Uncheck the
  &quot;Report redundant boxing in Stream.map&quot; checkbox if you don&apos;t want such cases to be reported.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 8 or higher&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimplifyCollector" displayName="Collector can be simplified" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports collectors which could be simplified. In particular some cascaded &lt;code&gt;groupingBy&lt;/code&gt; collectors
could be expressed with simpler &lt;code&gt;toMap&lt;/code&gt; collector which also will likely be more performant.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 8 or higher &lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CanBeFinal" displayName="Declaration can have final modifier" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports all fields, methods or classes, found in the specified inspection
scope, that may have a &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;final&lt;/font&gt;&lt;/b&gt; modifier added to their declarations. &lt;br&gt; &lt;br&gt;
&lt;!-- tooltip end --&gt;
Use check boxes in the inspection options below, to define which declarations are to be reported.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Plugin DevKit">
    <inspection shortName="IncompatibleAPI" displayName="Incompatible API usage" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports usages of incompatible API.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ComponentRegistrationProblems" displayName="Component type mismatch" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection finds various problems about incorrect registration of plugin components
(Components and Actions) both in Java code as well as the plugin.xml descriptor.

&lt;p&gt;
    Those problems include
    &lt;ul&gt;
        &lt;li&gt;Unresolved component/action implementation-classes (plugin.xml)&lt;/li&gt;
        &lt;li&gt;Unresolved component interface-classes (plugin.xml)&lt;/li&gt;
        &lt;li&gt;Component implementation-class is not assignable to its interface-class (plugin.xml)&lt;/li&gt;
        &lt;li&gt;Incorrect component registration, e.g. &lt;code&gt;ProjectComponent&lt;/code&gt; is registered as Application Component
            or the class doesn&apos;t implement any component interface at all (plugin.xml / Java Code)
        &lt;/li&gt;
        &lt;li&gt;Incorrect class modifiers: Action classes must be public and must have a public
            no-argument constructor. Additionally, Action and Component implementation classes
            must not be abstract (plugin.xml / Java Code)
        &lt;/li&gt;
        &lt;li&gt;Duplicate interface-class: A class may only be used once as interface-class (plugin.xml)&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
    The inspection provides options to switch off the checks in plugin.xml and Java code. Checking
    Action classes in Java can also be toggled separately.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Probable bugs">
    <inspection shortName="InstantiationOfUtilityClass" displayName="Instantiation of utility class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;new&lt;/b&gt; expressions which instantiate utility classes.
Utility classes have all fields and methods declared &lt;b&gt;static&lt;/b&gt;, and their
presence may indicate a lack of object-oriented design. Instantiation of such classes most likely indicates
programmer error.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReplaceArrayEqualityOpWithArraysEquals" displayName="Replace &apos;==&apos; with &apos;Arrays.equals&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects usages of &lt;b&gt;==&lt;/b&gt; or &lt;b&gt;!=&lt;/b&gt; operator for arrays that should be replaced with &lt;b&gt;contentEquals&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IteratorHasNextCallsIteratorNext" displayName="&apos;Iterator.hasNext()&apos; which calls &apos;next()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any implementations of &lt;b&gt;Iterator.hasNext()&lt;/b&gt;
which call &lt;b&gt;next()&lt;/b&gt; on themselves. While this is a common
mistake, such calls are almost certainly in error, as &lt;b&gt;hasNext()&lt;/b&gt;
should not modify the iterators state, while &lt;b&gt;next()&lt;/b&gt; should.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EmptyRange" displayName="Range with start greater than endInclusive is empty" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports ranges that are empty because the &lt;b&gt;start&lt;/b&gt; value is greater than the &lt;b&gt;endInclusive&lt;/b&gt; value.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SuspiciousArrayMethodCall" displayName="Suspicious Arrays method calls" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports when non-generic array manipulation method like &lt;code&gt;Arrays.fill&lt;/code&gt; is called with mismatched argument types.
  Such call will not do anything useful and likely to be a mistake.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ImplicitNullableNothingType" displayName="Implicit `Nothing?` type" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports variables / functions with implicit &lt;b&gt;Nothing?&lt;/b&gt; type.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CanSealedSubClassBeObject" displayName="Sealed sub-class without state and overridden equals" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports direct inheritors of &lt;b&gt;sealed class&lt;/b&gt; that have no state and no overridden &lt;b&gt;equals&lt;/b&gt;.
It&apos;s highly recommended to override &lt;b&gt;equals&lt;/b&gt; to provide comparison stability or convert &lt;b&gt;class&lt;/b&gt; to &lt;b&gt;object&lt;/b&gt; with the same effect.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ArrayObjectsEquals" displayName="&apos;Objects.equals()&apos; called on arrays" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;java.util.Objects.equals()&lt;/b&gt; called on two arrays.
Calling &lt;b&gt;java.util.Objects.equals()&lt;/b&gt; with array arguments compares identity and is equivalent to using &lt;b&gt;==&lt;/b&gt;.
Use &lt;b&gt;Arrays.equals()&lt;/b&gt; to compare the contents of two arrays
or &lt;b&gt;Arrays.deepEquals()&lt;/b&gt; to compare the contents of two multi-dimensional arrays.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 15&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SuspiciousCollectionReassignment" displayName="Augmented assignment creates a new collection under the hood" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports augmented assignment on read-only &lt;b&gt;Collection&lt;/b&gt; that creates a new &lt;b&gt;Collection&lt;/b&gt; under the hood.
Example:
&lt;br /&gt;&lt;br /&gt;

&lt;pre&gt;
&lt;b&gt;var&lt;/b&gt; list = listOf(1, 2, 3)
list &lt;b&gt;+=&lt;/b&gt; 4 // A new list is created, better use mutableListOf instead
&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PrimitiveArrayArgumentToVariableArgMethod" displayName="Confusing primitive array argument to varargs method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to a variable arity method where the call has a primitive array in
in the variable arity parameter position (e.g &lt;b&gt;System.out.printf(&quot;%s&quot;, new int[]{1, 2, 3})&lt;/b&gt; ).
Such a primitive-array argument may be confusing, as it will wrapped as a single-element array, rather than each individual
element being boxed, as might be expected.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuspiciousToArrayCall" displayName="Suspicious &apos;Collection.toArray()&apos; call" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports two types of suspicious calls to &lt;b&gt;Collection.toArray()&lt;/b&gt;.
The first type is any calls where the type of the specified array argument is not of the same type as the array type to which the result is casted.
Example:
&lt;pre&gt;&lt;code&gt;
void m(List list) {
  Number[] ns = (Number[])
      list.toArray(new String[0]);
}
&lt;/code&gt;&lt;/pre&gt;
The second type is any calls where the type of the specified array argument does not match the type parameter of the collection declaration.
Example:
&lt;pre&gt;&lt;code&gt;
void m(List&amp;lt;Number&amp;gt; list) {
  Number[] ns =
      list.toArray(new String[0]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssertWithSideEffects" displayName="&apos;assert&apos; statement with side effects" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;assert&lt;/b&gt; statements
that cause side effects outside of the assert statement. Since assertions can be
switched off, the side effects are not guaranteed to happen and can cause subtle bugs.
Common unwanted side effects detected by this inspection are modifications of variables
and fields in the assert statement. Also methods called are analyzed one level deep
for any modifications of fields.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReflectionForUnavailableAnnotation" displayName="Reflective access to a source-only annotation" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any attempts to reflectively check for the presence of an
annotation which is not defined as being retained at runtime.
Using &lt;b&gt;Class.isAnnotationPresent()&lt;/b&gt; to test for an annotation
which has source retention or class-file retention (the default) will always result in a negative result,
but is easy to do inadvertently.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassNewInstance" displayName="Unsafe call to &apos;Class.newInstance()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to
&lt;b&gt;java.lang.Class.newInstance()&lt;/b&gt;.
The &lt;b&gt;newInstance&lt;/b&gt; method propagates any
exception thrown by the no-arg constructor, including checked exceptions. Use
of this method effectively bypasses the compile-time exception checking that
would otherwise be performed by the compiler. Replacing such a method call with
a call to the &lt;b&gt;java.lang.reflect.Constructor.newInstance()&lt;/b&gt;
method avoids this problem by wrapping any exception thrown by the constructor
in a &lt;b&gt;java.lang.reflect.InvocationTargetException&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringConcatenationInMessageFormatCall" displayName="String concatenation as argument to &apos;MessageFormat.format()&apos; call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports non-constant string concatenations used as an argument to a call to
&lt;b&gt;MessageFormat.format()&lt;/b&gt;.
Often this is the result of mistakenly concatenating a string format argument by typing
a &apos;+&apos; when a &apos;,&apos; was meant.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EqualsWithItself" displayName="&apos;equals()&apos; called on itself" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;equals()&lt;/b&gt; or &lt;b&gt;compareTo()&lt;/b&gt; were an object is compared for equality with itself.
This means the argument and the qualifier to the call are identical, and it will always return &lt;b&gt;true&lt;/b&gt; for &lt;b&gt;equals()&lt;/b&gt;
or always &lt;b&gt;0&lt;/b&gt; for &lt;b&gt;compareTo()&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuspiciousIndentAfterControlStatement" displayName="Suspicious indentation after control statement without braces" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any suspicious indentation of statements after a control statement
without braces. Such indentation can make it look like the statement is part of the control
statement, when in fact it will be executed after the control statement.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantConditions" displayName="Constant conditions &amp; exceptions" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection analyzes method control and data flow to report possible conditions that are always &lt;b&gt;true&lt;/b&gt; or &lt;b&gt;false&lt;/b&gt;,
expressions whose value is statically proven to be constant, and situations that can lead to nullability contract violations.&lt;p/&gt;
  
Variables, method parameters and return values marked as &lt;code&gt;@Nullable&lt;/code&gt; or &lt;code&gt;@NotNull&lt;/code&gt; are treated as nullable (or not-null, respectively)
and used during the analysis to check nullability contracts, e.g. report &lt;code&gt;NullPointerException&lt;/code&gt; (NPE) errors that might be produced.&lt;p/&gt;

More complex contracts can be defined using &lt;code&gt;@Contract&lt;/code&gt; annotation, for example:&lt;p/&gt;
&lt;code&gt;@Contract(&quot;_, null -&gt; null&quot;)&lt;/code&gt; &amp;mdash; method returns null if its second argument is null&lt;br/&gt;
&lt;code&gt;@Contract(&quot;_, null -&gt; null; _, !null -&gt; !null&quot;)&lt;/code&gt; &amp;mdash; method returns null if its second argument is null and not-null otherwise&lt;br/&gt;
&lt;code&gt;@Contract(&quot;true -&gt; fail&quot;)&lt;/code&gt; &amp;mdash; a typical &lt;code&gt;assertFalse&lt;/code&gt; method which throws an exception if &lt;code&gt;true&lt;/code&gt; is passed to it&lt;br/&gt;
&lt;p/&gt;
The inspection can be configured to use custom &lt;code&gt;@Nullable&lt;/code&gt;/&lt;code&gt;@NotNull&lt;/code&gt; annotations (by default the ones from annotations.jar will be used)
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyConstructorNamedArguments" displayName="Named arguments of constructor call" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports named arguments of default class constructor call which don&apos;t correspond to properties of this class.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="InnerClassReferencedViaSubclass" displayName="Inner class referenced via subclass" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports accesses of inner and nested classes where the call is qualified
by a subclass of the declaring class, rather than the declaring class itself. Java
allows such qualification, but such accesses
may be confusing, and may indicate a subtle confusion of inheritance and overriding.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RecursivePropertyAccessor" displayName="Recursive property accessor" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports recursive property accessor calls which can end up with a &lt;b&gt;StackOverflowError&lt;/b&gt;. For example:
&lt;br /&gt;&lt;br /&gt;

&lt;pre&gt;
&lt;b&gt;class&lt;/b&gt; A {
    &lt;b&gt;var&lt;/b&gt; x = 0
        &lt;b&gt;get&lt;/b&gt;() {
            &lt;b&gt;return&lt;/b&gt; x //recursive getter call
        }

    &lt;b&gt;var&lt;/b&gt; y = 0
        &lt;b&gt;set&lt;/b&gt;(value) {
            &lt;b&gt;if&lt;/b&gt; (value &gt; 0) {
                y = value //recursive setter call
            }
        }
}
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyLabeledStatement" displayName="Labeled statement inspection" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports already used labels.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CastConflictsWithInstanceof" displayName="Cast conflicts with &apos;instanceof&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports type cast expressions which are surrounded by an
&lt;b&gt;instanceof&lt;/b&gt; check for a different type.
While it is possible that this was intended, such a construct is most likely an error, and will
result in a &lt;b&gt;java.lang.ClassCastException&lt;/b&gt; at runtime.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SortedCollectionWithNonComparableKeys" displayName="Sorted collection with non-comparable elements" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports construction of sorted collections, for example &lt;code&gt;new TreeSet&amp;lt;&amp;gt;()&lt;/code&gt;, that rely on natural ordering,
but their element type doesn&apos;t implement the &lt;code&gt;Comparable&lt;/code&gt; interface.
It&apos;s unlikely that such a collection will work properly.
&lt;p&gt;
  A false positive is possible if the collection element is a non-comparable super-type,
  but it&apos;s intended to hold only comparable sub-types. This is however error-prone.
  It&apos;s better to narrow the collection element type or declare the super-type as &lt;code&gt;Comparable&lt;/code&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The inspection also reports cases when the collection element is a type parameter which is not declared as &lt;code&gt;extends Comparable&lt;/code&gt;.
  You can suppress the warnings on type parameters using the provided option (for example, to keep the API compatibility).
&lt;/p&gt;
&lt;p&gt;
  &lt;small&gt;New in 2018.3&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyInArgumentCheck" displayName="Incompatible &apos;in&apos; argument types" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports usages of membership operator which check items and containers of incompatible types.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConstantAssertCondition" displayName="&apos;assert&apos; statement condition is constant" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports assert statement conditions which are constants. Assert
statements with constant conditions will either always fail or always succeed.
Such statements can easily be left over after refactoring and are probably a bug.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReturnNull" displayName="Return of &apos;null&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;return&lt;/b&gt; statements with &lt;b&gt;null&lt;/b&gt; return values.
While occasionally useful, this construct may make the code more prone
to failing with a &lt;b&gt;NullPointerException&lt;/b&gt;, and often indicates that the
developer doesn&apos;t really understand the class&apos; intended semantics.
Methods annotated with a &lt;b&gt;@Nullable&lt;/b&gt; annotation will be ignored by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to let this inspection ignore &lt;b&gt;private&lt;/b&gt; methods.
This will also ignore return of &lt;b&gt;null&lt;/b&gt; from anonymous classes and lambda&apos;s.
&lt;p&gt;
Use the bottom three checkboxes to specify whether
&lt;b&gt;null&lt;/b&gt; values on array returns, collection
object returns, plain object returns, or a combination of the three should be reported.
Return of &lt;b&gt;null&lt;/b&gt; in methods with return type &lt;b&gt;java.util.Optional&lt;/b&gt; are always reported.
&lt;p&gt;
Use the &lt;i&gt;Configure annotations&lt;/i&gt; button to specify &lt;b&gt;@Nullable&lt;/b&gt; annotations.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="KotlinCovariantEquals" displayName="Covariant &apos;equals()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;equals()&lt;/b&gt; methods taking an argument type other than &lt;b&gt;Any?&lt;/b&gt;.
Only reports if the containing class does not have another &lt;b&gt;equals()&lt;/b&gt; method which does take &lt;b&gt;Any?&lt;/b&gt; as its argument type.
Normally, this is a mistake.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ObjectToString" displayName="Call to default &apos;toString()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;.toString()&lt;/b&gt;
which use the default implementation from &lt;b&gt;java.lang.Object&lt;/b&gt;.
The default implementation is rarely desired, but easy to use by accident. Calls
to &lt;b&gt;.toString()&lt;/b&gt; on objects with
&lt;b&gt;java.lang.Object&lt;/b&gt;, interface or abstract class type are ignored by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ResultOfObjectAllocationIgnored" displayName="Result of object allocation ignored" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports object allocations where the object allocated is ignored, and not assigned to a variable or used in another way.
Such allocation expressions are legal Java, but are usually either inadvertent, or
evidence of a very odd object initialization strategy.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NewStringBufferWithCharArgument" displayName="StringBuilder constructor call with &apos;char&apos; argument" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;new StringBuffer()&lt;/b&gt;
and &lt;b&gt;new StringBuilder()&lt;/b&gt; calls with an argument
of type &lt;b&gt;char&lt;/b&gt;. Such an argument is silently
cast to an integer and interpreted as initial capacity of the buffer. Usually this is
not what was intended.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuspiciousArrayCast" displayName="Suspicious array cast" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports suspicious array casts. An array cast is suspicious when it casts to a more specific array type. Such
a cast is legal at compile time but may fail with a &lt;b&gt;ClassCastException&lt;/b&gt; at runtime.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SecondUnsafeCall" displayName="Second unsafe call" enabled="false">&lt;html&gt;
&lt;body&gt;
This quick fix prevent possible &lt;b&gt;NullPointerException&lt;/b&gt; during chain methods or properties call.
E.g. &lt;b&gt;domain?.getZone().getName()&lt;/b&gt; replaces by &lt;b&gt;domain?.getZone()?.getName()&lt;/b&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MathRandomCastToInt" displayName="&apos;Math.random()&apos; cast to &apos;int&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;Math.random()&lt;/b&gt; which are immediately
cast to &lt;b&gt;int&lt;/b&gt;. Casting a &lt;b&gt;double&lt;/b&gt; between &lt;b&gt;0.0&lt;/b&gt; (inclusive) and
&lt;b&gt;1.0&lt;/b&gt; (exclusive) will always round down to zero. A &lt;b&gt;Math.random()&lt;/b&gt; value
should first be multiplied with some factor before casting it to an &lt;b&gt;int&lt;/b&gt; to
get a value between zero (inclusive) and the multiplication factor (exclusive).
Another possible solution would be to use the &lt;b&gt;nextInt()&lt;/b&gt; method of
&lt;b&gt;java.util.Random&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CopyConstructorMissesField" displayName="Copy constructor misses field" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports copy constructors that don&apos;t copy all fields in the class.
Fields with the modifier &lt;b&gt;transient&lt;/b&gt; are considered unnecessary to copy.
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SubtractionInCompareTo" displayName="Subtraction in &apos;compareTo()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports subtraction in
&lt;b&gt;compareTo()&lt;/b&gt; methods and methods implementing &lt;b&gt;java.util.Comparator.compare()&lt;/b&gt;. While it is a common idiom to
use the results of integer subtraction as the result of a &lt;b&gt;compareTo()&lt;/b&gt;
method, this construct may cause subtle and difficult bugs in cases of integer overflow.
Comparing the integer values directly and returning &lt;b&gt;-1&lt;/b&gt;, &lt;b&gt;0&lt;/b&gt;, or &lt;b&gt;1&lt;/b&gt; is better practice in most cases.
&lt;p&gt;
  The subtraction on floating point values which is immediately cast to integral type is also warned as precision loss is possible due to
  rounding.
&lt;/p&gt;
&lt;p&gt;
The warning is not issued when it&apos;s statically determined that value ranges are limited, and overflow never occurs.
Additionally subtraction on &lt;b&gt;int&lt;/b&gt; numbers greater than or equal to &lt;b&gt;0&lt;/b&gt; will never overflow.
Therefore this inspection tries not to warn in those cases.
Methods that always return zero or greater can be specified in this inspection&apos;s settings.
&lt;p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify methods which are safe to use inside a subtraction.
Methods are safe when they return an &lt;b&gt;int&lt;/b&gt; value that is always greater than or equal to &lt;b&gt;0&lt;/b&gt;.
Alternatively you may use &lt;b&gt;javax.annotation.Nonnegative&lt;/b&gt; annotation on such methods.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EndlessStream" displayName="Non-short-circuit operation consumes the infinite stream" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Non-short-circuit operation consumes the infinite stream. Operation may be completed only by throwing the exception.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
  Stream.iterate(0, i -&gt; i + 1).collect(Collectors.toList())
&lt;/code&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NumberEquality" displayName="Number comparison using &apos;==&apos;, instead of &apos;equals()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any use of &lt;b&gt;==&lt;/b&gt; or &lt;b&gt;!=&lt;/b&gt; to test for Number equality,
instead of an &lt;b&gt;equals()&lt;/b&gt; call. With auto-boxing it is easy
to make the mistake of comparing two Integer (or other subclass of java.lang.Number) objects instead
of two ints.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UselessCallOnCollection" displayName="Useless call on collection type" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports filter-like calls on already filtered collections, e.g. &lt;b&gt;listOf(&quot;abc&quot;).filterNotNull()&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="KotlinThrowableNotThrown" displayName="Throwable not thrown" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports creating of &lt;b&gt;Throwable&lt;/b&gt; and subclasses, where the created &lt;b&gt;Throwable&lt;/b&gt; is never actually thrown.
Also reports function calls which return &lt;b&gt;Throwable&lt;/b&gt; instances, where the result of the function call is not thrown.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MalformedRegex" displayName="Malformed regular expression" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports malformed regular expressions. Regular expressions
are reported if they are compile-time constants used as arguments to appropriate methods on
&lt;b&gt;java.util.regex.Pattern&lt;/b&gt; or &lt;b&gt;java.lang.String&lt;/b&gt;
and do not fit the standard Java regular expression syntax.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Contract" displayName="Contract issues" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports various method contract (@Contract annotation) well-formedness issues:
&lt;li&gt;Errors in contract syntax&lt;/li&gt;
&lt;li&gt;Contracts not conforming to the method signature (wrong parameter count)&lt;/li&gt;
&lt;li&gt;Method implementations that contradict the contract (e.g. returning &quot;true&quot; when the contract says &quot;false&quot;)&lt;/li&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ObjectEquality" displayName="Object comparison using &apos;==&apos;, instead of &apos;equals()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any use of &lt;b&gt;==&lt;/b&gt; or &lt;b&gt;!=&lt;/b&gt;to test for Object equality, rather than the &lt;b&gt;equals()&lt;/b&gt; method.
Comparisons to &lt;b&gt;null&lt;/b&gt; are not reported.
Comparison of arrays, Strings or Numbers using &lt;b&gt;==&lt;/b&gt; are also not reported, there are separate inspections for these three problems.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkboxes below to indicate whether uses of &lt;b&gt;==&lt;/b&gt; between objects of
an enumerated type, final class types without equals implementation or types with private constructors should be reported by this inspection.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuspendFunctionOnCoroutineScope" displayName="Ambiguous coroutineContext due to CoroutineScope receiver of suspend function" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports calls &amp; accesses of &lt;b&gt;CoroutineScope&lt;/b&gt; extensions or members
inside suspend functions with &lt;b&gt;CoroutineScope&lt;/b&gt; receiver.

Both suspend functions and &lt;b&gt;CoroutineScope&lt;/b&gt; members &amp; extensions have access to &lt;b&gt;coroutineContext&lt;/b&gt;.
When some function is simultaneously suspend &lt;b&gt;and&lt;/b&gt; has &lt;b&gt;CoroutineScope&lt;/b&gt; receiver,
it has ambiguous access to &lt;b&gt;CoroutineContext&lt;/b&gt;:
first via &lt;b&gt;kotlin.coroutines.coroutineContext&lt;/b&gt; and second via &lt;b&gt;CoroutineScope.coroutineContext&lt;/b&gt;,
and two these contexts are different in general case.
So when we call some &lt;b&gt;CoroutineScope&lt;/b&gt; extension or access &lt;b&gt;coroutineContext&lt;/b&gt; from such a function,
it&apos;s unclear which from these two context do we have in mind.

Normal ways to fix this are to wrap suspicious call inside &lt;b&gt;coroutineScope { ... }&lt;/b&gt; or
to get rid of &lt;b&gt;CoroutineScope&lt;/b&gt; function receiver.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuspiciousMethodCalls" displayName="Suspicious collections method calls" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports method calls to parameterized collections, where actual argument type does not
correspond to the collection&apos;s elements type. &lt;br&gt; &lt;br&gt;
For example if you have the following code: &lt;br&gt; 
&lt;pre&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&amp;lt;Integer&amp;gt; list = getListOfElements();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list.remove(&quot;&quot;);
&lt;/pre&gt;

- the call to &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;remove()&lt;/font&gt;&lt;/b&gt; will be highlighted. &lt;br&gt;

&lt;p&gt;

  The option &apos;&lt;b&gt;Report suspicious but possibly correct method calls&lt;/b&gt;&apos; makes it possible to ignore
  potentially correct code, like this: &lt;br&gt;

  &lt;pre&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Number number = &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;new&lt;/font&gt;&lt;/b&gt; Integer(&lt;font color=&quot;#0000FF&quot;&gt;0&lt;/font&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list.remove(number));
  &lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DelegationToVarProperty" displayName="Delegating to &apos;var&apos; property" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports delegation to &lt;b&gt;var&lt;/b&gt; property.
In fact, only starting value of &lt;b&gt;var&lt;/b&gt; property is used for delegation so it&apos;s not recommended to do so.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GrEqualsBetweenInconvertibleTypes" displayName="&apos;equals()&apos; between objects of inconvertible types" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;strong&gt;.equals()&lt;/strong&gt; and &lt;strong&gt;==&lt;/strong&gt; operator usages 
where the target and argument are of incompatible types. 
While such a call might theoretically be useful, most likely it represents a bug.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="StringTokenizerDelimiter" displayName="Duplicated delimiters in java.util.StringTokenizer" enabled="false">&lt;html&gt;
&lt;body&gt;
Inspection reports StringTokenizer&apos;s delimiters which contain duplicated characters.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EmptyInitializer" displayName="Empty class initializer" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports empty class initializer blocks.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EqualsOnSuspiciousObject" displayName="&apos;equals()&apos; called on StringBuilder" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports when &lt;b&gt;equals()&lt;/b&gt; is called on specific classes like &lt;b&gt;StringBuilder&lt;/b&gt; or &lt;b&gt;StringBuffer&lt;/b&gt;.
The &lt;b&gt;equals()&lt;/b&gt; method is not overridden in these classes, so may return false even when the contents of two objects are the same.
If reference equality is intended, it&apos;s better to use &lt;b&gt;==&lt;/b&gt; to avoid confusion.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="WrongPackageStatement" displayName="Wrong package statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Detects &lt;b&gt;package&lt;/b&gt; statements that do not correspond to the project directory structure
and reports classes without &lt;b&gt;package&lt;/b&gt; statements.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConflictingExtensionProperty" displayName="Extension property conflicting with synthetic one" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports extension properties that conflict with synthetic ones automatically produced from Java &lt;b&gt;get/set&lt;/b&gt; methods. These properties should be either removed or renamed to avoid breaking code by future changes in the compiler.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EqualsWhichDoesntCheckParameterClass" displayName="&apos;equals()&apos; method which does not check class of parameter" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;equals()&lt;/b&gt;
methods which do not check the type of their parameter. Failure to check the type of the parameter
in the &lt;b&gt;equals()&lt;/b&gt; method may result in latent errors if the object is later used in an untyped collection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuspiciousEqualsCombination" displayName="Suspicious combination of == and ===" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports when &lt;b&gt;==&lt;/b&gt; and &lt;b&gt;===&lt;/b&gt; comparisons are both used on the same variable within a single expression.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MalformedXPath" displayName="Malformed XPath expression" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports malformed XPath expressions. XPath expressions
are reported if they are compile-time constants used as arguments to appropriate methods on
&lt;b&gt;javax.xml.xpath.XPath&lt;/b&gt; and do not fit the standard XPath syntax.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceofIncompatibleInterface" displayName="&apos;instanceof&apos; with incompatible interface" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;instanceof&lt;/b&gt; expressions where
the compared type is an interface, and the compared expression has a class type which neither
implements the compared interface, nor has any visible subclasses which implement or extend the compared interface.
While it is possible that this was intended, such a construct is most likely an error, where
the resulting &lt;b&gt;instanceof&lt;/b&gt; expression always evaluates to
&lt;b&gt;false&lt;/b&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuspiciousIntegerDivAssignment" displayName="Suspicious integer division assignment" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports cases when the right side of the assignment is a division that shouldn&apos;t be truncated to integer.
&lt;p&gt;
  For example, the following code doesn&apos;t change &lt;b&gt;x&lt;/b&gt; because of the integer division result:
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;int&lt;/b&gt; x = 18;
  x *= 3/2;
&lt;/code&gt;&lt;/pre&gt;
So, it should be replaced with:
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;int&lt;/b&gt; x = 18;
  x *= 3.0/2;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;small&gt;New in 2019.2&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuspiciousListRemoveInLoop" displayName="Suspicious &apos;List.remove()&apos; in the loop" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports when &lt;strong&gt;list.remove(index)&lt;/strong&gt; is called inside the ascending counted loop. This is suspicious as list becomes
shorter after that and the element next to removed will not be processed. Simple fix is to decrease the index variable after removal,
but probably removing via iterator or using &lt;strong&gt;removeIf&lt;/strong&gt; method (since Java 8) is a more robust alternative.
If you don&apos;t expect that &lt;strong&gt;remove&lt;/strong&gt; will be called more than once in a loop, consider adding a &lt;strong&gt;break&lt;/strong&gt; command
after it.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InfiniteRecursion" displayName="Infinite recursion" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports methods which must either recurse
infinitely or throw an exception. Methods reported by this inspection can not
return normally.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EmptyStatementBody" displayName="Statement with empty body" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;if&lt;/b&gt;, &lt;b&gt;while&lt;/b&gt;, &lt;b&gt;do&lt;/b&gt;, &lt;b&gt;for&lt;/b&gt; and &lt;b&gt;switch&lt;/b&gt; statements
having empty bodies. While occasionally intended, this construction is confusing, and often the result of a typo.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
This inspection is disabled in JSP files.
&lt;p&gt;
Use the first checkbox below to indicate whether this inspection should report statements whose body is an
empty code block, rather than just empty statements.
&lt;p&gt;
Use the second checkbox below to ignore empty statement bodies which contain a comment.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IteratorNextDoesNotThrowNoSuchElementException" displayName="&apos;Iterator.next()&apos; which can&apos;t throw &apos;NoSuchElementException&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any implementations of &lt;b&gt;Iterator.next()&lt;/b&gt;
which can not throw &lt;b&gt;java.util.NoSuchElementException&lt;/b&gt;. Such
implementations violate the contract of &lt;b&gt;java.util.Iterator&lt;/b&gt;,
and may result in subtle bugs if the iterator is ever used in a non-standard fashion.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuspiciousNameCombination" displayName="Suspicious variable/parameter name combination" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports assignments and function calls where the name of the variable to which
a value is assigned or the function parameter does not seem to match the name of the value assigned to it.
For example:
&lt;pre&gt;&lt;code&gt;&lt;font color=&quot;#000080&quot;&gt;
  &lt;b&gt;int&lt;/b&gt; x = 0;
  &lt;b&gt;int&lt;/b&gt; y = x;&lt;/font&gt;&lt;/code&gt;&lt;/pre&gt; or &lt;pre&gt;&lt;code&gt;&lt;font color=&quot;#000080&quot;&gt;
  &lt;b&gt;int&lt;/b&gt; x = 0, y = 0;
  Rectangle rc = &lt;b&gt;new&lt;/b&gt; Rectangle(y, x, 20, 20);&lt;/font&gt;&lt;/code&gt;&lt;/pre&gt;
The configuration pane allows to specify the names which should not be used together: the error is reported
if the parameter name or assignment target name contains words from one group and the name of the assigned or passed
variable contains words from a different group.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonShortCircuitBoolean" displayName="Non-short-circuit boolean expression" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on any uses of the non-short-circuit forms of boolean &apos;and&apos; and &apos;or&apos; (&lt;b&gt;&amp;&lt;/b&gt;
and &lt;b&gt;|&lt;/b&gt;). The non-short-circuit versions are occasionally useful, but
their presence is often due to typos of the short-circuit forms (&lt;b&gt;&amp;&amp;&lt;/b&gt;
and &lt;b&gt;||&lt;/b&gt;), and may lead to subtle bugs.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringEquality" displayName="String comparison using &apos;==&apos;, instead of &apos;equals()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any use of &lt;b&gt;==&lt;/b&gt; or &lt;b&gt;!=&lt;/b&gt; to test for String equality,
instead of an &lt;b&gt;equals()&lt;/b&gt; call.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DeferredResultUnused" displayName="Deferred result is never used" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports calls with &lt;b&gt;Deferred&lt;/b&gt; result that is never used,
so nobody will wait for execution of all related actions.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CompareToUsesNonFinalVariable" displayName="Non-final field referenced in &apos;compareTo()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any implementations of &lt;b&gt;compareTo()&lt;/b&gt; which access
non-&lt;b&gt;final&lt;/b&gt; variables. Such access may result in &lt;b&gt;compareTo()&lt;/b&gt;
returning different results at different points in an object&apos;s lifecycle, which may in turn cause problems when
using the standard Collections classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MismatchedCollectionQueryUpdate" displayName="Mismatched query and update of collection" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports collection fields or variables whose contents are either queried and
not updated, or updated and not queried. Such mismatched queries and updates are pointless, and may indicate
either dead code or a typographical error.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the tables below to specify which methods are update and/or query methods. The names are matched with
the beginning of the method name. Query methods which return their result are automatically detected, only
query methods which return their result in an argument (e.g. write to OutputStream) need to be specified.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverwrittenKey" displayName="Overwritten Map key or Set element" enabled="false">&lt;html&gt;
&lt;body&gt;
Warns if &lt;code&gt;Map&lt;/code&gt; key or &lt;code&gt;Set&lt;/code&gt; element was overwritten in the sequence of add/put calls or using a Java 9 factory method
like &lt;code&gt;Set.of&lt;/code&gt; (which will result in runtime exception). This usually occurs due to copy-paste error. Example:
&lt;pre&gt;
  map.put(&quot;A&quot;, 1);
  map.put(&quot;B&quot;, 2);
  map.put(&quot;C&quot;, 3);
  map.put(&quot;D&quot;, 4);
  map.put(&quot;A&quot;, 5); // duplicating key &quot;A&quot;, overwrites previously written entry
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EqualsUsesNonFinalVariable" displayName="Non-final field referenced in &apos;equals()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any implementations of &lt;b&gt;equals()&lt;/b&gt; which access
non-&lt;b&gt;final&lt;/b&gt; variables. Such access may result in &lt;b&gt;equals()&lt;/b&gt;
returning different results at different points in an object&apos;s lifecycle, which may in turn cause problems when
using the standard Collections classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MoveSuspiciousCallableReferenceIntoParentheses" displayName="Suspicious callable reference used as lambda result" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a lambda expression with one callable reference because it is a common error to replace a lambda with a callable reference without changing curly braces to parentheses.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DataClassPrivateConstructor" displayName="Private data class constructor is exposed via the &apos;copy&apos; method" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports private constructors of data classes because they are always exposed via the generated &lt;b&gt;copy&lt;/b&gt; method.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticFieldReferenceOnSubclass" displayName="Static field referenced via subclass" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports static field accesses where the call is qualified
by a subclass of the declaring class, rather than the declaring class itself. Java
allows such qualification, but such accesses
may be confusing, and may indicate a subtle confusion of inheritance and overriding.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InvalidComparatorMethodReference" displayName="Invalid method reference used for Comparator" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports method references mapped to Comparator interface which don&apos;t fulfill its contract.
&lt;p&gt;
Some method references like &lt;code&gt;Integer::max&lt;/code&gt; can be mapped to &lt;code&gt;Comparator&lt;/code&gt; interface.
However using them as &lt;code&gt;Comparator&lt;/code&gt; is meaningless and result might be unpredictable.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2016.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="VariableNotUsedInsideIf" displayName="Reference checked for &apos;null&apos; is not used inside &apos;if&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any references to variables which are checked for nullity
in the condition of an &lt;b&gt;if&lt;/b&gt; statement or
conditional expression but which are not used inside the
&lt;b&gt;if&lt;/b&gt; statement. Usually this either means that
the check is unnecessary or that the variable is not referenced inside the
&lt;b&gt;if&lt;/b&gt; statement because of a typo.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OptionalGetWithoutIsPresent" displayName="Optional.get() is called without isPresent() check" enabled="true">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports when &lt;b&gt;Optional.get()&lt;/b&gt; method is called without previous checking that optional is definitely not empty.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyDivideByZero" displayName="Divide by zero" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports division by zero or remainder by zero.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EqualsAndHashcode" displayName="&apos;equals()&apos; and &apos;hashCode()&apos; not paired" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes that override the
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;equals()&lt;/font&gt;&lt;/b&gt; method but do not override the
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;hashCode()&lt;/font&gt;&lt;/b&gt; method, or vice versa, which could potentially lead to problems
when the class is added to a &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;Collection&lt;/font&gt;&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DestructuringWrongName" displayName="Variable in destructuring declaration uses name of a wrong data class property" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports entries of destructuring declarations that match the name of a different property of the destructured data class.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ArrayHashCode" displayName="&apos;hashCode()&apos; called on array" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;hashCode()&lt;/b&gt; being called
on an array. To get the same hash code for two arrays
with identical contents call &lt;b&gt;Arrays.hashCode()&lt;/b&gt;.
Use &lt;b&gt;Arrays.deepHashCode()&lt;/b&gt; to calculate the hash
code of a multi-dimensional array.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CovariantEquals" displayName="Covariant &apos;equals()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;equals()&lt;/b&gt; methods taking an argument type other than &lt;b&gt;java.lang.Object&lt;/b&gt;.
Only reports if the containing class does not have another &lt;b&gt;equals()&lt;/b&gt; method
which does take &lt;b&gt;java.lang.Object&lt;/b&gt; as its argument type. Normally, this is a mistake.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LeakingThis" displayName="Leaking &apos;this&apos; in constructor" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports dangerous operations inside constructors including:

&lt;ul&gt;
  &lt;li&gt;Accessing a non-final property in constructor&lt;/li&gt;
  &lt;li&gt;Calling a non-final function in constructor&lt;/li&gt;
  &lt;li&gt;Using &lt;b&gt;this&lt;/b&gt; as a function argument in a constructor of a non-final class&lt;/li&gt;
&lt;/ul&gt;

These operations are dangerous because your class can be inherited,
and a derived class is not yet initialized at this moment. Typical example:
&lt;br /&gt;&lt;br /&gt;

&lt;pre&gt;
&lt;b&gt;abstract class&lt;/b&gt; Base {
    &lt;b&gt;val&lt;/b&gt; code = calculate()
    &lt;b&gt;abstract fun&lt;/b&gt; calculate(): Int
}

&lt;b&gt;class&lt;/b&gt; Derived(&lt;b&gt;private val&lt;/b&gt; x: Int) : Base() {
    &lt;b&gt;override fun&lt;/b&gt; calculate() = x
}

&lt;b&gt;fun&lt;/b&gt; testIt() {
    println(Derived(42).code) &lt;i&gt;// Expected: 42, actual: 0&lt;/i&gt;
}
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ArrayEquality" displayName="Array comparison using &apos;==&apos;, instead of &apos;Arrays.equals()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any use of &lt;b&gt;==&lt;/b&gt; or &lt;b&gt;!=&lt;/b&gt; to test for array equality,
rather than the &lt;b&gt;java.util.Arrays.equals()&lt;/b&gt; method.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MalformedFormatString" displayName="Malformed format string" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports malformed format strings. Format strings
are reported if they are compile-time constants used as arguments to appropriate methods on
&lt;b&gt;java.util.Formatter&lt;/b&gt;,
&lt;b&gt;java.lang.String&lt;/b&gt;,
&lt;b&gt;java.io.PrintWriter&lt;/b&gt;,
or &lt;b&gt;java.io.PrintStream&lt;/b&gt;
and do not fit the standard Java format string syntax.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyDocCheck" displayName="GroovyDoc issues" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports unresolved references inside GroovyDoc.&lt;/body&gt;&lt;/html&gt;
</inspection>
    <inspection shortName="SelfReferenceConstructorParameter" displayName="Constructor has non-null self reference parameter" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports constructor that has a non-null self reference parameter. A class with such a constructor can never be instantiated.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyAccessibility" displayName="Access to inaccessible element" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports all references which exceed access rights.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NewObjectEquality" displayName="New object is compared using &apos;==&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports cases when &lt;b&gt;==&lt;/b&gt; or &lt;b&gt;!=&lt;/b&gt; is applied to a newly allocated object
instead of an &lt;b&gt;equals()&lt;/b&gt; call. Newly allocated objects cannot be equal to other objects,
thus the compared objects are always unequal.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;small&gt;New in 2018.3&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IgnoreResultOfCall" displayName="Result of method call ignored" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to specific methods where the result of that call is ignored.
Method calls inspected are:
&lt;ul&gt;
  &lt;li&gt;Calls to simple getters (which do nothing except return a field)&lt;/li&gt;
  &lt;li&gt;Calls to methods specified in the settings of this inspection&lt;/li&gt;
  &lt;li&gt;Calls to Methods annotated with &lt;b&gt;org.jetbrains.annotations.Contract(pure=true)&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;Calls to Methods annotated with .*.&lt;b&gt;CheckReturnValue&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;Calls to Methods located in a class annotated with &lt;b&gt;javax.annotation.CheckReturnValue&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;Calls to Methods located in a package annotated with &lt;b&gt;javax.annotation.CheckReturnValue&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;Optionally all calls to non-library methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For calls to many methods ignoring the result is perfectly
legitimate, but for some methods it is almost certainly an error. Examples of methods where ignoring
the result of a call is likely to be an error include &lt;b&gt;java.io.inputStream.read()&lt;/b&gt;,
which returns the number of bytes actually read and any method on
&lt;b&gt;java.lang.String &lt;/b&gt; or &lt;b&gt;java.math.BigInteger&lt;/b&gt;,
as all of those methods are side-effect free and thus pointless if ignored.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the panel below to specify the names of the classes containing the methods and method name patterns of the methods you wish to check.
Class names have to be specified as a fully qualified name string and will match a class and all its inheritors.
Method name patterns use the Java regular expression syntax.
&lt;p&gt;
Use the checkbox below to report all calls to non-library methods where the result of that call is ignored
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticCallOnSubclass" displayName="Static method referenced via subclass" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports static method calls where the call is qualified
by a subclass of the declaring class, rather than the declaring class itself
(e.g. &lt;b&gt;MyThreadSubclass.sleep()&lt;/b&gt;). Java allows such qualification, but such calls
may be confusing, and may indicate a subtle confusion of inheritance and overriding.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThrowableNotThrown" displayName="Throwable not thrown" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports instantiations of &lt;b&gt;Throwable&lt;/b&gt; and subclasses, where the created &lt;b&gt;Throwable&lt;/b&gt;
is never actually thrown. Also reports method calls which return &lt;b&gt;Throwable&lt;/b&gt; instances,
where the result of the method call is not thrown. These are simple mistakes to make which
are hard to catch in tests.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyInfiniteRecursion" displayName="Infinite recursion" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods which must either recurse
infinitely or throw an exception. Methods reported by this inspection can not
return normally.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConvertNaNEquality" displayName="Convert equality check with &apos;NaN&apos; to &apos;isNaN&apos; call" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports an equality check with &lt;b&gt;Double.NaN&lt;/b&gt; which can be replaced with &lt;b&gt;a.isNaN()&lt;/b&gt;.

For every floating point value &lt;b&gt;a&lt;/b&gt;, &lt;b&gt;a == NaN&lt;/b&gt; will always result in &lt;b&gt;false&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnusedLambdaExpressionBody" displayName="Unused return value of a function with lambda expression body" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports calls with an unused return value when the called function returns a lambda from an expression body.
This can happen when someone accidentally puts &lt;b&gt;=&lt;/b&gt; between function header and body block.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnusedAssignment" displayName="Unused assignment" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection points out the cases where a variable value
is never used after its assignment, i.e.: &lt;br&gt;
&amp;nbsp;- the variable never gets read after assignment OR &lt;br&gt;
&amp;nbsp;- the value is always overwritten with another assignment before the next variable read OR &lt;br&gt;
&amp;nbsp;- the variable initializer is redundant (for one of the above two reasons)
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="OverflowingLoopIndex" displayName="Loop executes zero or billions times" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports loops that cannot complete without index overflow or doesn&apos;t execute at all
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
Usually it happens because of mistake in update operation
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
  void foo(int s) {
    for (int i = s; i &gt; 12; i++) { // i-- should be here
      System.out.println(i);
    }
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SetterBackingFieldAssignment" displayName="Existing backing field is not assigned by the setter" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a setter of a property with a backing field that doesn&apos;t update the backing field.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EqualsBetweenInconvertibleTypes" displayName="&apos;equals()&apos; between objects of inconvertible types" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;.equals()&lt;/b&gt; where the target and argument are
of incompatible types. While such a call might theoretically be useful, most likely it represents
a bug.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SelfAssignment" displayName="Assignment of variable to itself" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects assignments of a variable to itself.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SuspiciousVarProperty" displayName="Suspicious &apos;var&apos; property: its setter does not influence its getter result" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;var&lt;/b&gt; properties with default setter and getter that doesn&apos;t reference backing field.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CollectionAddedToSelf" displayName="Collection added to self" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports cases where the argument of a method call on a &lt;b&gt;java.util.Collection&lt;/b&gt;
or &lt;b&gt;java.util.Map&lt;/b&gt; is the collection or map itself.
This includes adding a collection to itself, which can lead to a &lt;b&gt;java.lang.StackOverflowError&lt;/b&gt; when,
for example, calling &lt;b&gt;hashCode()&lt;/b&gt; on the self-containing collection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringConcatenationInFormatCall" displayName="String concatenation as argument to &apos;format()&apos; call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports non-constant string concatenations used as a format string argument.
Often this is the result of mistakenly concatenating a string format argument by typing a &apos;+&apos;
when a &apos;,&apos; was meant.
This inspection checks calls to appropriate methods on
&lt;b&gt;java.util.Formatter&lt;/b&gt;,
&lt;b&gt;java.lang.String&lt;/b&gt;, 
&lt;b&gt;java.io.PrintWriter&lt;/b&gt;,
or &lt;b&gt;java.io.PrintStream&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuspiciousSystemArraycopy" displayName="Suspicious &apos;System.arraycopy()&apos; call" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports suspicious calls to &lt;b&gt;System.arraycopy()&lt;/b&gt;.
Warnings reported by this inspection are:
&lt;ul&gt;
&lt;li&gt;source or destination which are not of an array type.
&lt;li&gt;source and destination have a different type.
&lt;li&gt;source offset, destination offset or length are negative.
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CapturingCleaner" displayName="Cleaner captures object reference" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports Runnable passed to Cleaner.register() capturing reference that leads to memory leak.
Possible sources of this problem:
&lt;ul&gt;
  &lt;li&gt;Lambda using non static methods, fields or this itself&lt;/li&gt;
  &lt;li&gt;Non static inner class (anonymous or not) always captures this reference&lt;/li&gt;
  &lt;li&gt;Instance method reference&lt;/li&gt;
  &lt;li&gt;Access to outer class non static members from non static inner class&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This inspection is available since Java 9 only.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseOfPropertiesAsHashtable" displayName="Use of Properties object as a Hashtable" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any calls to the &lt;b&gt;java.util.Hashtable&lt;/b&gt;
methods &lt;b&gt;put()&lt;/b&gt;, &lt;b&gt;putAll()&lt;/b&gt; or
&lt;b&gt;get()&lt;/b&gt; on a &lt;b&gt;java.util.Properties&lt;/b&gt; object.
For reasons lost to history, &lt;b&gt;Properties&lt;/b&gt; inherits
from &lt;b&gt;Hashtable&lt;/b&gt;, but use of those methods is discouraged
to prevent corruption of properties values with non-String data.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyNonShortCircuitBoolean" displayName="Non short-circuit boolean" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports the non-short-circuit forms of boolean &apos;and&apos; and &apos;or&apos; ( &lt;b&gt;&amp;&lt;/b&gt;
and &lt;b&gt;|&lt;/b&gt; ). The non-short-circuit versions are occasionally useful, but
their presence is often due to typos of the short-circuit forms ( &lt;b&gt;&amp;&amp;&lt;/b&gt;
and &lt;b&gt;||&lt;/b&gt; ), and may lead to subtle bugs.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyResultOfObjectAllocationIgnored" displayName="Result of object allocation ignored" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports object allocation where the object allocated ignored.
Such allocation expressions are legal Groovy, but are usually either inadvertent, or
evidence of a very odd object initialization strategy.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ArrayEquals" displayName="&apos;equals()&apos; called on array" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;equals()&lt;/b&gt; being called
to compare two arrays. Calling &lt;b&gt;equals()&lt;/b&gt; on an array
compares identity and is equivalent to using &lt;b&gt;==&lt;/b&gt;. Use
&lt;b&gt;Arrays.equals()&lt;/b&gt; to compare the contents of two arrays
or &lt;b&gt;Arrays.deepEquals()&lt;/b&gt; to compare the content of two
multi-dimensional arrays.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NullableProblems" displayName="@NotNull/@Nullable problems" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports problems related to
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;@Nullable&lt;/font&gt;&lt;/b&gt; and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;@NotNull&lt;/font&gt;&lt;/b&gt;
annotations usage configured in Constant conditions &amp; exceptions inspection.
&lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UselessCallOnNotNull" displayName="Useless call on not-null type" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports calls on not-null receiver that make sense only for nullable receiver, e.g.

&lt;pre&gt;&lt;b&gt;
listOf(1).orEmpty()
&lt;/b&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ComparatorResultComparison" displayName="Suspicious usage of compare method" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection warns when result of &lt;b&gt;Comparator.compare&lt;/b&gt; or &lt;b&gt;Comparable.compareTo&lt;/b&gt; is compared with
  specific non-zero constant (like &lt;b&gt;if(a.compareTo(b) == -1)&lt;/b&gt;). By contract,
  these methods can return any positive number (not just 1) or any negative number (not just -1), so comparing against
  particular numbers is a bad practice.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MultipleRepositoryUrls" displayName="Multiple repository urls" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports usage of multiple urls per repository(maven or ivy) block.
The problem is that no more than one url will be picked up for the repo and others will be ignored.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ImplicitArrayToString" displayName="Call to &apos;toString()&apos; on array" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any arrays used in &lt;b&gt;String&lt;/b&gt;
concatenations or as parameters to &lt;b&gt;java.io.PrintStream&lt;/b&gt;
methods (such as &lt;b&gt;System.out.println()&lt;/b&gt;). Usually in such
a case, the contents of the array were meant to be used and not the array object itself.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TextLabelInSwitchStatement" displayName="Text label in &apos;switch&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports labelled statements inside of &lt;b&gt;switch&lt;/b&gt; statements.
While occasionally intended, this construction is often the result of a typo.
&lt;pre&gt;
    &lt;b&gt;switch&lt;/b&gt; (x) {
        &lt;b&gt;case&lt;/b&gt; 1:
        case2:   //typo!
        &lt;b&gt;case&lt;/b&gt; 3:
            &lt;b&gt;break&lt;/b&gt;;
    }
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MismatchedStringBuilderQueryUpdate" displayName="Mismatched query and update of StringBuilder" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any StringBuilder or StringBuffer fields or variables whose contents are read but not written,
or written but not read. Such mismatched reads and writes are pointless, and probably indicate
dead, incomplete or erroneous code.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CastToIncompatibleInterface" displayName="Casting to incompatible interface" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports type cast expressions where
the cast type is an interface, and the cast expression has a class type which neither
implements the cast interface, nor has any visible subclasses which implement or extend the cast interface.
While it is possible that this was intended, such a construct is most likely an error, and will
result in a &lt;b&gt;java.lang.ClassCastException&lt;/b&gt; at runtime.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ResultSetIndexZero" displayName="Use of index 0 in JDBC ResultSet" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any attempts to access column 0 of a &lt;b&gt;java.sql.ResultSet&lt;/b&gt; or &lt;b&gt;java.sql.PreparedStatement&lt;/b&gt;. For historical
reasons columns of &lt;b&gt;java.sql.ResultSet&lt;/b&gt;s and &lt;b&gt;java.sql.PreparedStatement&lt;/b&gt;s are numbered beginning with 1, rather than
0, and accessing column 0 is a common error in JDBC programming.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ComparatorMethodParameterNotUsed" displayName="Suspicious &apos;Comparator.compare()&apos; implementation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports problems found in &lt;b&gt;Comparator.compare()&lt;/b&gt; implementations:
&lt;ul&gt;
  &lt;li&gt;Warns if parameter is not used. Most likely this is the result of a typing mistake and one parameter is compared
    with itself or the method is not implemented correctly.&lt;/li&gt;
  &lt;li&gt;Warns if it&apos;s evident that comparator does not return 0 for same elements. Such comparator violates the contract
    and result of sorting could be unpredictable if equal elements are encountered. In particular,
    sorting method may fail with exception on some data sets.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="KDocUnresolvedReference" displayName="Unresolved reference in KDoc" enabled="false">&lt;html&gt;&lt;body&gt;
This inspection reports unresolved references in KDoc comments.
&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="HashCodeUsesNonFinalVariable" displayName="Non-final field referenced in &apos;hashCode()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any implementations of &lt;b&gt;hashcode()&lt;/b&gt; which access
non-&lt;b&gt;final&lt;/b&gt; variables. Such access may result in &lt;b&gt;hashcode()&lt;/b&gt;
returning different values at different points in an object&apos;s lifecycle, which may in turn cause problems when
using the standard Collections classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GrUnresolvedAccess" displayName="Access to unresolved expression" enabled="false">&lt;html&gt;
&lt;body&gt;
       Reports unresolved references
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MismatchedArrayReadWrite" displayName="Mismatched read and write of array" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any array fields or variables whose contents are read but not written,
or written but not read. Such mismatched reads and writes are pointless, and probably indicate
dead, incomplete or erroneous code.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyInfiniteLoopStatement" displayName="Infinite loop statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;for&lt;/b&gt;, &lt;b&gt;while&lt;/b&gt;, or &lt;b&gt;do&lt;/b&gt; statements which
can only exit by throwing an exception. While such statements may be correct, they
are often a symptom of coding errors.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ArrayInDataClass" displayName="Array property in data class" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports array properties in a data class without overridden &lt;b&gt;equals()&lt;/b&gt; or &lt;b&gt;hashCode()&lt;/b&gt; inside.
Due to default &lt;b&gt;equals()&lt;/b&gt; behaviour for arrays in JVM, it is strongly recommended to override &lt;b&gt;equals()&lt;/b&gt; and &lt;b&gt;hashCode()&lt;/b&gt; in such cases.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="StringConcatenationMissingWhitespace" displayName="String literal concatenation missing whitespace" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports string concatenations where the left-hand side does not
end with whitespace or a symbol and the right-hand side does not start with whitespace or a symbol. For example:
&lt;pre&gt;&lt;code&gt;
  String sql = &quot;SELECT column&quot; +
               &quot;FROM table&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to have this inspection only report when both the left and right side of the concatenation are literals.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyRangeTypeCheck" displayName="Incorrect range arguments" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports types used in ranges that do not have a &lt;b&gt;next()&lt;/b&gt; or &lt;b&gt;previous()&lt;/b&gt; method
or do not implement the &lt;b&gt;java.lang.Comparable&lt;/b&gt; interface.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NullArgumentToVariableArgMethod" displayName="Confusing argument to varargs method" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any calls to a variable arity method where the call has a single argument
in the variable arity parameter position, which is either a &lt;b&gt;null&lt;/b&gt; or an array of a subtype of the variable arity parameter.
Such an argument may be confusing as it is unclear if a varargs or non-varargs call is desired.
For example &lt;code&gt;System.out.printf(&quot;%s&quot;, null)&lt;/code&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReplaceAllDot" displayName="Call to String.replaceAll(&quot;.&quot;, ...)" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to
&lt;b&gt;java.lang.String.replaceAll()&lt;/b&gt; with &lt;b&gt;&quot;.&quot;&lt;/b&gt;
as the first argument. Calling &lt;b&gt;replaceAll(&quot;.&quot;, ...)&lt;/b&gt; replaces
all of the characters in a string with its second argument, which is rarely the desired functionality.
More probably, &lt;b&gt;replaceAll(&quot;\.&quot;, ...)&lt;/b&gt; was intended.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IterableUsedAsVararg" displayName="Iterable is used as vararg" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports suspicious usages of &lt;b&gt;Collection&lt;/b&gt; or an &lt;b&gt;Iterable&lt;/b&gt; in vararg method calls. E.g. given method 
  &lt;pre&gt;&amp;lt;T&amp;gt; boolean contains(T needle, T... haystack) {...}&lt;/pre&gt; 
&lt;p&gt;a call like&lt;/p&gt;
  &lt;pre&gt;if(contains(&quot;item&quot;, listOfStrings)) {...}&lt;/pre&gt; 
&lt;p&gt;looks suspicious as the list will be wrapped into a single element array. 
  Such code can be successfully compiled and likely run without
  exceptions, but it&apos;s unlikely intended.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2019.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringEqualsCharSequence" displayName="&apos;String.equals()&apos; called with &apos;CharSequence&apos; argument" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;String.equals()&lt;/b&gt; calls on a &lt;b&gt;CharSequence&lt;/b&gt; argument.
&lt;b&gt;String.equals()&lt;/b&gt; can only return &lt;b&gt;true&lt;/b&gt; for &lt;b&gt;String&lt;/b&gt; arguments.
To compare the contents of a String for equality with a non-String CharSequence argument, use the &lt;b&gt;contentEquals()&lt;/b&gt; method.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MisspelledEquals" displayName="&apos;equal()&apos; instead of &apos;equals()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any declaration of a &lt;b&gt;equal()&lt;/b&gt; method, taking one argument.
Normally, this is a typo of &lt;b&gt;equals()&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EqualsOrHashCode" displayName="equals() and hashCode() not paired" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports classes that override &lt;b&gt;equals()&lt;/b&gt; but do not override &lt;b&gt;hashCode()&lt;/b&gt;, or vice versa, which could potentially lead to problems when a class is added to a &lt;b&gt;Collection&lt;/b&gt;.
It also reports object declarations which override either &lt;b&gt;equals()&lt;/b&gt; or &lt;b&gt;hashCode()&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MainFunctionReturnUnit" displayName="Entry point function should return Unit" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a entry point function with incorrect return type (should be &lt;b&gt;Unit&lt;/b&gt;).
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ComparableImplementedButEqualsNotOverridden" displayName="Comparable implemented but &apos;equals()&apos; not overridden" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes which implement &lt;b&gt;java.lang.Comparable&lt;/b&gt;
which do not override &lt;b&gt;equals()&lt;/b&gt;. If &lt;b&gt;equals()&lt;/b&gt;
is not overridden, the &lt;b&gt;equals()&lt;/b&gt; implementation is not consistent with
the &lt;b&gt;compareTo()&lt;/b&gt; implementation. If an object of such a class is added
to a collection such as &lt;b&gt;java.util.SortedSet&lt;/b&gt;, this collection will violate
the contract of &lt;b&gt;java.util.Set&lt;/b&gt;, which is defined in terms of
&lt;b&gt;equals()&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="WrapUnaryOperator" displayName="Ambiguous unary operator use with number constant" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a unary operator followed by a dot qualifier (such as &lt;b&gt;-1.inc()&lt;/b&gt;) that is potentially wrong, because it has a lower precedence.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MagicConstant" displayName="Magic Constant" enabled="false">&lt;html&gt;
&lt;body&gt;
Report occurrences where usages of &quot;magic&quot; constants are preferred
but other expressions are used instead. &lt;br&gt;
E.g.

&lt;br&gt; &lt;br&gt;

&lt;code&gt;// bare literal used, warning:&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&lt;b&gt;new &lt;/b&gt; Font(&quot;Arial&quot;, &lt;span style=&quot;background-color: yellow;&quot;&gt;&lt;b&gt;2&lt;/b&gt;&lt;/span&gt;)&lt;/code&gt;&lt;br&gt;

&lt;br&gt;
instead of&lt;br&gt; &lt;br&gt;

&lt;code&gt;// &quot;magic&quot; constant used, good:&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&lt;b&gt;new &lt;/b&gt; Font(&quot;Arial&quot;, Font.&lt;b&gt;ITALIC&lt;/b&gt;)&lt;/code&gt;&lt;br&gt;

&lt;br&gt; &lt;br&gt;

Please see &lt;code&gt;org.intellij.lang.annotations.MagicConstant&lt;/code&gt; annotation description for details.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ClassGetClass" displayName="Class.getClass() call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports when &lt;b&gt;getClass()&lt;/b&gt; method is called on &lt;b&gt;java.lang.Class&lt;/b&gt; instance. This is usually a mistake as the result is
  always equivalent to &lt;b&gt;Class.class&lt;/b&gt;. If it&apos;s mistake then the &lt;b&gt;getClass()&lt;/b&gt; call should be removed and qualifier should be used
  directly. If the behavior is intended, then it&apos;s better to write &lt;b&gt;Class.class&lt;/b&gt; explicitly to avoid confusion.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ForEachParameterNotUsed" displayName="Iterated elements are not used in forEach" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection guards against useless forEach loops by identifying when the iterable&apos;s values are not used.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyUntypedAccess" displayName="Access to untyped expression" enabled="false">&lt;html&gt;
&lt;body&gt;
       Reports the references whose type can&apos;t be determined by IntelliJ IDEA
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnsafeCastFromDynamic" displayName="Implicit (unsafe) cast from dynamic type" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports expressions with a dynamic type in the specified inspection scope that are implicitly cast to another type.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RecursiveEqualsCall" displayName="Recursive equals call" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports recursive &lt;b&gt;equals&lt;/b&gt; calls. For example:
&lt;br /&gt;&lt;br /&gt;

&lt;pre&gt;
class X {
    override fun equals(other: Any?): Boolean {
        if (this == other) return true // recursive equals call
        return false
    }
}
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Class structure">
    <inspection shortName="ParameterCanBeLocal" displayName="Parameter can be local" enabled="false">&lt;html&gt;
&lt;body&gt;

This inspection searches for redundant method parameters that can be replaced with local variables.
If all local usages of a parameter are preceded by assignments to that parameter, the
parameter can be removed and its usages replaced with local variables.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="FinalMethod" displayName="&apos;final&apos; method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods being declared &lt;b&gt;final&lt;/b&gt;. Some coding
standards discourage &lt;b&gt;final&lt;/b&gt; methods.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassWithOnlyPrivateConstructors" displayName="Class with only &apos;private&apos; constructors should be declared &apos;final&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes with only &lt;b&gt;private&lt;/b&gt; constructors.
Such a class cannot be extended outside its containing file and should be declared &lt;b&gt;final&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MultipleTopLevelClassesInFile" displayName="Multiple top level classes in single file" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports multiple top-level classes in a single java file. Putting multiple
top-level classes in a file can be confusing, and may degrade the usefulness of various
software tools.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ListenerMayUseAdapter" displayName="Class may extend adapter instead of implementing listener" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any classes which implement a listener, but may extend
the corresponding adapter instead. The quickfix for this inspection will also
remove any redundant empty methods left over after replacing the implementation
of the listener with an extension of the corresponding adapter.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to indicate if the inspection should warn even if no empty
implementing methods are found.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LimitedScopeInnerClass" displayName="Limited-scope inner class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any limited-scope inner classes. Some code standards discourage
the use of limited-scope inner classes, and they are unusual enough as to possibly be
confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UtilityClassWithoutPrivateConstructor" displayName="Utility class without &apos;private&apos; constructor" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports utility classes which do not have &lt;b&gt;private&lt;/b&gt; constructors.
Utility classes have all fields and methods declared &lt;b&gt;static&lt;/b&gt;. Giving such classes a &lt;b&gt;private&lt;/b&gt;
constructor prevents them from being inadvertently instantiated.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the list below to specify special annotations. Classes annotated with one of
these annotations will be ignored by this inspection.
&lt;p&gt;
Use the checkbox below to ignore classes which only have a main method and no other methods.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UtilityClass" displayName="Utility class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports utility classes.
Utility classes have all fields and methods declared &lt;b&gt;static&lt;/b&gt;, and their
presence may indicate a lack of object-oriented design.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the list below to specify special annotations. Classes annotated with one of
these annotations will be ignored by this inspection.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AnonymousInnerClass" displayName="Anonymous inner class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any anonymous inner classes.
Some code standards discourage the use of anonymous inner classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FinalMethodInFinalClass" displayName="&apos;final&apos; method in &apos;final&apos; class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports methods being declared &lt;b&gt;final&lt;/b&gt; in
classes that are declared &lt;b&gt;final&lt;/b&gt;. This is unnecessary, and may be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FinalClass" displayName="&apos;final&apos; class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes being declared &lt;b&gt;final&lt;/b&gt;. Some coding
standards discourage &lt;b&gt;final&lt;/b&gt; classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InnerClassOnInterface" displayName="Inner class of interface" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports inner classes
of &lt;b&gt;interface&lt;/b&gt; classes. Some coding standards
discourage such classes. Enumeration classes and annotation classes are not reported
by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EmptyClass" displayName="Empty class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports empty classes and Java files without any defined classes. A class is empty if it
doesn&apos;t have any fields, methods, constructors or initializers. Empty classes are often left over
after large changes or refactorings.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the list below to specify special annotations. Classes annotated with one of
these annotations will be ignored by this inspection.
&lt;p&gt;
Use the first checkbox below to ignore classes which parameterize a super class, for example
&lt;pre&gt;&lt;code&gt;&lt;b&gt;class&lt;/b&gt; MyList &lt;b&gt;extends&lt;/b&gt; ArrayList&amp;lt;String&amp;gt; {}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Use the second checkbox below to ignore classes which extend &lt;b&gt;java.lang.Throwable&lt;/b&gt;.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonFinalUtilityClass" displayName="Utility class is not &apos;final&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports utility classes which are not final.
Utility classes have all fields and methods declared &lt;b&gt;static&lt;/b&gt;. Giving such classes making them &lt;b&gt;final&lt;/b&gt;
 prevents them from being inadvertently subclassed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FinalStaticMethod" displayName="&apos;static&apos; method declared &apos;final&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports methods declared &lt;b&gt;final&lt;/b&gt; and &lt;b&gt;static&lt;/b&gt;.
When a &lt;b&gt;static&lt;/b&gt; method is overridden in a subclass it can still be
accessed via the super class, making a &lt;b&gt;final&lt;/b&gt; declaration not very necessary.
Declaring a &lt;b&gt;static&lt;/b&gt; method &lt;b&gt;final&lt;/b&gt;
does prevent subclasses from defining a &lt;b&gt;static&lt;/b&gt; method with the same
signature.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicConstructor" displayName="&apos;public&apos; constructor" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;public&lt;/b&gt; constructors. Some coding standards discourage &lt;b&gt;public&lt;/b&gt; constructors, preferring to use
&lt;b&gt;static&lt;/b&gt; factory methods. This way the implementation can be swapped out without affecting the call sites.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicConstructorInNonPublicClass" displayName="&apos;public&apos; constructor in non-public class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports all constructors in non-&lt;b&gt;public&lt;/b&gt;
classes that are declared &lt;b&gt;public&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassNameDiffersFromFileName" displayName="Class name differs from file name" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports top-level class names which do not match the name of
their containing file. While the Java specification allows such naming for non-&lt;b&gt;public&lt;/b&gt; classes,
such misnamed files can be confusing, and may degrade the usefulness of various
software tools.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NoopMethodInAbstractClass" displayName="No-op method in abstract class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &quot;no-op&quot; methods in &lt;b&gt;abstract&lt;/b&gt; classes. It is usually a better
design to make such methods &lt;b&gt;abstract&lt;/b&gt; themselves, so that classes which inherit the methods will not forget to provide
their own implementations.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MarkerInterface" displayName="Marker interface" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &quot;marker&quot; interfaces which have no methods or fields.
Such interfaces may be confusing, and normally indicate a design failure.
Interfaces which extend two or more other interfaces or interfaces
which specialize the generic type of their superinterface will not be reported by
this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassInitializer" displayName="Non-&apos;static&apos; initializer" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any non-&lt;b&gt;static&lt;/b&gt; initializers
in classes. Some coding standards prohibit instance initializers, preferring initialization to be done
in constructors or field initializers. Non-&lt;b&gt;static&lt;/b&gt; initializers
may also be inadvertently created by deleting the &lt;b&gt;static&lt;/b&gt; keyword,
resulting in obscure bugs.
This inspection does not warn on instance initializers in anonymous classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore instance initializers in classes which do not have any constructors.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticNonFinalField" displayName="&apos;static&apos;, non-&apos;final&apos; field" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;b&gt;final&lt;/b&gt; &lt;b&gt;static&lt;/b&gt; fields.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to have this inspection only report on &lt;b&gt;public&lt;/b&gt; fields.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UtilityClassWithPublicConstructor" displayName="Utility class with &apos;public&apos; constructor" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports utility classes with &lt;b&gt;public&lt;/b&gt; constructors. Utility
classes have all fields and methods declared &lt;b&gt;static&lt;/b&gt;. Giving such classes a &lt;b&gt;public&lt;/b&gt;
constructor is confusing, and may lead to the class being inadvertently instantiated.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassMayBeInterface" displayName="Abstract class may be interface" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;abstract&lt;/b&gt; classes which can be converted to interfaces.
A class may be converted to an interface if it has no superclass (other
than Object), has no fields declared that are not &lt;b&gt;static&lt;/b&gt;, &lt;b&gt;final&lt;/b&gt;, and &lt;b&gt;public&lt;/b&gt;, and has no
methods declared that are not &lt;b&gt;public&lt;/b&gt; and &lt;b&gt;abstract&lt;/b&gt; and no inner classes that are not &lt;b&gt;public&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to report classes containing &lt;b&gt;static&lt;/b&gt; methods and non-abstract methods which can be converted to &lt;b&gt;default&lt;/b&gt;
  methods, when using a language level of 8 or higher .
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ProtectedMemberInFinalClass" displayName="&apos;protected&apos; member in &apos;final&apos; class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports members being declared &lt;b&gt;protected&lt;/b&gt; in
classes that are declared &lt;b&gt;final&lt;/b&gt;. Such members may be declared &lt;b&gt;private&lt;/b&gt;
or package-visible instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantDeclaredInInterface" displayName="Constant declared in interface" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any constants (i.e. &lt;b&gt;public static final&lt;/b&gt; fields) declared in interfaces.
Some coding standards require that constants be declared in abstract classes instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InterfaceMayBeAnnotatedFunctional" displayName="Interface may be annotated @FunctionalInterface" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;interface&lt;/b&gt; that may be annotated as &lt;b&gt;@FunctionalInterface&lt;/b&gt;, which is available in JDK 1.8.
Annotating an interface with &lt;b&gt;@FunctionalInterface&lt;/b&gt; can be useful to indicate that the interface is supposed to be functional and
further &lt;b&gt;abstract&lt;/b&gt; methods should not be added to it.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 8 or higher&lt;/p&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldCanBeLocal" displayName="Field can be local" enabled="true">&lt;html&gt;
&lt;body&gt;

This inspection searches for redundant class fields that can be replaced with local variables.
If all local usages of a field are preceded by assignments to that field, the
field can be removed and its usages replaced with local variables.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MethodReturnAlwaysConstant" displayName="Method returns per-class constant" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods which only ever return a constant, probably different for different inheritors.
Because this inspection requires global code analysis it is only available for &lt;em&gt;Analyze|Inspect Code&lt;/em&gt; or
&lt;em&gt;Analyze|Run Inspection by Name&lt;/em&gt; and it will not report in the editor.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonFinalFieldInEnum" displayName="Non-&apos;final&apos; field in enum" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;b&gt;final&lt;/b&gt; fields in enumeration types. A non-&lt;b&gt;final&lt;/b&gt; field in an enum is rarely needed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UtilityClassCanBeEnum" displayName="Utility class can be &apos;enum&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports utility classes that can be converted to an &lt;b&gt;enum&lt;/b&gt;.
To avoid code coverage problems in &lt;b&gt;private&lt;/b&gt; constructors, some coding styles mandate that utility classes are implemented as enums.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FinalPrivateMethod" displayName="&apos;private&apos; method declared &apos;final&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports methods
declared &lt;b&gt;final&lt;/b&gt; and &lt;b&gt;private&lt;/b&gt;.
As &lt;b&gt;private&lt;/b&gt; methods cannot be meaningfully overridden, declaring them
&lt;b&gt;final&lt;/b&gt; is redundant.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Singleton" displayName="Singleton" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports singleton classes.
Singleton classes are declared so that only one instance of the
class may ever be instantiated. Singleton classes complicate testing,
and their presence may indicate a lack of object-oriented design.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantDeclaredInAbstractClass" displayName="Constant declared in abstract class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any constants (i.e. &lt;b&gt;public static final&lt;/b&gt; fields) declared in abstract
classes. Some coding standards require that constants be declared in interfaces instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Style">
    <inspection shortName="ChangeToMethod" displayName="Change to method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports operator calls that can be replaced with methods.
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ChangeToOperator" displayName="Change to operator" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports method calls that can be replaced with operators.
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GrUnnecessaryAlias" displayName="Unnecessary import alias" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary import aliases
&lt;p&gt;
  &lt;small&gt;New in 2018.1&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GrUnnecessaryDefModifier" displayName="Unnecessary &apos;def&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary &lt;b&gt;def&lt;/b&gt; modifiers when used with explicit type declaration.
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
&lt;b&gt;def&lt;/b&gt; boolean foo() {} // modifier is unnecessary
&lt;b&gt;def&lt;/b&gt; Object bar // modifier is unnecessary
&lt;b&gt;def&lt;/b&gt; (int a, String b) = [] // modifier is required and therefore not highlighted
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GrUnnecessarySemicolon" displayName="Unnecessary semicolon" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary semicolons.
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
print 2; print 3 // semicolon is required
print 2; // semicolon is unnecessary
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavaStylePropertiesInvocation" displayName="Java-style property access" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports properties accessed via method calls.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GrUnnecessaryPublicModifier" displayName="Unnecessary &apos;public&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary &lt;b&gt;public&lt;/b&gt; modifiers.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Abstraction issues">
    <inspection shortName="InstanceofThis" displayName="&apos;instanceof&apos; check for &apos;this&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on uses of &lt;b&gt;instanceof&lt;/b&gt; or &lt;b&gt;getClass() == SomeClass.class&lt;/b&gt; where the
expression checked is &lt;b&gt;this&lt;/b&gt;. Such expressions
are indicative of a failure of object-oriented design, and should be replaced by
polymorphic constructions.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ParameterOfConcreteClass" displayName="Method parameter of concrete class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any method parameters whose type is declared to be a concrete class, rather than an interface.
Such declarations may represent a failure of abstraction, and may make testing more difficult.
Declarations whose classes come from system or third-party libraries will not be reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to have this inspection ignore method parameters whose type is an abstract class.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CastToConcreteClass" displayName="Cast to a concrete class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports casting a value to a concrete class, rather than an interface.
Such declarations may represent a failure of abstraction, and may make testing more difficult.
Casts to system or library classes and casts inside &lt;b&gt;equals()&lt;/b&gt; and &lt;b&gt;clone()&lt;/b&gt; methods will not be reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to have this inspection ignore casts to abstract classes.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InterfaceMethodClashesWithObject" displayName="Interface method clashes with method in &apos;java.lang.Object&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports interface methods that clash with the &lt;b&gt;protected&lt;/b&gt; methods &lt;code&gt;clone()&lt;/code&gt; and &lt;code&gt;finalize()&lt;/code&gt; in &lt;code&gt;java.lang.Object&lt;/code&gt;.
In an interface it is possible to declare those methods with a return type that is incompatible with the &lt;code&gt;java.lang.Object&lt;/code&gt; methods.
This makes it impossible to create a class implementing such an interface.
When the interface is functional it remains possible to create a lambda from it, but this can still be confusing.
&lt;p&gt;
&lt;small&gt;New in 16&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicMethodNotExposedInInterface" displayName="&apos;public&apos; method not exposed in interface" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;public&lt;/b&gt; methods in classes
which are not exposed as in interface. Exposing all &lt;b&gt;public&lt;/b&gt; methods via interface is important for
maintaining loose coupling, and may be necessary for certain component-based programming styles.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the list below to specify special annotations. Methods annotated with one of
these annotations will be ignored by this inspection.
&lt;p&gt;
Use the checkbox below to ignore methods of which the containing class does not
implement a non-library interface.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassReferencesSubclass" displayName="Class references one of its subclasses" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports classes which contain references to one of their subclasses.
Such references may be confusing, and violate several rules of object-oriented design.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverlyStrongTypeCast" displayName="Overly strong type cast" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports type casts which are overly strong. For instance,
casting an object to &lt;b&gt;ArrayList&lt;/b&gt; when casting it to
&lt;b&gt;List&lt;/b&gt; would do just as well. &lt;b&gt;Note:&lt;/b&gt; much like the &lt;i&gt;Redundant type cast&lt;/i&gt;
inspection, applying the fix for this inspection may change the semantics of your program, if you are
intentionally using an overly strong cast to cause a &lt;b&gt;ClassCastException&lt;/b&gt; to be generated. Use caution.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodReturnOfConcreteClass" displayName="Method return of concrete class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any methods whose return type is declared to be a concrete class, rather than an interface.
Such declarations may represent a failure of abstraction, and may make testing more difficult.
Declarations whose classes come from system or third-party libraries will not be reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to have this inspection ignore methods whose return type is an abstract class.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MagicNumber" displayName="Magic number" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &quot;magic numbers&quot;, which are numeric literals used without being named by a constant declaration.
Magic numbers can result in code whose intention is unclear, and may result in errors if a magic
number is changed in one code location but not another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0L, 1L, 2L,
0.0, 1.0, 0.0F and 1.0F are not reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to disable this inspection within &lt;b&gt;hashCode()&lt;/b&gt; methods.
&lt;p&gt;
Use the second checkbox below to ignore magic numbers in annotations.
&lt;p&gt;
Use the third checkbox below to ignore magic numbers used as initial capacity when constructing &lt;b&gt;Collection&lt;/b&gt;, &lt;b&gt;Map&lt;/b&gt;,
&lt;b&gt;StringBuilder&lt;/b&gt; or &lt;b&gt;StringBuffer&lt;/b&gt; objects.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OptionalUsedAsFieldOrParameterType" displayName="&apos;Optional&apos; used as field or parameter type" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any uses of &lt;b&gt;java.util.Optional&amp;lt;T&amp;gt;&lt;/b&gt;, &lt;b&gt;java.util.OptionalDouble&lt;/b&gt;, &lt;b&gt;java.util.OptionalInt&lt;/b&gt;,
&lt;b&gt;java.util.OptionalLong&lt;/b&gt; or &lt;b&gt;com.google.common.base.Optional&lt;/b&gt; as the type for a field or a parameter.
Optional was designed to provide a limited mechanism for library method return types where there needed
to be a clear way to represent &quot;no result&quot;.
Using a field with type &lt;b&gt;java.util.Optional&lt;/b&gt; is also problematic if the class needs to be &lt;b&gt;Serializable&lt;/b&gt;,
which &lt;b&gt;java.util.Optional&lt;/b&gt; is not.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 16&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceofChain" displayName="Chain of &apos;instanceof&apos; checks" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any chains of &lt;b&gt;if&lt;/b&gt;-&lt;b&gt;else&lt;/b&gt; statements all of whose conditions are &lt;b&gt;instanceof&lt;/b&gt; expressions
or class equality expressions (e.g. comparison with &lt;b&gt;String.class&lt;/b&gt;).
Such constructions usually indicate a failure of object-oriented design, which
dictates that such type-based dispatch should be done via polymorphic method calls rather than explicit chains
of type tests.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore instanceof expressions on library classes.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticMethodOnlyUsedInOneClass" displayName="Static method only used from one other class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;static&lt;/b&gt; methods which
are only called from one class which is not the same as the class containing the
method. Such methods could be moved into that class.
Methods called from an anonymous class inside the method&apos;s class are ignored.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to have this inspection not report when the static method is only used from a test class.
&lt;p&gt;
Use the second checkbox below to ignore method calls from inside anonymous, local and non-static inner classes.
&lt;p&gt;
Use the third checkbox below to not warn on methods which cannot be moved without problems.
For example because a method with an identical signature is already present in the target class.
Or because a field or method used inside the method will not be accessible when the method is moved.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodOnlyUsedFromInnerClass" displayName="Private method only used from inner class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;private&lt;/b&gt; methods, which
are only called from an inner class of the class containing the method. Such
methods could be safely moved into that inner class.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to ignore &lt;b&gt;private&lt;/b&gt;
methods which are called from an anonymous class.
&lt;p&gt;
Use the second checkbox to ignore &lt;b&gt;private static&lt;/b&gt;
methods which are accessed from a non-static inner class.
&lt;p&gt;
Use the third checkbox to only report &lt;b&gt;static&lt;/b&gt; methods.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceVariableOfConcreteClass" displayName="Type of instance field is concrete class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any instance fields whose type is declared to be a concrete class, rather than an interface.
Such declarations may represent a failure of abstraction, and may make testing more difficult.
Declarations whose classes come from system or third-party libraries will not be reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to have this inspection ignore instance fields whose type is an abstract class.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticVariableOfConcreteClass" displayName="Static field of concrete class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;static&lt;/b&gt; fields whose type is declared to be a concrete class, rather than an interface.
Such declarations may represent a failure of abstraction, and may make testing more difficult.
Declarations whose classes come from system or third-party libraries will not be reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to have this inspection ignore static fields whose type is an abstract class.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BooleanParameter" displayName="&apos;public&apos; method with &apos;boolean&apos; parameter" enabled="false">&lt;html&gt;
&lt;body&gt;
It&apos;s almost always a mistake to add a &lt;b&gt;boolean&lt;/b&gt; parameter to a public method (part of an API) if that method is not a setter.
When reading code using such a method, it can be difficult to decipher what the &lt;b&gt;boolean&lt;/b&gt; stands for without looking at
the source or documentation.
This problem is also known as &lt;a href=&quot;https://ariya.io/2011/08/hall-of-api-shame-boolean-trap&quot;&gt;the boolean trap&lt;/a&gt;.
The &lt;b&gt;boolean&lt;/b&gt; parameter can often be profitably replaced with an &lt;b&gt;enum&lt;/b&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the option below to only warn when a method contains more than one boolean parameter.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeMayBeWeakened" displayName="Type may be weakened" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any variables which may be declared with a weaker type. For instance,
a variable may be of type &lt;tt&gt;ArrayList&lt;/tt&gt;, and only the method
&lt;tt&gt;isEmpty()&lt;/tt&gt; is called on it. In this case the type
&lt;tt&gt;List&lt;/tt&gt; would do just as well.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Enable the &lt;b&gt;Use righthand type&lt;/b&gt; checkbox below
to prevent weakening the left side of assignments when the right side is not
a type cast or new expression. When storing the result of a method call in a variable, it is
useful to retain the type of the method call result instead of unnecessarily weakening it.
&lt;p&gt;
Enable the &lt;b&gt;Use parameterized type&lt;/b&gt; checkbox below
to use the parameterized type of the collection as weakest type when
the object evaluated is used as an argument to a collection method with a parameter type of
&lt;tt&gt;java.lang.Object&lt;/tt&gt;.
Use this option to prevent weakening to &lt;tt&gt;Object&lt;/tt&gt; when passing an object to the collection methods
&lt;tt&gt;get()&lt;/tt&gt;, &lt;tt&gt;remove()&lt;/tt&gt;,
&lt;tt&gt;contains()&lt;/tt&gt;, &lt;tt&gt;indexOf()&lt;/tt&gt;,
&lt;tt&gt;lastIndexOf()&lt;/tt&gt;, &lt;tt&gt;containsKey()&lt;/tt&gt; and &lt;tt&gt;containsValue()&lt;/tt&gt;.
&lt;p&gt;
Enable the &lt;b&gt;Do not weaken to Object&lt;/b&gt; checkbox below
to specify whether a type should be weakened to &lt;tt&gt;java.lang.Object&lt;/tt&gt;.
Weakening to &lt;tt&gt;java.lang.Object&lt;/tt&gt; is often not very useful.
&lt;p&gt;
Enable the &lt;b&gt;Only weaken to an interface&lt;/b&gt; checkbox below
to only report when the type can be weakened to an interface type.
&lt;p&gt;
Enable the &lt;b&gt;Do not weaken return type&lt;/b&gt; checkbox below
to prevent reporting when return type may be weakened.
Only variables will be analyzed.
&lt;p&gt;
&lt;b&gt;Stop classes&lt;/b&gt; are intended to prevent weakening to classes
lower than stop classes, even if it would be possible.
In some cases this may improve readability.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DeclareCollectionAsInterface" displayName="Collection declared by class, not interface" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on declarations of Collection variables made by using the collection class as the type,
rather than an appropriate interface.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FeatureEnvy" displayName="Feature envy" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports the &quot;Feature Envy&quot; code smell. Feature
envy is defined as occurring when a method calls methods on another class three
or more times. Calls to library classes, parent classes, contained or containing
classes are not counted for purposes of this inspection. Feature
envy is often an indication that functionality is located in the wrong class.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LocalVariableOfConcreteClass" displayName="Local variable of concrete class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any local variables whose type is declared to be a concrete class.
Such declarations may represent a failure of abstraction, and may make testing more difficult.
Declarations whose classes come from system or third-party libraries will not be reported by this inspection.
&lt;b&gt;catch&lt;/b&gt; block parameters of concrete exception type will also not be reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to have this inspection ignore local variables whose type is an abstract class.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceofInterfaces" displayName="&apos;instanceof&apos; a concrete class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on uses of &lt;b&gt;instanceof&lt;/b&gt; or &lt;b&gt;getClass() == SomeClass.class&lt;/b&gt; where the type checked for is a concrete class,
rather than an interface. Such uses often indicate excessive coupling to concrete implementations, rather
than abstractions. &lt;b&gt;instanceof&lt;/b&gt; expressions whose classes come from system or third-party libraries will not be reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to have this inspection ignore &lt;b&gt;instanceof&lt;/b&gt; on abstract classes.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="XPath">
    <inspection shortName="IndexZeroUsage" displayName="Use of index 0 in XPath predicates" enabled="false">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspection checks for any accidental use of zero in a predicate index or in a comparision with the function
  &lt;code&gt;position()&lt;/code&gt;. Such is almost always a bug because in XPath, the index starts at one, &lt;em&gt;not&lt;/em&gt; at zero.
&lt;/p&gt;

&lt;p&gt;
  Example:
&lt;/p&gt;

&lt;p&gt;
  &lt;code&gt;//someelement[&lt;b&gt;position() = 0&lt;/b&gt;]&lt;/code&gt; or &lt;code&gt;//something[&lt;b&gt;0&lt;/b&gt;]&lt;/code&gt;
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="HardwiredNamespacePrefix" displayName="Hardwired Namespace Prefix" enabled="false">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspection checks for comparisons of the &lt;tt&gt;name()&lt;/tt&gt;-function against strings that contain a &quot;:&quot; - which
  usually indicates a hardwired namespace-prefix in the comparison. Such code will break when run against XML that
  uses a different prefix for the same namespace.
&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;
  &lt;code&gt;&amp;lt;xsl:if test=&quot;name() = &apos;xlink:href&apos;&quot;&gt;...&amp;lt;xsl:if&gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantTypeConversion" displayName="Redundant Type Conversion" enabled="false">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspection checks whether any type-conversion with the functions &lt;code&gt;string()&lt;/code&gt;, &lt;code&gt;number()&lt;/code&gt; or
  &lt;code&gt;boolean()&lt;/code&gt; is redundant, i.e. whether the type of argument is the same as the functions return type or if
  the expected type of the expression is of type &quot;any&quot;. While such an explicit conversion may sometimes be intentional
  to emphasize the type, this can usually be safely removed.
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ImplicitTypeConversion" displayName="Implicit Type Conversion" enabled="false">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspection checks for any implicit conversions between the predefined XPath-types STRING, NUMBER, BOOLEAN and
  NODESET. While this is usually not a problem as the conversions are well-defined by the standard, this inspection can
  help to write XSLT scripts that are more expressive about types and can even help to avoid subtle bugs:
&lt;/p&gt;

&lt;p&gt;
  &lt;code&gt;&amp;lt;xsl:if test=&quot;&lt;b&gt;foo&lt;/b&gt;&quot; /&gt;&lt;/code&gt; is not the same as &lt;code&gt;&amp;lt;xsl:if test=&quot;&lt;b&gt;string(foo)&lt;/b&gt;&quot; /&gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
  The first test checks whether the element &quot;foo&quot; exists (&lt;code&gt;count(foo) &gt; 0)&lt;/code&gt;, the latter one however is only
  true if the element actually contains any text (&lt;code&gt;string-length(foo) &gt; 0&lt;/code&gt;). The plugin will then offer to
  make the type-conversion more explicit.
&lt;/p&gt;

&lt;p&gt;
  There are several options to adjust the inspection to personal preferences by offering the possibility to
  individually enable it for implicit conversions between certain types.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
  The plugin can also be told to always flag explicit conversions that do not result in the actually expected type, such
  as &lt;code&gt;&amp;lt;xsl:if test=&quot;number(foo)&quot; /&gt;&lt;/code&gt; and provides a special option to ignore the conversion from NODESET
  to BOOLEAN by using the &lt;code&gt;string()&lt;/code&gt; function as a shortcut for writing &lt;code&gt;string-length() &gt; 0&lt;/code&gt;.
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CheckNodeTest" displayName="Check Node Test" enabled="false">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspection checks whether any element/attribute names that are used in XPath-expressions are actually part of an
  associated XML file or are defined in a referenced schema. This helps to avoid problems caused by typos in
  XPath-expressions that would otherwise occur when running the script and may even then not be recognized immediately.
&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;
  &lt;code&gt;&amp;lt;xsl:template match=&quot;&lt;b&gt;h:txtarea&lt;/b&gt;&quot; /&gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
  If the prefix &quot;h&quot; is bound to the XHTML namespace, the inspection will flag this part of the match-expression as an
  unknown element name because the correct name of the element is &quot;textarea&quot;.
&lt;/p&gt;


&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Reflective access">
    <inspection shortName="JavaLangInvokeHandleSignature" displayName="MethodHandle/VarHandle type mismatch" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects the case where the signature of a MethodHandle or the type of a VarHandle doesn&apos;t match the actual method or field.
&lt;p&gt;It also checks that the arguments provided to MethodHandle.invoke(), VarHandle.set(), etc match the method signature/field type.
  &lt;!-- tooltip end --&gt;

&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  MethodHandle mh = MethodHandles.lookup().findVirtual(
      MyClass.class, &quot;foo&quot;, MethodType.methodType(void.class, int.class));
  &lt;i&gt;// the argument should be an &lt;b&gt;int&lt;/b&gt; value&lt;/i&gt;
  mh.invoke(myObj, &quot;&lt;b&gt;abc&lt;/b&gt;&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;i&gt;// the argument should be &lt;b&gt;String&lt;/b&gt;.class&lt;/i&gt;
  VarHandle vh = MethodHandles.lookup().findVarHandle(
      MyClass.class, &quot;text&quot;, &lt;b&gt;int&lt;/b&gt;.class);
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code&gt;
  VarHandle vh = MethodHandles.lookup().findVarHandle(
      MyClass.class, &quot;text&quot;, String.class);
  &lt;i&gt;// the argument should be a &lt;b&gt;String&lt;/b&gt; value&lt;/i&gt;
  vh.set(myObj, &lt;b&gt;42&lt;/b&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MetaAnnotationWithoutRuntimeRetention" displayName="Non-runtime annotation to be used by reflection" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Report meta annotations which are used by frameworks by reflection but their retention policy is not RUNTIME.
  If retention policy is missed, then default retention policy &apos;CLASS&apos; would be used, which means that annotations by default are not visible at runtime&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavaReflectionMemberAccess" displayName="Reflective access to nonexistent/not visible class member" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects reflective access to fields and methods which don&apos;t exist or aren&apos;t visible.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  With a &apos;final&apos; class it&apos;s clear if there&apos;s a field or method with the specified name in the class.
&lt;/p&gt;
&lt;p&gt;
  With non-final classes it&apos;s possible that a subclass has a field or method with that name, so there could be false positives.
  You may use the inspection settings to get rid of such false positives, everywhere or with specific classes.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Java9ReflectionClassVisibility" displayName="Reflective access across modules issues" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects reflective access to classes which aren&apos;t visible due to Java 9 module accessibility rules.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavaReflectionInvocation" displayName="Reflective invocation arguments mismatch" enabled="false">&lt;html&gt;
&lt;body&gt;
The inspection checks that the arguments provided to Method.invoke() and Constructor.newInstance()
match the signature specified in Class.getMethod() and Class.getConstructor()
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Method m = myObj.getClass().getMethod(&quot;myMethod&quot;, &lt;b&gt;int&lt;/b&gt;.class);
  &lt;i&gt;// the argument should be an &lt;b&gt;int&lt;/b&gt; value&lt;/i&gt;
  m.invoke(myObj, &quot;&lt;b&gt;abc&lt;/b&gt;&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Other problems">
    <inspection shortName="OverridingDeprecatedMember" displayName="Overriding deprecated member" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports deprecated members being overridden.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="KDocMissingDocumentation" displayName="Missing KDoc comments for public declarations" enabled="false">&lt;html&gt;&lt;body&gt;
This inspection reports public declarations that do not have KDoc comments.
&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="ReplaceWithEnumMap" displayName="Replace with EnumMap" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;hashMapOf&lt;/b&gt; and similar function calls replaceable with the constructor of &lt;b&gt;EnumMap&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DeprecatedCallableAddReplaceWith" displayName="@Deprecated annotation without &apos;replaceWith&apos; argument" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports deprecated functions and properties that do not have a &lt;b&gt;kotlin.ReplaceWith&lt;/b&gt; argument in its &lt;b&gt;kotlin.deprecated&lt;/b&gt; annotation
and there is a suggestion to add one based on the body.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PublicApiImplicitType" displayName="Public API declaration has implicit return type" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;public&lt;/b&gt; and &lt;b&gt;protected&lt;/b&gt; functions and properties that have an implicit return type.
For API stability reasons, it&apos;s recommended to specify such types explicitly.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MigrateDiagnosticSuppression" displayName="Diagnostic name should be replaced" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports suppressions with old diagnostic names, for example &lt;b&gt;@Suppress(&quot;HEADER_WITHOUT_IMPLEMENTATION&quot;)&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Plugin descriptor">
    <inspection shortName="InspectionMappingConsistency" displayName="&lt;inspection&gt; tag consistency" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks inspection mappings consistency.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PluginXmlCapitalization" displayName="Plugin.xml text capitalization" enabled="false">&lt;html&gt;
&lt;body&gt;
Highlights text capitalization problems in plugin.xml.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PluginXmlValidity" displayName="Plugin.xml validity" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection finds various problems in plugin.xml.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Kotlin">
    <inspection shortName="DifferentStdlibGradleVersion" displayName="Kotlin library and Gradle plugin versions are different" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports different kotlin stdlib and compiler versions that could lead to unpredictable issues.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="KotlinInvalidBundleOrProperty" displayName="Invalid property key" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports unresolved references to .properties file keys and resource bundles in Kotlin files.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DeprecatedMavenDependency" displayName="Deprecated library is used in Maven" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports that some deprecated dependency is used in Maven.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DifferentKotlinMavenVersion" displayName="Maven and IDE plugins versions are different" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports different IDE and Maven plugin versions are used.
This can cause inconsistencies between IDE and Maven build in error reporting or code behaviour.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DeprecatedGradleDependency" displayName="Deprecated library is used in Gradle" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports that some deprecated dependency is used in Gradle.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="KotlinTestJUnit" displayName="kotlin-test-junit could be used" enabled="false">&lt;html&gt;
&lt;body&gt;
If you have kotlin-test and junit dependency
then most likely you better to include kotlin-test-junit instead of just kotlin-test
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="KotlinMavenPluginPhase" displayName="Kotlin Maven Plugin misconfigured" enabled="false">Reports kotlin-maven-plugin configuration issues</inspection>
    <inspection shortName="DifferentKotlinGradleVersion" displayName="Kotlin Gradle and IDE plugins versions are different" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports that different IDE and Gradle plugin versions are used.
This can cause inconsistencies between IDE and Gradle builds in error reporting or code behaviour.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DifferentMavenStdlibVersion" displayName="Library and maven plugin versions are different" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports different kotlin stdlib and compiler versions that could lead to unpredictable issues
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Android Lint">
    <inspection shortName="PermissionUsageInspection" displayName="Permission Check for Location APIs" enabled="false">Description is under construction</inspection>
  </group>
  <group name="Other">
    <inspection shortName="TypeCustomizer" displayName="Type customizer inspection" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports files which can be custom type checkers and are not added to compiler resources yet.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Initialization">
    <inspection shortName="StaticVariableUninitializedUse" displayName="Static field used before initialization" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;static&lt;/b&gt; variables which are read prior to initialization.
Equality checks with &lt;b&gt;null&lt;/b&gt; are ignored by this inspection.
&lt;p&gt;
Note: This inspection uses a very conservative dataflow algorithm, and may report static variables
used uninitialized incorrectly. Variables reported as initialized will always be initialized.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to indicate whether you want uninitialized primitive fields to be reported.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DoubleBraceInitialization" displayName="Double brace initialization" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;a href=&quot;http://www.c2.com/cgi/wiki?DoubleBraceInitialization&quot;&gt;Double Brace Initialization&lt;/a&gt;.
Double brace initialization can cause memory leaks when used from a non-&lt;b&gt;static&lt;/b&gt; context,
because the anonymous &lt;b&gt;class&lt;/b&gt; created will maintain a reference to the surrounding object.
It has worse performance than regular initialization because of the additional class loading required.
It can cause &lt;b&gt;equals()&lt;/b&gt; comparisons to fail, if the &lt;b&gt;equals()&lt;/b&gt; method does not accept subclasses as parameter (see link above).
And finally, pre Java 9 it cannot be combined with the diamond operator, because that cannot be used with anonymous classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AbstractMethodCallInConstructor" displayName="Abstract method called during object construction" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any calls of &lt;b&gt;abstract&lt;/b&gt; methods of the current class during object construction.
A call is during object construction if it is made inside a constructor, in an non-static instance initializer,
in a non-static field initializer or inside a &lt;b&gt;clone()&lt;/b&gt;, &lt;b&gt;readObject()&lt;/b&gt; or &lt;b&gt;readObjectNoData()&lt;/b&gt; method.
Such calls may result in subtle bugs, as the object is not guaranteed to be initialized
before the method call occurs.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
The inspections &lt;i&gt;Overridable method called during object construction&lt;/i&gt;,
&lt;i&gt;Overridden method called during object construction&lt;/i&gt; and
&lt;i&gt;Abstract method called during object construction&lt;/i&gt; report overlapping problem sets and only one should be enabled at a time
to prevent duplicate warnings.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceVariableInitialization" displayName="Instance field may not be initialized" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports instance variables which are not guaranteed to be initialized upon object initialization.
&lt;p&gt;
Note: This inspection uses a very conservative dataflow algorithm, and may report instance variables
as uninitialized incorrectly. Variables reported as initialized will always be initialized.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to indicate whether you want uninitialized primitive fields to be reported.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonThreadSafeLazyInitialization" displayName="Unsafe lazy initialization of &apos;static&apos; field" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;static&lt;/b&gt; variables being lazily initialized
in a non-thread-safe manner. Lazy initialization of &lt;b&gt;static&lt;/b&gt; variables should be done
in an appropriate synchronization construct, to prevent different threads from
performing conflicting initialization.
&lt;p&gt;
If applicable, a quickfix is suggested
which introduces the static holder pattern described in
&lt;a href=&quot;http://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom&quot;&gt;
http://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom
&lt;/a&gt;
where the JVM guarantees the thread safety of such initializations.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverridableMethodCallDuringObjectConstruction" displayName="Overridable method called during object construction" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to overridable methods of the current class during object construction.
A call is during object construction if it is made inside a constructor, in an non-static instance initializer,
in a non-static field initializer or inside a &lt;b&gt;clone()&lt;/b&gt;, &lt;b&gt;readObject()&lt;/b&gt; or &lt;b&gt;readObjectNoData()&lt;/b&gt; method.
Methods are overridable if they are not declared &lt;b&gt;final&lt;/b&gt;, &lt;b&gt;static&lt;/b&gt; or &lt;b&gt;private&lt;/b&gt;.
Package local methods are considered safe, even though they are overridable.
Such calls may result in subtle bugs, as the object is not guaranteed to be initialized
before the method call occurs.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
The inspections &lt;i&gt;Overridable method called during object construction&lt;/i&gt;,
&lt;i&gt;Overridden method called during object construction&lt;/i&gt; and
&lt;i&gt;Abstract method called during object construction&lt;/i&gt; report overlapping problem sets and only one should be enabled at a time
to prevent duplicate warnings.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonFinalStaticVariableUsedInClassInitialization" displayName="Non-final static field is used during class initialization" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any uses of non-&lt;b&gt;final&lt;/b&gt; &lt;b&gt;static&lt;/b&gt; variables during initialization
of a class. Such uses may make the semantics of the code dependent on order of class
creation, may cause variables to be used before initialized, and generally cause
extremely difficult and confusing bugs.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticVariableInitialization" displayName="Static field may not be initialized" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;static&lt;/b&gt; variables which are not guaranteed to be initialized upon class initialization.
&lt;p&gt;
Note: This inspection uses a very conservative dataflow algorithm, and may report static variables
as uninitialized incorrectly. Variables reported as initialized will always be initialized.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
 Use the checkbox below to indicate whether you want uninitialized primitive fields to be reported.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceVariableUninitializedUse" displayName="Instance field used before initialization" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports instance variables which are read prior to initialization.
Equality checks with &lt;b&gt;null&lt;/b&gt; are ignored by this inspection.
&lt;p&gt;
Note: This inspection uses a very conservative dataflow algorithm, and may report instance variables
as uninitialized incorrectly. Variables reported as initialized will always be initialized.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the list below to specify special annotations. Fields annotated with one of
these annotations will be ignored by this inspection.
&lt;p&gt;
Use the checkbox below to indicate whether you want uninitialized primitive fields to be reported.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="OverriddenMethodCallDuringObjectConstruction" displayName="Overridden method called during object construction" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to overridden methods of the current class during object construction.
A call is made during object construction if it is performed in a constructor, in an non-static instance initializer,
in a non-static field initializer or in a &lt;b&gt;clone()&lt;/b&gt;, &lt;b&gt;readObject()&lt;/b&gt; or &lt;b&gt;readObjectNoData()&lt;/b&gt; method.
Such calls may result in subtle bugs, as the object is not guaranteed to be initialized
before the method call occurs.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
The inspections &lt;i&gt;Overridable method called during object construction&lt;/i&gt;,
&lt;i&gt;Overridden method called during object construction&lt;/i&gt; and
&lt;i&gt;Abstract method called during object construction&lt;/i&gt; report overlapping problem sets and only one should be enabled at a time
to prevent duplicate warnings.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThisEscapedInConstructor" displayName="&apos;this&apos; reference escaped in object construction" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports possible escapes of &lt;b&gt;this&lt;/b&gt;
during object construction. Escapes occur when &lt;b&gt;this&lt;/b&gt;
is used as a method argument or the object of an assignment in a constructor or
initializer. Such escapes may result in subtle bugs, as the object is now
available in a context in which it is not guaranteed to be initialized.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Redundant constructs">
    <inspection shortName="RedundantSetter" displayName="Redundant property setter" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports redundant property setters.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantSemicolon" displayName="Redundant semicolon" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports redundant semicolon (&lt;b&gt;;&lt;/b&gt;) tokens which are not required in Kotlin and may be removed.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CanBePrimaryConstructorProperty" displayName="Property is explicitly assigned to constructor parameter" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports properties which are explicitly assigned to constructor parameters and can be declared directly in the constructor instead.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantUnitReturnType" displayName="Redundant &apos;Unit&apos; return type" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a redundant &lt;b&gt;Unit&lt;/b&gt; return type which can be omitted.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantIf" displayName="Redundant &apos;if&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;if&lt;/b&gt; statements which can be simplified to single statements. For example:
&lt;br /&gt;&lt;br /&gt;

&lt;pre&gt;
&lt;b&gt;if&lt;/b&gt; (foo()) {
   &lt;b&gt;return true&lt;/b&gt;
} &lt;b&gt;else&lt;/b&gt; {
   &lt;b&gt;return false&lt;/b&gt;
}
&lt;/pre&gt;

&lt;p&gt;can be simplified to &lt;b&gt;return foo()&lt;/b&gt;.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnusedEquals" displayName="Unused equals expression" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports unused &lt;b&gt;equals&lt;/b&gt; expressions.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantLambdaArrow" displayName="Redundant lambda arrow" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports lambdas without parameters that use the lambda arrow.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="KotlinRedundantOverride" displayName="Redundant overriding method" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports redundant &lt;b&gt;override&lt;/b&gt; modifiers which can be omitted.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantWith" displayName="Redundant &apos;with&apos; call" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a redundant &lt;b&gt;with&lt;/b&gt; function call that don&apos;t access anything from the receiver.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RemoveExplicitSuperQualifier" displayName="Unnecessary supertype qualification" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;super&lt;/b&gt; member calls with redundant supertype qualification.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RemoveRedundantCallsOfConversionMethods" displayName="Remove redundant calls of conversion methods" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports redundant calls of conversion methods (for example, &lt;b&gt;toString()&lt;/b&gt; on a &lt;b&gt;String&lt;/b&gt;).
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RemoveCurlyBracesFromTemplate" displayName="Redundant curly braces in string template" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports usages of curly braces in a string template around a simple identifier.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NullChecksToSafeCall" displayName="Null-checks replaceable with safe-calls" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports when chained null-checks can be replaced with safe-calls.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RemoveEmptyPrimaryConstructor" displayName="Remove empty primary constructor" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects an empty primary constructor when it would be implicitly available anyway.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CanBeParameter" displayName="Constructor parameter is never used as a property" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports primary constructor parameters that can have &lt;b&gt;val&lt;/b&gt; or &lt;b&gt;var&lt;/b&gt; removed.
Unnecessary usage of &lt;b&gt;val&lt;/b&gt; or &lt;b&gt;var&lt;/b&gt; in the primary constructor consumes memory.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantSamConstructor" displayName="Redundant SAM constructor" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports SAM constructor usages which can be replaced with lambdas.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RemoveForLoopIndices" displayName="Unused loop index" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;for&lt;/b&gt; loops iterating over a collection of values using a &lt;b&gt;withIndex()&lt;/b&gt; function with index variable not used in the loop body.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RemoveRedundantQualifierName" displayName="Remove redundant qualifier name" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports redundant qualifier name in references. For example:
&lt;pre&gt;
&lt;b&gt;package&lt;/b&gt; my.simple.name
&lt;b&gt;class&lt;/b&gt; Foo

&lt;b&gt;fun&lt;/b&gt; test() {
    &lt;b&gt;val&lt;/b&gt; s = my.simple.name.Foo() // redundant qualifier name
}
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="KotlinDoubleNegation" displayName="Redundant double negation" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports redundant double negation usages, like &lt;b&gt;val truth = !!true&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantGetter" displayName="Redundant property getter" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports redundant property getters.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConstantConditionIf" displayName="Condition of &apos;if&apos; expression is constant" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;if&lt;/b&gt; expressions whose condition is constant and therefore the expression can be simplified.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RemoveSingleExpressionStringTemplate" displayName="Remove redundant string template" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports single-expression string templates that can be safely removed.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantCompanionReference" displayName="Redundant Companion reference" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports redundant &lt;b&gt;Companion&lt;/b&gt; reference, for example:
&lt;br /&gt;&lt;br /&gt;

&lt;pre&gt;
&lt;b&gt;class&lt;/b&gt; A {
    &lt;b&gt;companion object&lt;/b&gt; {
        &lt;b&gt;fun&lt;/b&gt; create() = &quot;Hello&quot;
    }
}
&lt;b&gt;fun&lt;/b&gt; test() {
    &lt;b&gt;val&lt;/b&gt; s = A.Companion.create() // redundant Companion reference
}
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ExplicitThis" displayName="Redundant explicit &apos;this&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports usages of explicit &lt;b&gt;this&lt;/b&gt; when it can be omitted.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnusedSymbol" displayName="Unused symbol" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReplaceSingleLineLet" displayName="Replace single line .let" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects a redundant &lt;b&gt;let&lt;/b&gt; when it includes only one call with lambda parameter as receiver.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RemoveEmptyParenthesesFromLambdaCall" displayName="Remove unnecessary parentheses from function call with lambda" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports unnecessary parentheses of function calls where the only parameter is a lambda that&apos;s outside the parentheses.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="KotlinUnusedImport" displayName="Unused import directive" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;import&lt;/b&gt; statements in Kotlin code that are unused.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RemoveRedundantBackticks" displayName="Remove redundant backticks" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports redundant backticks in references.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimplifyWhenWithBooleanConstantCondition" displayName="Simplifiable &apos;when&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects &lt;b&gt;when&lt;/b&gt; expressions with &lt;b&gt;true&lt;/b&gt; or &lt;b&gt;false&lt;/b&gt; branches that can be simplified.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantEnumConstructorInvocation" displayName="Redundant enum constructor invocation" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports redundant enum entry constructor invocation:

&lt;pre&gt;
enum class Foo {
    A(), // This &apos;()&apos; is redundant.
    B(),
    C
}
&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryVariable" displayName="Unnecessary local variable" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports local variables either used only in the very next &lt;b&gt;return&lt;/b&gt; statement or exact copies of other variables.
In both cases it&apos;s better to inline such a variable.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantReturnLabel" displayName="Redundant &apos;return&apos; label" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports redundant return label outside of lambda.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="WhenWithOnlyElse" displayName="&apos;when&apos; has only &apos;else&apos; branch and can be simplified" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;when&lt;/b&gt; expressions with only an &lt;b&gt;else&lt;/b&gt; branch that can be simplified to the &lt;b&gt;else&lt;/b&gt; branch&apos;s expression.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnusedReceiverParameter" displayName="Unused receiver parameter" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports an unused receiver parameter of extension functions and properties.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RemoveRedundantSpreadOperator" displayName="Redundant spread operator" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports the use of a redundant spread operator for a family of &lt;b&gt;arrayOf&lt;/b&gt; function calls.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RemoveToStringInStringTemplate" displayName="Remove redundant call to &apos;toString()&apos; in string template" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports calls to &lt;b&gt;toString()&lt;/b&gt; in string templates that can be safely removed.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantExplicitType" displayName="Explicitly given type is redundant here" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports local variables&apos; explicitly given types which are obvious and thus redundant, like &lt;b&gt;val f: Foo = Foo()&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RemoveExplicitTypeArguments" displayName="Unnecessary type argument" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports function calls with type arguments that can be safely removed and inferred.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantModalityModifier" displayName="Redundant modality modifier" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports modality modifiers which match the default modality of an element
(&lt;b&gt;final&lt;/b&gt; for most elements, &lt;b&gt;open&lt;/b&gt; for members with an &lt;b&gt;override&lt;/b&gt;).
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RemoveEmptySecondaryConstructorBody" displayName="Remove empty constructor body" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects empty bodies of secondary constructors.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RemoveSetterParameterType" displayName="Redundant setter parameter type" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports explicitly given parameter types in property setters.
A setter parameter type always matches the property type, so it&apos;s not required to be explicit.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantVisibilityModifier" displayName="Redundant visibility modifier" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports visibility modifiers which match the default visibility of an element
(&lt;b&gt;public&lt;/b&gt; for most elements, &lt;b&gt;protected&lt;/b&gt; for members that override a protected member).
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantRequireNotNullCall" displayName="Redundant &apos;requireNotNull&apos; or &apos;checkNotNull&apos; call" enabled="false">&lt;html&gt;
&lt;body&gt;This inspection reports redundant &lt;b&gt;requireNotNull&lt;/b&gt; or &lt;b&gt;checkNotNull&lt;/b&gt; call:

&lt;pre&gt;
fun foo(i: Int) {
  requireNotNull(i) // This &apos;i&apos; is always not null, so this &apos;requireNotNull&apos; call is redundant.
}
&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantSuspendModifier" displayName="Redundant &apos;suspend&apos; modifier" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a &lt;b&gt;suspend&lt;/b&gt; modifier as redundant if no other suspend functions are called inside.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RemoveEmptyClassBody" displayName="Replace empty class body" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports and offers to remove an empty class body.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantUnitExpression" displayName="Redundant &apos;Unit&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports a redundant &lt;b&gt;Unit&lt;/b&gt; type specification which can be omitted.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Serialization issues">
    <inspection shortName="SerializableHasSerializationMethods" displayName="Serializable class without &apos;readObject()&apos; and &apos;writeObject()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;Serializable&lt;/b&gt; classes
which do not provide &lt;b&gt;readObject&lt;/b&gt; and
&lt;b&gt;writeObject&lt;/b&gt; methods. If &lt;b&gt;readObject&lt;/b&gt;
and &lt;b&gt;writeObject&lt;/b&gt; methods are not provided, the default serialization
algorithms are used, which may be sub-optimal in many environments for performance and compatibility
purposes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify what specific classes and inheritors should be excluded
from being checked by this inspection. This is meant for those classes which, although they inherit
Serializable from a superclass, are not intended for serialization. Such classes would lead this
inspection to report unnecessarily.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SerialVersionUIDNotStaticFinal" displayName="&apos;serialVersionUID&apos; field not declared &apos;private static final long&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;Serializable&lt;/b&gt; classes whose &lt;b&gt;serialVersionUID&lt;/b&gt; field
is not declared &lt;b&gt;private static final long&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonSerializableWithSerializationMethods" displayName="Non-serializable class with &apos;readObject()&apos; or &apos;writeObject()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;b&gt;Serializable&lt;/b&gt; classes which define &lt;b&gt;readObject()&lt;/b&gt;
or &lt;b&gt;writeObject()&lt;/b&gt; methods. Such methods normally indicate programmer error.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExternalizableWithoutPublicNoArgConstructor" displayName="Externalizable class without &apos;public&apos; no-arg constructor" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;b&gt;Externalizable&lt;/b&gt; classes without a public no-argument constructor.
When an Externalizable object is reconstructed, an instance is created using the public no-arg constructor before the readExternal
method called. If a public no-arg constructor is not present a &lt;b&gt;java.io.InvalidClassException&lt;/b&gt; will be thrown at runtime.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SerialPersistentFieldsWithWrongSignature" displayName="&apos;serialPersistentFields&apos; field not declared &apos;private static final ObjectStreamField[]&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;Serializable&lt;/b&gt; classes whose &lt;b&gt;serialPersistentFields&lt;/b&gt; field.
is not declared &lt;b&gt;private static final ObjectStreamField[]&lt;/b&gt;.
If the &lt;b&gt;serialPersistentFields&lt;/b&gt; field does not have these modifiers,
the serialization behavior will be as if the field were not declared at all.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExternalizableWithSerializationMethods" displayName="Externalizable class with &apos;readObject()&apos; or &apos;writeObject()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;Externalizable&lt;/b&gt; classes which define &lt;b&gt;readObject()&lt;/b&gt;
or &lt;b&gt;writeObject()&lt;/b&gt; methods. These methods are not called for serialization of
&lt;b&gt;Externalizable&lt;/b&gt; objects.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReadObjectAndWriteObjectPrivate" displayName="&apos;readObject()&apos; or &apos;writeObject()&apos; not declared &apos;private&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;Serializable&lt;/b&gt; classes where the &lt;b&gt;readObject&lt;/b&gt;
and &lt;b&gt;writeObject()&lt;/b&gt; methods are not declared &lt;b&gt;private&lt;/b&gt;. There is no reason these methods should ever
have greater visibility than that.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonSerializableObjectPassedToObjectStream" displayName="Non-serializable object passed to ObjectOutputStream" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;b&gt;Serializable&lt;/b&gt; objects used as arguments to
&lt;b&gt;java.io.ObjectOutputStream.write()&lt;/b&gt;. Such calls will result in runtime exceptions.
For purposes of this inspection, objects with &lt;b&gt;java.util.Collection&lt;/b&gt; or
&lt;b&gt;java.util.Map&lt;/b&gt; types are assumed to be &lt;b&gt;Serializable&lt;/b&gt;, unless the types
they are declared to contain are non-&lt;b&gt;Serializable&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReadObjectInitialization" displayName="Instance field may not be initialized by &apos;readObject()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports variables which are not guaranteed to be initialized after the object is
deserialized by the &lt;b&gt;readObject()&lt;/b&gt; method.
&lt;p&gt;
Note: This inspection uses a very conservative dataflow algorithm, and may report instance variables
as uninitialized incorrectly. Variables reported as initialized will always be initialized.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ComparatorNotSerializable" displayName="Comparator class not declared Serializable" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on subclasses of &lt;b&gt;java.lang.Comparator&lt;/b&gt; which are not
also &lt;b&gt;Serializable&lt;/b&gt;. Objects of &lt;b&gt;java.util.TreeMap&lt;/b&gt;
or &lt;b&gt;java.util.TreeSet&lt;/b&gt; will become non-&lt;b&gt;Serializable&lt;/b&gt;
if instantiated with such &lt;b&gt;Comparator&lt;/b&gt;s. This can result in unexpected and difficult-to-diagnose
bugs. Since subclasses of &lt;b&gt;java.lang.Comparator&lt;/b&gt; are often stateless, simply marking
them &lt;b&gt;Serializable&lt;/b&gt; is a small cost to avoid such issues.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SerializableInnerClassHasSerialVersionUIDField" displayName="Serializable non-&apos;static&apos; inner class without &apos;serialVersionUID&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;Serializable&lt;/b&gt; non-static
inner classes which do not provide a &lt;b&gt;serialVersionUID&lt;/b&gt; field.
Without a &lt;b&gt;serialVersionUID&lt;/b&gt; field, any change to a class will make previously serialized versions unreadable.
It is strongly recommended that &lt;b&gt;Serializable&lt;/b&gt; non-static inner classes have
a &lt;b&gt;serialVersionUID&lt;/b&gt; field, otherwise the default serialization algorithm
may result in serialized versions being incompatible between compilers, due to differences in synthetic
accessor methods.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify what specific classes and inheritors should be excluded
from being checked by this inspection. This is meant for those classes which, although they inherit
Serializable from a superclass, are not intended for serialization. Such classes would lead this
inspection to report unnecessarily.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TransientFieldNotInitialized" displayName="Transient field is not initialized on deserialization" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;transient&lt;/b&gt; fields which
are initialized during normal object construction, but whose class does not have a
&lt;b&gt;readObject&lt;/b&gt; method.
Because &lt;b&gt;transient&lt;/b&gt; fields are not serialized they need
to be initialized separately in a &lt;b&gt;readObject&lt;/b&gt; method
during deserialization. Any &lt;b&gt;transient&lt;/b&gt; fields which 
are not initialized during normal object construction are considered to use the default
initialization and are not reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SerializableStoresNonSerializable" displayName="Serializable object implicitly stores non-Serializable object" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks lambda&apos;s, local and anonymous classes and reports references to local variables outside the class or lambda that are not
&lt;b&gt;Serializable&lt;/b&gt;.
When a local variable is referenced from an anonymous class, it&apos;s value is stored in an implicit field in the anonymous class.
The same happens for local classes and lambda&apos;s.
If that variable is of a non-Serializable type, serialization will fail.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SerializableWithUnconstructableAncestor" displayName="Serializable class with unconstructable ancestor" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;Serializable&lt;/b&gt; classes whose closest non-serializable ancestor lacks
a no-argument constructor. Such classes can not be deserialized.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonSerializableWithSerialVersionUIDField" displayName="Non-serializable class with &apos;serialVersionUID&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;b&gt;Serializable&lt;/b&gt; classes which define a &lt;b&gt;serialVersionUID&lt;/b&gt;
field. This is usually an indication of a programmer error.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SerializableHasSerialVersionUIDField" displayName="Serializable class without &apos;serialVersionUID&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;Serializable&lt;/b&gt; classes which do not provide a &lt;b&gt;serialVersionUID&lt;/b&gt; field.
Without a &lt;b&gt;serialVersionUID&lt;/b&gt; field, any change to a class will make previously serialized versions unreadable.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify what specific classes and inheritors should be excluded
from being checked by this inspection. This is meant for those classes which, although they inherit
Serializable from a superclass, are not intended for serialization. Such classes would lead this
inspection to report unnecessarily.
&lt;p&gt;
Use the checkbox below to ignore &lt;b&gt;Serializable&lt;/b&gt; anonymous classes.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonSerializableFieldInSerializableClass" displayName="Non-serializable field in a Serializable class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;b&gt;Serializable&lt;/b&gt;
fields in &lt;b&gt;Serializable&lt;/b&gt; classes. Such fields will result
in runtime exceptions if the object is serialized. Fields declared
&lt;b&gt;transient&lt;/b&gt; or &lt;b&gt;static&lt;/b&gt;
are not reported, nor are fields of classes which have defined a &lt;b&gt;writeObject&lt;/b&gt;
method. For purposes of this inspection, fields with
&lt;b&gt;java.util.Collection&lt;/b&gt; or
&lt;b&gt;java.util.Map&lt;/b&gt; types are assumed to be
&lt;b&gt;Serializable&lt;/b&gt;, unless the types
they are declared to contain are non-&lt;b&gt;Serializable&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first list below to specify what specific classes and inheritors should be excluded
from being checked by this inspection. This is meant for those classes which, although they inherit
Serializable from a superclass, are not intended for serialization. Such classes would lead this
inspection to report unnecessarily.
&lt;p&gt;
Use the second list below to specify special annotations. Fields annotated with one of
these annotations will be ignored by this inspection.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReadResolveAndWriteReplaceProtected" displayName="&apos;readResolve()&apos; or &apos;writeReplace()&apos; not declared &apos;protected&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;Serializable&lt;/b&gt; classes where the &lt;b&gt;readResolve()&lt;/b&gt;
and &lt;b&gt;writeReplace()&lt;/b&gt; methods are not declared &lt;b&gt;protected&lt;/b&gt;. Note: in the case
of classes declared &lt;b&gt;final&lt;/b&gt;, these methods may be
declared &lt;b&gt;private&lt;/b&gt;, instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TransientFieldInNonSerializableClass" displayName="Transient field in non-serializable class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;transient&lt;/b&gt; fields in non-&lt;b&gt;Serializable&lt;/b&gt; classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SerializableInnerClassWithNonSerializableOuterClass" displayName="Serializable non-&apos;static&apos; inner class with non-Serializable outer class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;Serializable&lt;/b&gt; non-static
inner classes whose outer classes are non-&lt;b&gt;Serializable&lt;/b&gt;. Such classes
are unlikely to serialize correctly, due to implicit references from the inner to outer class.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify what specific classes and inheritors should be excluded
from being checked by this inspection. This is meant for those classes which, although they inherit
Serializable from a superclass, are not intended for serialization. Such classes would lead this
inspection to report unnecessarily.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonSerializableObjectBoundToHttpSession" displayName="Non-serializable object bound to HttpSession" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;b&gt;Serializable&lt;/b&gt; objects used as arguments to
&lt;b&gt;javax.servlet.http.HttpSession.setAttribute()&lt;/b&gt; or
&lt;b&gt;javax.servlet.http.HttpSession.putValue()&lt;/b&gt;.
Such objects will not be serialized if the HttpSession is passivated or migrated, and may result in difficult-to-diagnose
bugs. For purposes of this inspection, objects with &lt;b&gt;java.util.Collection&lt;/b&gt; or
&lt;b&gt;java.util.Map&lt;/b&gt; types are assumed to be &lt;b&gt;Serializable&lt;/b&gt;, unless the types
they are declared to contain are non-&lt;b&gt;Serializable&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="HTML">
    <inspection shortName="HtmlUnknownAttribute" displayName="Unknown HTML tag attribute" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection highlights unknown HTML tag attributes as invalid, and lets mark such attributes as Custom to avoid highlighting them as
invalid. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlUnknownAnchorTarget" displayName="Anchor reference problems" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks unresolved anchor references in HTML. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlUnknownTarget" displayName="File reference problems" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks unresolved file references in HTML. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlExtraClosingTag" displayName="Redundant closing tag for HTML element" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection spots extra closing tag for the empty elements like IMG or BR. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckValidXmlInScriptTagBody" displayName="Malformed content of &lt;script&gt; tag" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks that the &lt;b&gt;script&lt;/b&gt; tag content is valid XML. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlUnknownBooleanAttribute" displayName="Unknown HTML boolean tag attribute" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection highlights HTML non-boolean tag attributes without value as invalid, and lets mark such attributes as Custom to avoid highlighting them as
invalid.&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RequiredAttributes" displayName="Missing required attribute" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports XML/HTML tags with missing mandatory attributes.
You can specify attribute names that should not be reported.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CheckEmptyScriptTag" displayName="Empty tag" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports empty tags (like &lt;b&gt;script&lt;/b&gt; ) that do not work in some browsers.
The validation works in html or jsp file types. &lt;br&gt;


&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlUnknownTag" displayName="Unknown HTML tag" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection highlights unknown HTML tags, and lets mark such tags as Custom to avoid highlighting them as unknown in future. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlMissingClosingTag" displayName="Missing closing tag" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports HTML elements without a closing tag.
Some coding styles require a closing tag on HTML elements even where this is optional.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Pattern validation">
    <inspection shortName="PatternNotApplicable" displayName="Pattern Annotation not applicable" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;

      &lt;p&gt;
        Checks whether a pattern-validation annotation (&lt;code&gt;@Pattern&lt;/code&gt; or derived ones)
        is valid to be applied to the annotated element. Only elements of type &lt;code&gt;String&lt;/code&gt;
        may be annotated.
      &lt;/p&gt;

    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td height=&quot;20&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-2&quot;&gt;&lt;p id=&quot;footer&quot;&gt;Powered by IntelliLang&lt;/p&gt;&lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PatternValidation" displayName="Validate annotated patterns" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;

      &lt;p&gt;
        Provides on-the-fly validation for expressions passed as argments for &lt;code&gt;@Pattern&lt;/code&gt; parameters and
        values returned from &lt;code&gt;@Pattern&lt;/code&gt;-annotated methods.
      &lt;/p&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td height=&quot;20&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-2&quot;&gt;
        &lt;p id=&quot;footer&quot;&gt;Powered by IntelliLang&lt;/p&gt;&lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PatternOverriddenByNonAnnotatedMethod" displayName="Non-annotated Method overrides @Pattern Method" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;

      &lt;p&gt;
        This inspecton Checks whether a method without any &lt;code&gt;@Pattern&lt;/code&gt; or derived annotation overrides an annotated
        method from its base classes. This is not necessary for the error-highlighting inside the editor, however the
        runtime-check instrumentation doesn&apos;t pick up annotations from base-class methods.
      &lt;/p&gt;

      &lt;p&gt;
        A QuickFix is provided to add an annotation that matches the one from the base-class method. This ensures the
        runtime-check instrumentation works correctly.
      &lt;/p&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td height=&quot;20&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-2&quot;&gt;&lt;p id=&quot;footer&quot;&gt;Powered by IntelliLang&lt;/p&gt;&lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="YAML">
    <inspection shortName="YAMLRecursiveAlias" displayName="Recursive alias" enabled="false">&lt;html&gt;
&lt;body&gt;
Alias can&apos;t be recursive and used inside data referenced by corresponding anchor
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="YAMLUnusedAnchor" displayName="Unused anchor" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection highlights unused anchors.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="YAMLUnresolvedAlias" displayName="Unresolved alias" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection warns about unresolved aliases in yaml files
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="YAMLSchemaValidation" displayName="Validation by JSON Schema" enabled="false">&lt;html&gt;
&lt;body&gt;
Validates YAML file against a JSON Schema, if the schema is specified
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="YAMLSchemaDeprecation" displayName="Deprecated YAML key" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks for deprecated keys in YAML files&lt;br&gt;
Deprecation is checked only if there exists a JSON schema associated with corresponding YAML file.&lt;br&gt;
Note that deprecation mechanism is not defined in the JSON Schema specification yet,
and this inspection uses a non-standard extension &apos;deprecationMessage&apos;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="YAMLDuplicatedKeys" displayName="Duplicated YAML keys" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects duplicated keys in YAML files and highlights them in the editor.
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Data flow">
    <inspection shortName="BooleanVariableAlwaysNegated" displayName="Boolean variable is always inverted" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any boolean variables or fields which are always negated
when its value is used.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyMissingReturnStatement" displayName="Missing return statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports missing &lt;b&gt;return&lt;/b&gt; statements at the end of methods with a non-&lt;b&gt;void&lt;/b&gt; return type.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnnecessaryLocalVariable" displayName="Redundant local variable" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary local variables, which add
nothing to the comprehensibility of a method. Variables caught include local variables
which are immediately returned, local variables that are immediately assigned to another
variable and then not used, and local variables which always have the same value as another
local variable or parameter.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to have this inspection ignore variables which are immediately
returned or thrown. Some coding styles suggest using such variables for clarity and
ease of debugging.
&lt;p&gt;
Use the second checkbox below to have this inspection ignore variable which are annotated.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantValueVariableUse" displayName="Use of variable whose value is known to be constant" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any uses of variables which are known to be constant. This
is the case if the (read) use of the variable is surrounded by an
&lt;b&gt;if&lt;/b&gt;, &lt;b&gt;while&lt;/b&gt; or &lt;b&gt;for&lt;/b&gt;
statement with an &lt;b&gt;==&lt;/b&gt; condition which compares the variable with a constant. In such
a case the use
of a variable which is known to be constant can be replaced with the actual constant.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LawOfDemeter" displayName="Method call violates Law of Demeter" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any Law of Demeter violations.
See here &lt;a href=&quot;http://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;http://en.wikipedia.org/wiki/Law_of_Demeter&lt;/a&gt;
for an explanation what the Law of Demeter is.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BooleanMethodIsAlwaysInverted" displayName="Boolean method is always inverted" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods with a &lt;b&gt;boolean&lt;/b&gt; return type, which are only used in a negated context.
Due to performance reasons some methods might not be reported during in-editor highlighting.
&lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;
&lt;b&gt;class&lt;/b&gt; C {
  &lt;b&gt;boolean&lt;/b&gt; inverted() {
    &lt;b&gt;return&lt;/b&gt; &lt;b&gt;true&lt;/b&gt;;
  }

  &lt;b&gt;void&lt;/b&gt; f() {
    &lt;b&gt;if&lt;/b&gt; (!inverted()) {
      &lt;b&gt;return&lt;/b&gt;;
    }
  }
  &lt;b&gt;boolean&lt;/b&gt; member = !inverted();
}  
&lt;/pre&gt;&lt;/code&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyVariableCanBeFinal" displayName="Variable can be final" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports local variables or parameters that can be final.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReuseOfLocalVariable" displayName="Reuse of local variable" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports local variables that are &quot;reused&quot;, overwriting their
values with new values unrelated to their original use. Such local variable reuse may be confusing,
as the intended semantics of the local variable may vary with each use. It may also be
prone to bugs, if code changes result in values that were thought to be overwritten actually
being live. It is good practices to keep variable lifetimes as short as possible, and not
reuse local variables for the sake of brevity.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyUnusedAssignment" displayName="Unused assignment" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary assignments.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NegativelyNamedBooleanVariable" displayName="Negatively named boolean variable" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports negatively named variables, for example &apos;disabled&apos;, &apos;hidden&apos;, &apos;isNotChanged&apos;.
It is usually more clear to invert the &lt;b&gt;boolean&lt;/b&gt; value and remove the negation from the name.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TooBroadScope" displayName="Scope of variable is too broad" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any variable declarations which can be moved to a smaller scope. Especially
useful for &lt;i&gt;Pascal style&lt;/i&gt; declarations at the start of a method, but variables with too broad
a scope are also often left over after refactorings.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to only report variables that can be moved inside deeper code blocks.
&lt;p&gt;
Use the second checkbox below to report variables which are initialized
with a new expression. This makes the inspection potentially unsafe in cases where the
constructor has non-local side-effects.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyVariableNotAssigned" displayName="Variable Not assigned" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports variables that might not have been initialized.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyUnusedIncOrDec" displayName="Unused incrementing or decrementing" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on unnecessary incrementing and decrementing expressions.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Shell Script">
    <inspection shortName="ShellCheck" displayName="ShellCheck" enabled="false">&lt;html&gt;
&lt;body&gt;
ShellCheck. &lt;p&gt;A shell script static analysis tool. &lt;a href=&quot;https://github.com/koalaman/shellcheck&quot;&gt;https://github.com/koalaman/shellcheck&lt;/a&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Code style issues">
    <inspection shortName="ConstantExpression" displayName="Constant expression can be evaluated" enabled="false">&lt;html&gt;
&lt;body&gt;
Allows you to replace compile-time constant expression with its actual value (e.g. &quot;2 + 2&quot; with &quot;4&quot;).
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryConstantArrayCreationExpression" displayName="Redundant &apos;new&apos; expression in constant array creation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any constant new array expression, like &lt;code&gt;int[] a = new int[]{42}&lt;/code&gt; which can be replaced
with an array initializer, e.g. &lt;code&gt;int[] a = {42}&lt;/code&gt;. Array initializers omit the type declaration because
that is already specified by the declaration of the variable the expression is
assigned to.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SwitchLabeledRuleCanBeCodeBlock" displayName="Labeled switch rule can have code block" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports rules of &lt;code&gt;switch&lt;/code&gt; expression or enhanced &lt;code&gt;switch&lt;/code&gt; statement which can be converted to a code block.&lt;br&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 12 Preview&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnqualifiedStaticUsage" displayName="Unqualified static access" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports static method calls or field accesses that are not qualified
with the class name of the static method. This is legal if the static method or field is in
the same class as the call, but may be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TryStatementWithMultipleResources" displayName="&apos;try&apos; statement with multiple resources can be split" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;try&lt;/b&gt; statements with multiple resources.
&lt;p&gt;The quick fix suggests to split such statements into nested &lt;b&gt;try-with-resources&lt;/b&gt; statements.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example of &lt;b&gt;try&lt;/b&gt; statement with multiple resources:
&lt;pre&gt;&lt;code&gt;try (FileInputStream in = new FileInputStream(&quot;in.txt&quot;);
     FileOutputStream out = new FileOutputStream(&quot;out.txt&quot;)) {
  /*read and write*/
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The example above is transformed into the following:
&lt;pre&gt;&lt;code&gt;try (FileInputStream in = new FileInputStream(&quot;in.txt&quot;)) {
  try (FileOutputStream out = new FileOutputStream(&quot;out.txt&quot;)) {
    /*read and write*/
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="OptionalAssignedToNull" displayName="Null value for Optional type" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection warns when &lt;code&gt;null&lt;/code&gt; is assigned to &lt;code&gt;Optional&lt;/code&gt; variable or returned from method returning
  &lt;code&gt;Optional&lt;/code&gt;. It&apos;s recommended to use &lt;code&gt;Optional.empty()&lt;/code&gt; (or &lt;code&gt;Optional.absent()&lt;/code&gt; for Guava) to denote
  an empty value.
&lt;p&gt;
  Use checkbox below to report also comparisons like &lt;b&gt;optional == null&lt;/b&gt;. While in rare cases (e.g. lazily initialized optional field)
  this might be correct, usually optional variable is never null, and probably &lt;b&gt;optional.isPresent()&lt;/b&gt; was intended.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 8 or higher&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MultipleVariablesInDeclaration" displayName="Multiple variables in one declaration" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports multiple variables declared in a single declaration.
Some coding standards prohibit such declarations.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to ignore multiple variables declared in the initialization of a &apos;for&apos; loop statement, e.g.:
&lt;pre&gt;&lt;code&gt;&lt;b&gt;for&lt;/b&gt; (int i = 0, max = list.size(); i &lt; max; i++) {}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Use the second checkbox below to only warn when variables with different array dimensions are declared in a single declaration, e.g.:
&lt;pre&gt;&lt;code&gt;String s = &quot;&quot;, array[];&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;small&gt;New in 2019.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NestedMethodCall" displayName="Nested method call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports method calls used as parameters of another
method call.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to ignore method calls in field initializers.
&lt;p&gt;
Use the second checkbox below to ignore calls to static methods.
&lt;p&gt;
Use the third checkbox below to ignore calls to simple getters.

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryEnumModifier" displayName="Unnecessary enum modifier" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on any redundant modifiers on enumerated classes or components of
enumerated classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExtendsObject" displayName="Class explicitly extends &apos;java.lang.Object&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any classes explicitly declared to extend &lt;b&gt;java.lang.Object&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LambdaParameterTypeCanBeSpecified" displayName="Lambda parameter type can be specified" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports lambda parameters which don&apos;t have their type specified, e.g. &lt;code&gt;a&amp;nbsp;-&gt;&amp;nbsp;a&amp;nbsp;+&amp;nbsp;1&lt;/code&gt;
&lt;p&gt;The quick fix adds type declaration to the lambda parameters, the result looks like this:
  &lt;code&gt;(int&amp;nbsp;a)&amp;nbsp;-&gt;&amp;nbsp;a&amp;nbsp;+&amp;nbsp;1&lt;/code&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ImplicitCallToSuper" displayName="Implicit call to &apos;super()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports constructors which do not begin with calls to &quot;super&quot; constructor, or
other constructors of the same class. Such constructors can be thought of as implicitly beginning with a
call to &lt;b&gt;super()&lt;/b&gt;. Some coding standards prefer that such calls to
&lt;b&gt;super()&lt;/b&gt; be made explicitly.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnqualifiedInnerClassAccess" displayName="Unqualified inner class access" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any references to inner classes which are not qualified with the name
of the enclosing class.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore references to inner classes contained within the same class, which therefore do not require an import.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SizeReplaceableByIsEmpty" displayName="&apos;size() == 0&apos; replaceable with &apos;isEmpty()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;.size()&lt;/b&gt; or &lt;b&gt;.length()&lt;/b&gt;
comparisons with a &lt;b&gt;0&lt;/b&gt; literal which can be replaced with a call to &lt;b&gt;.isEmpty()&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to add classes for which any &lt;b&gt;.size()&lt;/b&gt; or &lt;b&gt;.length()&lt;/b&gt; comparisons should not be replaced.
&lt;p&gt;
Use the checkbox below to ignore any expressions which would be replaced with &apos;!isEmpty()&apos;.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OptionalContainsCollection" displayName="&apos;Optional&apos; contains array or collection" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;java.util.Optional&lt;/b&gt; or &lt;b&gt;com.google.common.base.Optional&lt;/b&gt; types with an array or collection type parameter.
In such cases it is more clear to just use an empty array or collection to indicate no result.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 16&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LambdaBodyCanBeCodeBlock" displayName="Lambda body can be code block" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports lambdas which body is an expression, e.g. &lt;code&gt;n&amp;nbsp;-&amp;gt;&amp;nbsp;n&amp;nbsp;+&amp;nbsp;1&lt;/code&gt;
&lt;p&gt;The quick fix converts lambda&apos;s expression body to a code block, like the following:
&lt;pre&gt;&lt;code&gt;n -&amp;gt; {
  return n + 1;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FuseStreamOperations" displayName="Subsequent steps can be fused into Stream API chain" enabled="false">&lt;html&gt;
&lt;body&gt;
Detects when some transformations are performed on Stream API result which could be incorporated into the Stream API call chain directly. E.g.:
&lt;pre&gt;
  List&amp;lt;String&amp;gt; list = stream.collect(Collectors.toList());
  list.sort(null);
  return list.toArray(new String[list.size()]);
&lt;/pre&gt;
Could be converted to
&lt;pre&gt;
  return stream.sorted().toArray(String[]::new);
&lt;/pre&gt;
&lt;p&gt;
  Note that sometimes converted stream chain may replace explicit &lt;b&gt;ArrayList&lt;/b&gt; with &lt;b&gt;Collectors.toList()&lt;/b&gt; or explicit
  &lt;b&gt;HashSet&lt;/b&gt; with &lt;b&gt;Collectors.toSet()&lt;/b&gt;. While current library implementation uses these collections internally,
  this is not specified, thus can be changed in future possibly changing the semantics of your code. If you are concerned about this,
  use the checkbox below to suppress usages of &lt;b&gt;toList&lt;/b&gt; and &lt;b&gt;toSet&lt;/b&gt; collectors. In this case &lt;b&gt;Collectors.toCollection()&lt;/b&gt;
  will be suggested instead.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnqualifiedFieldAccess" displayName="Instance field access not qualified with &apos;this&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on field accesses which are not qualified with
&lt;b&gt;this&lt;/b&gt; or some other qualifier. Some coding styles
mandate that all field accesses are qualified to prevent confusion with local
variable or parameter accesses.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ChainedEquality" displayName="Chained equality comparisons" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports chained equality comparisons (i.e. &lt;b&gt;a==b==c&lt;/b&gt;).
Such comparisons are confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MissortedModifiers" displayName="Missorted modifiers" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on declarations whose modifiers are not in the canonical
preferred order (as stated in the Java Language Specification).
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to specify that annotations should always be sorted before keyword modifiers.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BlockMarkerComments" displayName="Block marker comment" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports comments which are used as code block markers. For example:&lt;br&gt;
&lt;pre&gt;&lt;code&gt;
  while (i &amp;lt; 10) {
    i++;
  } &lt;b&gt;// end while&lt;/b&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ControlFlowStatementWithoutBraces" displayName="Control flow statement without braces" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;if&lt;/b&gt;,
&lt;b&gt;while&lt;/b&gt; or &lt;b&gt;for&lt;/b&gt;
statements without braces. Braces make the code easier to read and help prevent
errors when modifying the code.
&lt;p&gt;The quick fix for the inspection wraps the statement body with braces.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessarySuperConstructor" displayName="Unnecessary call to &apos;super()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any no-argument calls to a superclass
constructor as the first call of a constructor. Such calls are unnecessary, and may be removed.&lt;p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantOnWrongSideOfComparison" displayName="Constant on the wrong side of comparison" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on comparison operations with the constant value on the wrong side.
Some coding conventions specify that constants should be on a specific side of a comparison, either left or right.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2019.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeParameterExtendsObject" displayName="Type parameter explicitly extends &apos;java.lang.Object&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any type parameters and wildcard type arguments explicitly declared to extend &lt;b&gt;java.lang.Object&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DiamondCanBeReplacedWithExplicitTypeArguments" displayName="Diamond can be replaced with explicit type arguments" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports instantiation of generic classes where &lt;b&gt;&amp;lt;&amp;gt;&lt;/b&gt; (diamond) is used instead of type parameters.
&lt;p&gt;The quick fix replaces the &lt;b&gt;&amp;lt;&amp;gt;&lt;/b&gt; (diamond) with the explicit type parameters.
&lt;p&gt;Example of use of the diamond:
&lt;pre&gt;&lt;code&gt;List &amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The statement above is replaced with the following:
&lt;pre&gt;&lt;code&gt;List &amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;()&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodRefCanBeReplacedWithLambda" displayName="Method reference can be replaced with lambda" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports method references, like &lt;code&gt;MyClass::myMethod&lt;/code&gt; and &lt;code&gt;myObject::myMethod&lt;/code&gt;.
&lt;p&gt; The quick fix for the inspection replaces the method reference with an equivalent lambda expression that invokes the method.
&lt;p&gt;For example, the method reference &lt;code&gt;System.out::println&lt;/code&gt; is replaced with
&lt;code&gt;s&amp;nbsp;-&gt;&amp;nbsp;System.out.println(s)&lt;/code&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CallToStringConcatCanBeReplacedByOperator" displayName="Call to &apos;String.concat()&apos; can be replaced with &apos;+&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to the &lt;b&gt;concat&lt;/b&gt; method
of a &lt;b&gt;java.lang.String&lt;/b&gt; object. Such calls can be
replaced with the &apos;+&apos; operator for increased code clarity and possible increased
performance if the method was invoked on a constant with a constant argument.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ArrayCreationWithoutNewKeyword" displayName="Array creation without &apos;new&apos; expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports array initializer without new array expression, like &lt;code&gt;int[] a = {42}&lt;/code&gt;.
&lt;p&gt;The quick fix for this inspection adds a new array expression to the initializer, e.g. &lt;code&gt;int[] a = new int[]{42}&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MoveFieldAssignmentToInitializer" displayName="Field assignment can be moved to initializer" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;This intention replaces initialization of field via assignment with field initializer.&lt;/p&gt;
&lt;p&gt;The code is highlighted only if field initializer is located in the initializer
  and joining with the field declaration is likely to be safe.&lt;/p&gt;
&lt;p&gt;In other cases the inspection works like intention action as it may change the code semantics.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;small&gt;Since 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryQualifierForThis" displayName="Unnecessary qualifier for &apos;this&apos; or &apos;super&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on any unnecessary qualification of &lt;b&gt;this&lt;/b&gt; or &lt;b&gt;super&lt;/b&gt;.
Using a qualifier on &lt;b&gt;this&lt;/b&gt; or &lt;b&gt;super&lt;/b&gt; to
disambiguate a code reference may easily become unnecessary via automatic refactorings, and should be deleted for clarity.
&lt;p&gt;
For example:
&lt;pre&gt;&lt;code&gt;OuterClass.&lt;b&gt;this&lt;/b&gt;.foo();&lt;/code&gt;&lt;/pre&gt;
  &lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LiteralAsArgToStringEquals" displayName="&apos;expression.equals(&quot;literal&quot;)&apos; rather than &apos;&quot;literal&quot;.equals(expression)&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;String.equals()&lt;/b&gt; or &lt;b&gt;String.equalsIgnoreCase()&lt;/b&gt; calls with a &lt;b&gt;String&lt;/b&gt; literal argument.
Some coding standards specify that &lt;b&gt;String&lt;/b&gt; literals should be the qualifier of &lt;b&gt;equals()&lt;/b&gt;, rather than
argument, thus minimizing &lt;b&gt;NullPointerException&lt;/b&gt;s.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JoinDeclarationAndAssignmentJava" displayName="Assignment can be joined with declaration" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports variable assignments that can be joined with the variable&apos;s declaration.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ListIndexOfReplaceableByContains" displayName="&apos;indexOf()&apos; expression is replaceable with &apos;contains()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;List.indexOf()&lt;/b&gt;
expressions which can be replaced with the method
&lt;b&gt;List.contains()&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimplifiableIfStatement" displayName="If statement can be replaced with ?:, &amp;&amp; or || expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &apos;if&apos; statements which can be replaced with condition using &apos;&amp;&amp;&apos;, &apos;||&apos; or &apos;?:&apos; operator.
The result is usually shorter, but not always more clear, so it&apos;s not advised to apply it everywhere.
Also this change may reduce compiled bytecode size which could be useful in some environments like J2ME.
&lt;p&gt;
  Example: &lt;b&gt;if (&lt;i&gt;condition&lt;/i&gt;) return true; else return &lt;i&gt;foo&lt;/i&gt;;&lt;/b&gt; could be replaced with
  &lt;b&gt;return &lt;i&gt;condition&lt;/i&gt; || &lt;i&gt;foo&lt;/i&gt;;&lt;/b&gt;
&lt;/p&gt;
  &lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use checkbox to skip warning when &apos;?:&apos; operator is suggested. In this case only &apos;&amp;&amp;&apos; and &apos;||&apos; suggestions
  will be highlighted. The fix action to replace with &apos;?:&apos; will still be available in the editor.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryFinalOnLocalVariableOrParameter" displayName="Unnecessary &apos;final&apos; on local variable or parameter" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports local variables or parameters unnecessarily declared &lt;b&gt;final&lt;/b&gt;.
Some coding standards frown on variables declared &lt;b&gt;final&lt;/b&gt;, for reasons of terseness.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to enable or disable warnings on local variables
&lt;p&gt;
Use the second checkbox below to enable or disable warnings on parameters (including
parameters of &lt;b&gt;catch&lt;/b&gt; blocks and enhanced &lt;b&gt;for&lt;/b&gt; statements)
&lt;p&gt;
Use the third checkbox below to only warn on &lt;b&gt;final&lt;/b&gt; parameters of &lt;b&gt;abstract&lt;/b&gt; or &lt;b&gt;interface&lt;/b&gt;
methods, which may be considered extra unnecessary, as such markings have no
effect on the implementation of these methods.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryToStringCall" displayName="Unnecessary call to &apos;toString()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any calls to &lt;b&gt;toString()&lt;/b&gt; used in string concatenations and as arguments to the
&lt;b&gt;print()&lt;/b&gt; and &lt;b&gt;println()&lt;/b&gt; methods of &lt;b&gt;java.io.PrintWriter&lt;/b&gt; and &lt;b&gt;java.io.PrintStream&lt;/b&gt;, the &lt;b&gt;append()&lt;/b&gt;
method of &lt;b&gt;java.lang.StringBuilder&lt;/b&gt; and &lt;b&gt;java.lang.StringBuffer&lt;/b&gt; or the &lt;b&gt;trace()&lt;/b&gt;, &lt;b&gt;debug()&lt;/b&gt;, &lt;b&gt;info()&lt;/b&gt;,
&lt;b&gt;warn()&lt;/b&gt; and &lt;b&gt;error()&lt;/b&gt; methods of &lt;b&gt;org.slf4j.Logger&lt;/b&gt;. In these cases the conversion
to string will be handled by the underlying library methods and an explicit call to &lt;b&gt;toString()&lt;/b&gt; is no needed.
&lt;p&gt;
Note that without the &lt;b&gt;toString()&lt;/b&gt; call the expression will have slightly different semantics (the string &lt;b&gt;null&lt;/b&gt; will be used instead of
 throwing a &lt;b&gt;NullPointerException&lt;/b&gt;).
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConditionalCanBeOptional" displayName="Conditional can be replaced with Optional" enabled="false">&lt;html&gt;
&lt;body&gt;
Suggests to replace a null-check condition with an &lt;b&gt;Optional&lt;/b&gt; chain. E.g.
&lt;pre&gt;return str == null ? &quot;&quot; : str.trim();&lt;/pre&gt;
Could be rewritten as
&lt;pre&gt;return Optional.ofNullable(str).map(String::trim).orElse(&quot;&quot;);&lt;/pre&gt;
&lt;p&gt;While the replacement is not always shorter, this could be a helpful step for further refactoring
  (e.g. changing the method return value to an Optional).&lt;/p&gt;
&lt;p&gt;Note that when not-null branch of the condition returns null, the corresponding mapping step will produce an empty Optional
possibly changing the semantics. If it cannot be statically proven that semantics will be preserved, quick-fix action name
will contain &quot;(may change semantics)&quot; notice and inspection highlighting will be turned off.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 8 or higher&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ChainedMethodCall" displayName="Chained method calls" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports method calls whose target is another
method call.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessarilyQualifiedStaticUsage" displayName="Unnecessarily qualified static access" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports calls to static methods or accesses of static fields
on the current class which are qualified with the class name. Such qualification is unnecessary,
and may be safely removed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantImplements" displayName="Redundant interface declaration" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any cases of classes declaring that they implement or extend an interface, when
that interface is already declared as implemented by a superclass or extended by another interface
of that class. Such declarations are unnecessary, and may be safely removed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryConstructor" displayName="Redundant no-arg constructor" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary constructors.
A constructor is unnecessary if it is the only constructor of a class, has no parameters,
has the same access modifiers as its containing class,
and does not perform any initialization except explicitly or implicitly calling the super class constructor without arguments.
Such a constructor can be safely removed as it will be generated by the compiler even if not specified.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore unnecessary constructors which have an annotation.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConfusingOctalEscape" displayName="Confusing octal escape sequence" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any string literals which contain an octal escape sequence immediately followed by
a digit. Such strings may be confusing, and are often the result of errors in escape code creation.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnclearBinaryExpression" displayName="Unclear expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports binary, conditional or &lt;b&gt;instanceof&lt;/b&gt; expressions consisting of multiple terms with different operators
without parentheses. Such expressions can be unclear because not every developer is intimately familiar with all the precedence rules
of the different operators. This inspection has a quickfix which adds clarifying parentheses.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SingleElementAnnotation" displayName="Single-element annotation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports annotations in the &apos;single element&apos; shorthand form, like &lt;code&gt;@Retention(RUNTIME)&lt;/code&gt;.
&lt;p&gt;The quick fix for this inspection converts annotation to the &apos;normal&apos; form (with attribute name),
e.g. &lt;code&gt;@Retention(value=RUNTIME)&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SimplifiableEqualsExpression" displayName="Unnecessary &apos;null&apos; check before &apos;equals()&apos; call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports comparisons to null which are followed by an &apos;equals()&apos; call
with a constant argument.
&lt;p&gt;
For example the following will be reported by this inspection:
&lt;code&gt;&lt;pre&gt;
    &lt;b&gt;if&lt;/b&gt; (s != &lt;b&gt;null&lt;/b&gt; &amp;&amp; s.equals(&quot;literal&quot;)) {}
&lt;/pre&gt;&lt;/code&gt;
And the quickfix will replace that with:
&lt;code&gt;&lt;pre&gt;
    &lt;b&gt;if&lt;/b&gt; (&quot;literal&quot;.equals(s)) {}
&lt;/pre&gt;&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
    When checkbox is checked, &apos;equals()&apos; with non-constant argument may also be reported if &apos;equals()&apos; argument
    is proven to be not-null.
&lt;/p&gt;
  &lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantFieldInitialization" displayName="Redundant field initialization" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports fields explicitly initialized to
the same values that the JVM would initialize them to by default.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LocalCanBeFinal" displayName="Local variable or parameter can be final" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports parameters or local variables, found in the specified inspection
scope, that may have a &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;final&lt;/font&gt;&lt;/b&gt; modifier added.
&lt;!-- tooltip end --&gt;
&lt;br&gt; &lt;br&gt;
Use checkboxes in the inspection options below, to define whether parameters or local variables (or both) are to be reported.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnnecessaryBlockStatement" displayName="Unnecessary code block" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports code blocks which are unnecessary to the semantics of the program, and can
be replaced by their contents. Code blocks which are the bodies of &lt;b&gt;if&lt;/b&gt;, &lt;b&gt;do&lt;/b&gt;,
&lt;b&gt;while&lt;/b&gt; or &lt;b&gt;for&lt;/b&gt; statements will not be reported by this
inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below if you wish this inspection to ignore code blocks which are used as branches of switch statements.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReturnSeparatedFromComputation" displayName="&apos;return&apos; separated from the result computation" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects &lt;code&gt;return&lt;/code&gt; statements which return a local variable, where the value of the variable is computed
somewhere else within the same code block with the &lt;code&gt;return&lt;/code&gt; statement.
&lt;p&gt;The quick fix inlines the returned variable by moving the return statement to the location where the value of the variable is computed.
  When the returned value can&apos;t be inlined into return statement, the quick fix attempts to move the return statement as close to the
  computation of the returned value as possible.
&lt;p&gt;For example, the code below could be simplified:
&lt;pre&gt;&lt;code&gt;int n = -1;
for(int i = 0; i &amp;lt; a.length; i++) {
    if (a[i] == b) {
        n = i;
        break;
    }
}
return n;&lt;/code&gt;&lt;/pre&gt;
After the quick fix it becomes the following:
&lt;pre&gt;&lt;code&gt;int n = -1;
for(int i = 0; i &amp;lt; a.length; i++) {
    if (a[i] == b) {
        return i;
    }
}
return n;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BoundedWildcard" displayName="Can use bounded wildcard" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports generic method parameters that can use &lt;a href=&quot;https://en.wikipedia.org/wiki/Wildcard_(Java)&quot;&gt;bounded wildcards&lt;/a&gt; in your API.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
To quote &lt;a href=&quot;https://en.wikipedia.org/wiki/Joshua_Bloch#Effective_Java&quot;&gt;Josh Bloch&lt;/a&gt; in &quot;&lt;b&gt;Effective Java&lt;/b&gt;&quot; third Edition item 31:
&lt;hr&gt;
&lt;h4&gt;Use bounded wildcards to increase API flexibility.&lt;/h4&gt;
&lt;i&gt;
Using wildcard types in your APIs, while tricky, makes the APIs far more flexible.
Remember the basic rule: producer-extends, consumer-super (PECS).
And remember that all Comparables and Comparators are consumers.
&lt;/i&gt;
&lt;hr&gt;
&lt;p&gt;Example:
  &lt;code&gt;&lt;pre&gt;void process(Consumer&amp;lt;Number&amp;gt; consumer);&lt;/pre&gt;&lt;/code&gt; should be replaced with:
  &lt;code&gt;&lt;pre&gt;void process(Consumer&amp;lt;? super Number&amp;gt; consumer);&lt;/pre&gt;&lt;/code&gt;
  This method signature is more flexible because it accepts more types (not only Consumer&amp;lt;Number&amp;gt; but also Consumer&amp;lt;Object&amp;gt;).
&lt;p&gt;
  Likewise, type parameters in covariant position:
  &lt;code&gt;&lt;pre&gt;T produce(Producer&amp;lt;T&amp;gt; p);&lt;/pre&gt;&lt;/code&gt;should be replaced with:
  &lt;code&gt;&lt;pre&gt;T produce(Producer&amp;lt;? extends T&amp;gt; p);&lt;/pre&gt;&lt;/code&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ArrayCanBeReplacedWithEnumValues" displayName="Array can be replaced with enum values" enabled="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports arrays of enum constants which may be replaced with &lt;code&gt;EnumType.values()&lt;/code&gt;.
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SingleStatementInBlock" displayName="Code block contains single statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports control flow statements with
only a single statement in their code block.
&lt;p&gt;The quick fix for the inspection removes braces from the statement body.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="FieldMayBeFinal" displayName="Field may be &apos;final&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any fields which may safely be made &lt;b&gt;final&lt;/b&gt;.
A &lt;b&gt;static&lt;/b&gt; field may be final if it is initialized in its declaration
or in one static class initializer, but not both. A non-static field may be final if it is initialized
in its declaration or in one non-static class initializer or in all constructors.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RawTypeCanBeGeneric" displayName="Raw type can be generic" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports variable declarations with initializer where the variable type is declared with
&lt;b&gt;raw&lt;/b&gt; type whereas initializer has fully parameterized &lt;b&gt;generic&lt;/b&gt; type, e.g.
&lt;code&gt;List&amp;nbsp;list&amp;nbsp;=&amp;nbsp;new ArrayList&amp;lt;String&amp;gt;()&lt;/code&gt;
&lt;p&gt; The quick fix adds generic parameters to the variable type. The result would be like the following:
&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;()&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="StreamToLoop" displayName="Stream API call chain can be replaced with loop" enabled="false">&lt;html&gt;
&lt;body&gt;
Finds Stream API chains, &lt;b&gt;Iterable.forEach&lt;/b&gt; and &lt;b&gt;Map.forEach&lt;/b&gt; calls and provides quick fix to convert them into classical loops.
&lt;p&gt;
  Note that sometimes this inspection might cause slight semantic changes.
  Special care should be taken when it comes to short-circuiting, as it&apos;s not specified how many elements will be actually read when
  the stream short-circuits.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessarilyQualifiedInnerClassAccess" displayName="Unnecessarily qualified inner class access" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any references to inner classes which are unnecessarily qualified with the name
of the enclosing class. Such qualification is unnecessary, and may be safely removed. This may
require the addition of an import for the inner class.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore references to inner classes where the removal of the qualification
would require the addition of an import.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessarySemicolon" displayName="Unnecessary semicolon" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on any unnecessary semicolons, whether between class members, inside block statements, or after
class definitions. While valid Java, these semicolons are redundant, and may be removed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryCallToStringValueOf" displayName="Unnecessary conversion to String" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any calls to static methods like &lt;b&gt;String.valueOf()&lt;/b&gt; or &lt;b&gt;Integer.toString()&lt;/b&gt; used in
string concatenations and as arguments to the
&lt;b&gt;print()&lt;/b&gt; and &lt;b&gt;println()&lt;/b&gt; methods of &lt;b&gt;java.io.PrintWriter&lt;/b&gt; and &lt;b&gt;java.io.PrintStream&lt;/b&gt;, the &lt;b&gt;append()&lt;/b&gt;
method of &lt;b&gt;java.lang.StringBuilder&lt;/b&gt; and &lt;b&gt;java.lang.StringBuffer&lt;/b&gt; or the &lt;b&gt;trace()&lt;/b&gt;, &lt;b&gt;debug()&lt;/b&gt;, &lt;b&gt;info()&lt;/b&gt;,
&lt;b&gt;warn()&lt;/b&gt; and &lt;b&gt;error()&lt;/b&gt; methods of &lt;b&gt;org.slf4j.Logger&lt;/b&gt;. In these cases the conversion
to string will be handled by the underlying library methods and an explicit call to &lt;b&gt;String.valueOf()&lt;/b&gt; is not needed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LambdaCanBeReplacedWithAnonymous" displayName="Lambda can be replaced with anonymous class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports lambda expressions which can be replaced with anonymous class.
&lt;p&gt; The quick fix expands lambda expression to the anonymous class.
&lt;p&gt;For example the lambda expression &lt;code&gt;s -&gt; System.out.println(s)&lt;/code&gt; can be expanded to the following class:
&lt;pre&gt;&lt;code&gt;new Consumer&amp;lt;String&amp;gt;() {
  @Override
  public void accept(String s) {
    System.out.println(s);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CharsetObjectCanBeUsed" displayName="Standard Charset object can be used" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods and constructors where constant charset String literal is used (like &lt;b&gt;&quot;UTF-8&quot;&lt;/b&gt;) which could be replaced with
a predefined Charset object like &lt;b&gt;StandardCharsets.UTF_8&lt;/b&gt;. This may work a little bit faster, because charset lookup becomes
unnecessary. Also catching &lt;b&gt;UnsupportedEncodingException&lt;/b&gt; may become unnecessary as well. In this case the catch block will
be removed automatically.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryFullyQualifiedName" displayName="Unnecessary fully qualified name" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on fully qualified class names which can be shortened. The quick fix for this
inspection will shorten the fully qualified names, adding import statements as necessary.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
In &lt;code&gt;Settings | Code Style | Java | Imports&lt;/code&gt; two settings can be found which influence this inspection.
Use the settings there to  specify if references to inner classes
should be qualified with the outer class and if fully qualified names are allowed in javadoc.
&lt;p&gt;
Use the checkbox below to ignore fully qualified names inside the Java 9 &lt;b&gt;provides&lt;/b&gt; and &lt;b&gt;uses&lt;/b&gt; module statements.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryParentheses" displayName="Unnecessary parentheses" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any instance of unnecessary parentheses. Parentheses
are considered unnecessary if the evaluation order of an expression remains
unchanged if the parentheses are removed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to ignore parentheses which help to clarify a binary
expression. Parentheses are clarifying if the expression parenthesized is an
&lt;b&gt;instanceof&lt;/b&gt; expression part of a larger
expression or has a different operator than the parent expression.
&lt;p&gt;
Use the second checkbox below to ignore any parentheses around the condition
of conditional expressions. Some coding standards specify that all such conditions
must be surrounded by parentheses.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessarySuperQualifier" displayName="Unnecessary &apos;super&apos; qualifier" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any unnecessary uses of the &lt;b&gt;super&lt;/b&gt;
qualifier in method calls and fields references. A super qualifier is unnecessary
when the field or method of the super class is not overridden in the calling class.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore qualifiers, which help to distinguish super members access from the same named members of the outer class.
  See also
  &lt;ul&gt;
   &lt;li&gt;Java | Visibility issues | Access of inherited field looks like access of element in surrounding code&lt;/li&gt;
   &lt;li&gt;Java | Visibility issues | Call to inherited method looks like call to local method&lt;/li&gt;
  &lt;/ul&gt;
&lt;p&gt;


&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnqualifiedMethodAccess" displayName="Instance method call not qualified with &apos;this&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to non-static methods of the same object which are not qualified with &lt;b&gt;this&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReturnThis" displayName="Return of &apos;this&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods returning &lt;b&gt;this&lt;/b&gt;.
While such a return is valid, it is rarely necessary, and usually indicates that the developer intends the method to be used
as part of a chain of similar method calls (e.g. buffer.append(&quot;foo&quot;).append(&quot;bar&quot;).append(&quot;baz&quot;)).
Such chains are frowned upon by many coding standards.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryInterfaceModifier" displayName="Unnecessary interface modifier" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any redundant modifiers on interfaces or interface components.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryThis" displayName="Unnecessary &apos;this&apos; qualifier" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on any unnecessary uses of &lt;b&gt;this&lt;/b&gt; in the code.
Using &lt;b&gt;this&lt;/b&gt; to
disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged
by many coding styles.
&lt;p&gt;
For example:
&lt;pre&gt;&lt;code&gt;&lt;b&gt;this&lt;/b&gt;.a = 3;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore assignments to fields.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OptionalIsPresent" displayName="Optional.isPresent() can be replaced with functional-style expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports conditions like &lt;code&gt;if(Optional.isPresent())&lt;/code&gt; which could be rewritten in functional style.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 8 or higher&lt;/p&gt;
&lt;small&gt;New in 2016.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CStyleArrayDeclaration" displayName="C-style array declaration" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports array declarations made using C-style syntax,
with the array indicator brackets positioned after the variable name or after the method parameter list.
For example:
&lt;code&gt;&lt;pre&gt;
  &lt;b&gt;public&lt;/b&gt; String process(String value[])[] {
    return value;
  }
&lt;/pre&gt;&lt;/code&gt;
Most code styles prefer Java-style array declarations, with the array indicator brackets attached to the type name.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to only report C-style array declaration of method return types.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ObjectsEqualsCanBeSimplified" displayName="Objects.equals() can be replaced with equals()" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;Objects.equals(a, b)&lt;/b&gt; where the first argument is statically known to be non-null.
  Such a call can be safely replaced with &lt;b&gt;a.equals(b)&lt;/b&gt; or &lt;b&gt;a == b&lt;/b&gt; if both arguments are primitives.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MultiCatchCanBeSplit" displayName="Multi-catch can be split into separate catch blocks" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;multi-catch&lt;/b&gt; sections, like &lt;code&gt;try{} catch&amp;nbsp;(IOException|RuntimeException&amp;nbsp;e)&amp;nbsp;{...}&lt;/code&gt;
&lt;p&gt; The quick fix splits multi-catch section into separate &lt;b&gt;catch&lt;/b&gt; blocks.
&lt;!-- tooltip end --&gt;
&lt;p&gt;For example, the multi-catch section
&lt;pre&gt;&lt;code&gt;
try{}
catch (IOException|RuntimeException e) {
  /*handle the exception*/
}&lt;/code&gt;&lt;/pre&gt;
is transformed into the following:
&lt;pre&gt;&lt;code&gt;
try{}
catch (IOException e) {
  /*handle the exception*/
}
catch (RuntimeException e) {
  /*handle the exception*/
}&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SimplifiableAnnotation" displayName="Simplifiable annotation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports annotations which can be simplified to their &apos;single element&apos;
or &apos;marker&apos; shorthand form. Annotations that contain whitespace between the @-sign and the name
of the annotation are also reported.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EqualsCalledOnEnumConstant" displayName="&apos;equals()&apos; called on Enum value" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;equals()&lt;/b&gt; on
&lt;b&gt;Enum&lt;/b&gt; constants. Such calls can be replaced by
an identity comparison &lt;b&gt;(==)&lt;/b&gt; because two
&lt;b&gt;Enum&lt;/b&gt; constants are equal only when they
have the same identity.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantLabeledSwitchRuleCodeBlock" displayName="Labeled switch rule has redundant code block" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports rules of &lt;code&gt;switch&lt;/code&gt; expression or enhanced &lt;code&gt;switch&lt;/code&gt; statement which have redundant code block.&lt;br&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 12 Preview&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessarilyQualifiedStaticallyImportedElement" displayName="Unnecessarily qualified statically imported element" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any references to static members which are statically imported and also qualified with
their containing class name. Because the elements are already statically imported such qualification is unnecessary
and can be removed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssertMessageNotString" displayName="&apos;assert&apos; message is not a String" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;assert&lt;/b&gt; messages which are not of type &lt;b&gt;java.lang.String&lt;/b&gt;.
By using a String more information can be provided to help diagnose the failure,
or the reason for the assertion.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to only warn when the &lt;b&gt;assert&lt;/b&gt; message type is &lt;b&gt;boolean&lt;/b&gt; or &lt;b&gt;java.lang.Boolean&lt;/b&gt;.
A &lt;b&gt;boolean&lt;/b&gt; detail message is unlikely to provide additional information about an assertion failure,
  and could possibly be the result of a mistakenly entered &lt;b&gt;&apos;:&apos;&lt;/b&gt; instead of a &lt;b&gt;&apos;&amp;&apos;&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;New in 15&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Compiler issues">
    <inspection shortName="JavacQuirks" displayName="Javac quirks" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;span&gt;This inspection warns about known Javac issues, problems and incompatibilities.&lt;/span&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UNCHECKED_WARNING" displayName="Unchecked warning" enabled="true">&lt;html&gt;
&lt;body&gt;
Signals places where an unchecked warning is issued
by the compiler, for example:
&lt;pre&gt;&lt;code&gt;

  &lt;b&gt;void&lt;/b&gt; f(HashMap map) {
    map.put(&quot;key&quot;, &quot;value&quot;);
  }
  
&lt;/code&gt;&lt;/pre&gt;
Hint: Pass -Xlint:unchecked to javac to get more details.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Markdown">
    <inspection shortName="MarkdownUnresolvedFileReference" displayName="Unresolved file references" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved file references in Markdown file.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Inheritance issues">
    <inspection shortName="ImplicitSubclassInspection" displayName="Final declaration can&apos;t be overridden at runtime" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports the cases when your code prevents a class from being subclassed by some framework
(e.g. Spring or Hibernate) at runtime.
&lt;!-- tooltip end --&gt;
&lt;p&gt;The typical examples when subclassing is necessary but impossible are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;final&lt;/code&gt; classes marked with framework-specific annotations (e.g. Spring &lt;code&gt;@Configuration&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;final&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt; methods
    marked with framework-specific annotations (e.g. Spring &lt;code&gt;@Transactional&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;methods marked with framework-specific annotations inside &lt;code&gt;final&lt;/code&gt; classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list of reported cases depends on the frameworks used.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InterfaceNeverImplemented" displayName="Interface which has no concrete subclass" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports interfaces which have no concrete subclasses.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the list below to specify special annotations. Interfaces annotated with one of these annotations will be ignored by this inspection.
&lt;p&gt;
  Use the checkbox below to ignore interfaces that only declare constant fields.
  Such interfaces my still be usable even without implementations.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExtendsAnnotation" displayName="Class extends annotation interface" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any classes declared as implementing or extending an annotation
interface. While it is legal to extend an annotation interface, it is often done by accident,
and the result won&apos;t be usable as an annotation.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FrequentlyUsedInheritorInspection" displayName="Class may extend a commonly used base class" enabled="false">&lt;html&gt;
&lt;body&gt;
The inspection finds commonly used class/interface that could be extended/implemented instead of extending too broad interface or class.
&lt;!-- tooltip end --&gt;
The inspection works only if a project is built using IntelliJ IDEA build system and a super class is located inside project source files.
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExtendsUtilityClass" displayName="Class extends utility class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any classes explicitly declared to extend a utility class. Utility classes
have all fields and methods declared &lt;b&gt;static&lt;/b&gt;. Extending a utility
class also allows inadvertent object instantiation of the utility class, because to allow extension
the constructor can not be made private.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore any classes that override a utility class but are also utility classes themselves.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AbstractClassWithoutAbstractMethods" displayName="Abstract class without abstract methods" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports abstract classes without abstract methods.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonProtectedConstructorInAbstractClass" displayName="&apos;public&apos; constructor in &apos;abstract&apos; class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports constructors in abstract classes that are not
declared &lt;b&gt;protected&lt;/b&gt;, package-protected or
&lt;b&gt;private&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantMethodOverride" displayName="Method is identical to its super method" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any method with a signature identical to its super method and either has an identical body to the super method or only
calls the super method.
Such a method is redundant and can be removed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExtendsConcreteCollection" displayName="Class explicitly extends a Collection class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any clases which extend concrete classes of type
&lt;b&gt;java.util.Collection&lt;/b&gt; or
&lt;b&gt;java.util.Map&lt;/b&gt;. Subclassing collection types
is a common practice of novice object-oriented developers, but is considerably
more brittle than delegating collection calls.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AbstractClassNeverImplemented" displayName="Abstract class which has no concrete subclass" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports abstract classes which have no
concrete subclasses.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ParameterTypePreventsOverriding" displayName="Parameter type prevents overriding" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports method parameter types in methods that look like they are overriding a super method,
but do not because of the parameter type coming from a different package than the super method type,
although the class name matches.
This prevents the parameter&apos;s method from overriding the super method and can be very confusing.
&lt;p&gt;Example:
&lt;pre&gt;&lt;code&gt;
&lt;b&gt;public class&lt;/b&gt; A {
  &lt;b&gt;public void&lt;/b&gt; method(Object o) {}
}

&lt;b&gt;public class&lt;/b&gt; B &lt;b&gt;extends&lt;/b&gt; A {
  &lt;b&gt;public void&lt;/b&gt; method(Object o) {} // warning on parameter type here
  &lt;b&gt;class&lt;/b&gt; Object {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MissingOverrideAnnotation" displayName="Missing @Override annotation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any methods which override methods in a superclass but
do not have the &lt;b&gt;@java.lang.Override&lt;/b&gt; annotation.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to have this inspection ignore the
&lt;b&gt;java.lang.Object&lt;/b&gt; methods
&lt;b&gt;equals()&lt;/b&gt;,
&lt;b&gt;hashCode()&lt;/b&gt; and
&lt;b&gt;toString()&lt;/b&gt;. The risk of these methods
going missing and thus your code not compiling anymore due to the
&lt;b&gt;@Override&lt;/b&gt; annotation is vanishingly small.
&lt;p&gt;
Use the second checkbox below to have this inspection ignore overriding methods
in anonymous classes.
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AbstractMethodWithMissingImplementations" displayName="Abstract method with missing implementations" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any abstract methods which are not implemented in every concrete
subclass. This is a compile-time error on the subclasses, while this inspection
reports the problem at the point of the abstract method.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RefusedBequest" displayName="Method does not call super method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any methods which override a concrete method,
but which do not call that method as &lt;b&gt;super&lt;/b&gt;. This is also known as a &lt;i&gt;refused bequest&lt;/i&gt; and such methods
may represent a failure of abstraction which can lead to hard-to-trace bugs. Default methods and methods overridden
from &lt;b&gt;java.lang.Object&lt;/b&gt;, except for &lt;b&gt;clone()&lt;/b&gt;, are not reported by this inspection.
A &lt;b&gt;clone()&lt;/b&gt; method is expected to call its super, which will automatically return an object of the correct type.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to only warn when the super method is annotated by an annotation specified in the table below.
&lt;p&gt;
Use the second checkbox below to ignore super methods when they are empty or only throw an exception.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AbstractMethodOverridesAbstractMethod" displayName="Abstract method overrides abstract method" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;abstract&lt;/b&gt; methods which override &lt;b&gt;abstract&lt;/b&gt; methods. Methods with
different return types, exception declarations, annotations or modifiers than the method they override are not
reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox to ignore any abstract methods that have a different JavaDoc comment than their super method.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AbstractClassExtendsConcreteClass" displayName="Abstract class extends concrete class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports abstract classes which extend concrete classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticInheritance" displayName="Static inheritance" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports interfaces which are implemented for no reason other than
access to constants. Such inheritance is often confusing, and may hide important dependency
information.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ProblematicVarargsMethodOverride" displayName="Non-varargs method overrides varargs method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods overriding a variable arity method and replacing the variable arity parameter with an array parameter.
While this is legal Java, it can be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeParameterExtendsFinalClass" displayName="Type parameter extends final class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any type parameters declared to extend a final class. Since
final classes cannot be extended, the type parameter could be replaced with the type
of the specified final class.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AbstractMethodOverridesConcreteMethod" displayName="Abstract method overrides concrete method" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports abstract methods which override concrete methods.
Methods overridden from &lt;b&gt;java.lang.Object&lt;/b&gt; are not reported
by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Android Lint: Security">
    <inspection shortName="AndroidLintSetWorldReadable" displayName="File.setReadable() used to make file world-readable" enabled="false">&lt;html&gt;&lt;body&gt;&lt;code&gt;File.setReadable()&lt;/code&gt; used to make file world-readable&lt;br&gt;&lt;br&gt;Setting files world-readable is very dangerous, and likely to cause security holes in applications. It is strongly discouraged; instead, applications should use more formal mechanisms for interactions such as &lt;code&gt;ContentProvider&lt;/code&gt;, &lt;code&gt;BroadcastReceiver&lt;/code&gt;, and &lt;code&gt;Service&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: SetWorldReadable&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintExportedService" displayName="Exported service does not require permission" enabled="false">&lt;html&gt;&lt;body&gt;Exported service does not require permission&lt;br&gt;&lt;br&gt;Exported services (services which either set &lt;code&gt;exported=true&lt;/code&gt; or contain an intent-filter and do not specify &lt;code&gt;exported=false&lt;/code&gt;) should define a permission that an entity must have in order to launch the service or bind to it. Without this, any application can use this service.&lt;br&gt;&lt;br&gt;Issue id: ExportedService&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUnprotectedSMSBroadcastReceiver" displayName="Unprotected SMS BroadcastReceiver" enabled="false">&lt;html&gt;&lt;body&gt;Unprotected SMS BroadcastReceiver&lt;br&gt;&lt;br&gt;BroadcastReceivers that declare an intent-filter for SMS_DELIVER or SMS_RECEIVED must ensure that the caller has the BROADCAST_SMS permission, otherwise it is possible for malicious actors to spoof intents.&lt;br&gt;&lt;br&gt;Issue id: UnprotectedSMSBroadcastReceiver&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWorldWriteableFiles" displayName="openFileOutput() or similar call passing MODE_WORLD_WRITEABLE" enabled="false">&lt;html&gt;&lt;body&gt;&lt;code&gt;openFileOutput()&lt;/code&gt; or similar call passing &lt;code&gt;MODE_WORLD_WRITEABLE&lt;/code&gt;&lt;br&gt;&lt;br&gt;There are cases where it is appropriate for an application to write world writeable files, but these should be reviewed carefully to ensure that they contain no private data, and that if the file is modified by a malicious application it does not trick or compromise your application.&lt;br&gt;&lt;br&gt;Issue id: WorldWriteableFiles&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintExportedPreferenceActivity" displayName="PreferenceActivity should not be exported" enabled="false">&lt;html&gt;&lt;body&gt;PreferenceActivity should not be exported&lt;br&gt;&lt;br&gt;Fragment injection gives anyone who can send your PreferenceActivity an intent the ability to load any fragment, with any arguments, in your process.&lt;br&gt;&lt;br&gt;Issue id: ExportedPreferenceActivity&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://securityintelligence.com/new-vulnerability-android-framework-fragment-injection&quot;&gt;http://securityintelligence.com/new-vulnerability-android-framework-fragment-injection&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAddJavascriptInterface" displayName="addJavascriptInterface Called" enabled="false">&lt;html&gt;&lt;body&gt;addJavascriptInterface Called&lt;br&gt;&lt;br&gt;For applications built for API levels below 17, &lt;code&gt;WebView#addJavascriptInterface&lt;/code&gt; presents a security hazard as JavaScript on the target web page has the ability to use reflection to access the injected object&apos;s public fields and thus manipulate the host application in unintended ways.&lt;br&gt;&lt;br&gt;Issue id: AddJavascriptInterface&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/&quot;&gt;https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSecureRandom" displayName="Using a fixed seed with SecureRandom" enabled="false">&lt;html&gt;&lt;body&gt;Using a fixed seed with &lt;code&gt;SecureRandom&lt;/code&gt;&lt;br&gt;&lt;br&gt;Specifying a fixed seed will cause the instance to return a predictable sequence of numbers. This may be useful for testing but it is not appropriate for secure use.&lt;br&gt;&lt;br&gt;Issue id: SecureRandom&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/reference/java/security/SecureRandom.html&quot;&gt;http://developer.android.com/reference/java/security/SecureRandom.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintBadHostnameVerifier" displayName="Insecure HostnameVerifier" enabled="false">&lt;html&gt;&lt;body&gt;Insecure HostnameVerifier&lt;br&gt;&lt;br&gt;This check looks for implementations of &lt;code&gt;HostnameVerifier&lt;/code&gt; whose &lt;code&gt;verify&lt;/code&gt; method always returns true (thus trusting any hostname) which could result in insecure network traffic caused by trusting arbitrary hostnames in TLS/SSL certificates presented by peers.&lt;br&gt;&lt;br&gt;Issue id: BadHostnameVerifier&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintHardcodedDebugMode" displayName="Hardcoded value of android:debuggable in the manifest" enabled="false">&lt;html&gt;&lt;body&gt;Hardcoded value of &lt;code&gt;android:debuggable&lt;/code&gt; in the manifest&lt;br&gt;&lt;br&gt;It&apos;s best to leave out the &lt;code&gt;android:debuggable&lt;/code&gt; attribute from the manifest. If you do, then the tools will automatically insert &lt;code&gt;android:debuggable=true&lt;/code&gt; when building an APK to debug on an emulator or device. And when you perform a release build, such as Exporting APK, it will automatically set it to &lt;code&gt;false&lt;/code&gt;.&lt;br/&gt;
&lt;br/&gt;
If on the other hand you specify a specific value in the manifest file, then the tools will always use it. This can lead to accidentally publishing your app with debug information.&lt;br&gt;&lt;br&gt;Issue id: HardcodedDebugMode&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintTrustAllX509TrustManager" displayName="Insecure TLS/SSL trust manager" enabled="false">&lt;html&gt;&lt;body&gt;Insecure TLS/SSL trust manager&lt;br&gt;&lt;br&gt;This check looks for X509TrustManager implementations whose &lt;code&gt;checkServerTrusted&lt;/code&gt; or &lt;code&gt;checkClientTrusted&lt;/code&gt; methods do nothing (thus trusting any certificate chain) which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers.&lt;br&gt;&lt;br&gt;Issue id: TrustAllX509TrustManager&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSSLCertificateSocketFactoryGetInsecure" displayName="Call to SSLCertificateSocketFactory.getInsecure()" enabled="false">&lt;html&gt;&lt;body&gt;Call to &lt;code&gt;SSLCertificateSocketFactory.getInsecure()&lt;/code&gt;&lt;br&gt;&lt;br&gt;The &lt;code&gt;SSLCertificateSocketFactory.getInsecure()&lt;/code&gt; method returns an SSLSocketFactory with all TLS/SSL security checks disabled, which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers. This method should be avoided unless needed for a special circumstance such as debugging. Instead, &lt;code&gt;SSLCertificateSocketFactory.getDefault()&lt;/code&gt; should be used.&lt;br&gt;&lt;br&gt;Issue id: SSLCertificateSocketFactoryGetInsecure&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintHardwareIds" displayName="Hardware Id Usage" enabled="false">&lt;html&gt;&lt;body&gt;Hardware Id Usage&lt;br&gt;&lt;br&gt;Using these device identifiers is not recommended other than for high value fraud prevention and advanced telephony use-cases. For advertising use-cases, use &lt;code&gt;AdvertisingIdClient$Info#getId&lt;/code&gt; and for analytics, use &lt;code&gt;InstanceId#getId&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: HardwareIds&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/articles/user-data-ids.html&quot;&gt;https://developer.android.com/training/articles/user-data-ids.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSignatureOrSystemPermissions" displayName="signatureOrSystem permissions declared" enabled="false">&lt;html&gt;&lt;body&gt;signatureOrSystem permissions declared&lt;br&gt;&lt;br&gt;The &lt;code&gt;signature&lt;/code&gt; protection level should probably be sufficient for most needs and works regardless of where applications are installed. The &lt;code&gt;signatureOrSystem&lt;/code&gt; level is used for certain situations where multiple vendors have applications built into a system image and need to share specific features explicitly because they are being built together.&lt;br&gt;&lt;br&gt;Issue id: SignatureOrSystemPermissions&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUseCheckPermission" displayName="Using the result of check permission calls" enabled="false">&lt;html&gt;&lt;body&gt;Using the result of check permission calls&lt;br&gt;&lt;br&gt;You normally want to use the result of checking a permission; these methods return whether the permission is held; they do not throw an error if the permission is not granted. Code which does not do anything with the return value probably meant to be calling the enforce methods instead, e.g. rather than &lt;code&gt;Context#checkCallingPermission&lt;/code&gt; it should call &lt;code&gt;Context#enforceCallingPermission&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: UseCheckPermission&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintPackagedPrivateKey" displayName="Packaged private key" enabled="false">&lt;html&gt;&lt;body&gt;Packaged private key&lt;br&gt;&lt;br&gt;In general, you should not package private key files inside your app.&lt;br&gt;&lt;br&gt;Issue id: PackagedPrivateKey&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUnsafeProtectedBroadcastReceiver" displayName="Unsafe Protected BroadcastReceiver" enabled="false">&lt;html&gt;&lt;body&gt;Unsafe Protected BroadcastReceiver&lt;br&gt;&lt;br&gt;BroadcastReceivers that declare an intent-filter for a protected-broadcast action string must check that the received intent&apos;s action string matches the expected value, otherwise it is possible for malicious actors to spoof intents.&lt;br&gt;&lt;br&gt;Issue id: UnsafeProtectedBroadcastReceiver&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUnsafeNativeCodeLocation" displayName="Native code outside library directory" enabled="false">&lt;html&gt;&lt;body&gt;Native code outside library directory&lt;br&gt;&lt;br&gt;In general, application native code should only be placed in the application&apos;s library directory, not in other locations such as the res or assets directories. Placing the code in the library directory provides increased assurance that the code will not be tampered with after application installation. Application developers should use the features of their development environment to place application native libraries into the lib directory of their compiled APKs. Embedding non-shared library native executables into applications should be avoided when possible.&lt;br&gt;&lt;br&gt;Issue id: UnsafeNativeCodeLocation&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintJavascriptInterface" displayName="Missing @JavascriptInterface on methods" enabled="false">&lt;html&gt;&lt;body&gt;Missing @JavascriptInterface on methods&lt;br&gt;&lt;br&gt;As of API 17, you must annotate methods in objects registered with the &lt;code&gt;addJavascriptInterface&lt;/code&gt; method with a &lt;code&gt;@JavascriptInterface&lt;/code&gt; annotation.&lt;br&gt;&lt;br&gt;Issue id: JavascriptInterface&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)&quot;&gt;http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUsingC2DM" displayName="Using C2DM" enabled="false">&lt;html&gt;&lt;body&gt;Using C2DM&lt;br&gt;&lt;br&gt;The C2DM library does not work on Android P or newer devices;             you should migrate to Firebase Cloud Messaging to ensure reliable message delivery.&lt;br&gt;&lt;br&gt;Issue id: UsingC2DM&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developers.google.com/cloud-messaging/c2dm&quot;&gt;https://developers.google.com/cloud-messaging/c2dm&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSetWorldWritable" displayName="File.setWritable() used to make file world-writable" enabled="false">&lt;html&gt;&lt;body&gt;&lt;code&gt;File.setWritable()&lt;/code&gt; used to make file world-writable&lt;br&gt;&lt;br&gt;Setting files world-writable is very dangerous, and likely to cause security holes in applications. It is strongly discouraged; instead, applications should use more formal mechanisms for interactions such as &lt;code&gt;ContentProvider&lt;/code&gt;, &lt;code&gt;BroadcastReceiver&lt;/code&gt;, and &lt;code&gt;Service&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: SetWorldWritable&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintEasterEgg" displayName="Code contains easter egg" enabled="false">&lt;html&gt;&lt;body&gt;Code contains easter egg&lt;br&gt;&lt;br&gt;An &quot;easter egg&quot; is code deliberately hidden in the code, both from potential users and even from other developers. This lint check looks for code which looks like it may be hidden from sight.&lt;br&gt;&lt;br&gt;Issue id: EasterEgg&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGetInstance" displayName="Cipher.getInstance with ECB" enabled="false">&lt;html&gt;&lt;body&gt;Cipher.getInstance with ECB&lt;br&gt;&lt;br&gt;&lt;code&gt;Cipher#getInstance&lt;/code&gt; should not be called with ECB as the cipher mode or without setting the cipher mode because the default mode on android is ECB, which is insecure.&lt;br&gt;&lt;br&gt;Issue id: GetInstance&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGrantAllUris" displayName="Content provider shares everything" enabled="false">&lt;html&gt;&lt;body&gt;Content provider shares everything&lt;br&gt;&lt;br&gt;The &lt;code&gt;&amp;lt;grant-uri-permission&gt;&lt;/code&gt; element allows specific paths to be shared. This detector checks for a path URL of just &apos;/&apos; (everything), which is probably not what you want; you should limit access to a subset.&lt;br&gt;&lt;br&gt;Issue id: GrantAllUris&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUsingHttp" displayName="Using HTTP instead of HTTPS" enabled="false">&lt;html&gt;&lt;body&gt;Using HTTP instead of HTTPS&lt;br&gt;&lt;br&gt;The Gradle Wrapper is available both via HTTP and HTTPS. HTTPS is more secure since it protects against man-in-the-middle attacks etc. Older projects created in Android Studio used HTTP but we now default to HTTPS and recommend upgrading existing projects.&lt;br&gt;&lt;br&gt;Issue id: UsingHttp&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintPackageManagerGetSignatures" displayName="Potential Multiple Certificate Exploit" enabled="false">&lt;html&gt;&lt;body&gt;Potential Multiple Certificate Exploit&lt;br&gt;&lt;br&gt;Improper validation of app signatures could lead to issues where a malicious app submits itself to the Play Store with both its real certificate and a fake certificate and gains access to functionality or information it shouldn&apos;t have due to another application only checking for the fake certificate and ignoring the rest. Please make sure to validate all signatures returned by this method.&lt;br&gt;&lt;br&gt;Issue id: PackageManagerGetSignatures&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://bluebox.com/technical/android-fake-id-vulnerability/&quot;&gt;https://bluebox.com/technical/android-fake-id-vulnerability/&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintProxyPassword" displayName="Proxy Password in Cleartext" enabled="false">&lt;html&gt;&lt;body&gt;Proxy Password in Cleartext&lt;br&gt;&lt;br&gt;Storing proxy server passwords in clear text is dangerous if this file is shared via version control. If this is deliberate or this is a truly private project, suppress this warning.&lt;br&gt;&lt;br&gt;Issue id: ProxyPassword&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSSLCertificateSocketFactoryCreateSocket" displayName="Insecure call to SSLCertificateSocketFactory.createSocket()" enabled="false">&lt;html&gt;&lt;body&gt;Insecure call to &lt;code&gt;SSLCertificateSocketFactory.createSocket()&lt;/code&gt;&lt;br&gt;&lt;br&gt;When &lt;code&gt;SSLCertificateSocketFactory.createSocket()&lt;/code&gt; is called with an &lt;code&gt;InetAddress&lt;/code&gt; as the first parameter, TLS/SSL hostname verification is not performed, which could result in insecure network traffic caused by trusting arbitrary hostnames in TLS/SSL certificates presented by peers. In this case, developers must ensure that the &lt;code&gt;InetAddress&lt;/code&gt; is explicitly verified against the certificate through other means, such as by calling `SSLCertificateSocketFactory.getDefaultHostnameVerifier() to get a &lt;code&gt;HostnameVerifier&lt;/code&gt; and calling &lt;code&gt;HostnameVerifier.verify()&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: SSLCertificateSocketFactoryCreateSocket&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAllowBackup" displayName="AllowBackup/FullBackupContent Problems" enabled="false">&lt;html&gt;&lt;body&gt;AllowBackup/FullBackupContent Problems&lt;br&gt;&lt;br&gt;The &lt;code&gt;allowBackup&lt;/code&gt; attribute determines if an application&apos;s data can be backed up and restored. It is documented at &lt;a href=&quot;http://developer.android.com/reference/android/R.attr.html#allowBackup&quot;&gt;http://developer.android.com/reference/android/R.attr.html#allowBackup&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
By default, this flag is set to &lt;code&gt;true&lt;/code&gt;. When this flag is set to &lt;code&gt;true&lt;/code&gt;, application data can be backed up and restored by the user using &lt;code&gt;adb backup&lt;/code&gt; and &lt;code&gt;adb restore&lt;/code&gt;.&lt;br/&gt;
&lt;br/&gt;
This may have security consequences for an application. &lt;code&gt;adb backup&lt;/code&gt; allows users who have enabled USB debugging to copy application data off of the device. Once backed up, all application data can be read by the user. &lt;code&gt;adb restore&lt;/code&gt; allows creation of application data from a source specified by the user. Following a restore, applications should not assume that the data, file permissions, and directory permissions were created by the application itself.&lt;br/&gt;
&lt;br/&gt;
Setting &lt;code&gt;allowBackup=&quot;false&quot;&lt;/code&gt; opts an application out of both backup and restore.&lt;br/&gt;
&lt;br/&gt;
To fix this warning, decide whether your application should support backup, and explicitly set &lt;code&gt;android:allowBackup=(true|false)&quot;&lt;/code&gt;.&lt;br/&gt;
&lt;br/&gt;
If not set to false, and if targeting API 23 or later, lint will also warn that you should set &lt;code&gt;android:fullBackupContent&lt;/code&gt; to configure auto backup.&lt;br&gt;&lt;br&gt;Issue id: AllowBackup&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/backup/autosyncapi.html&quot;&gt;https://developer.android.com/training/backup/autosyncapi.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAuthLeak" displayName="Code contains url auth" enabled="false">&lt;html&gt;&lt;body&gt;Code might contain an auth leak&lt;br&gt;&lt;br&gt;Strings in java apps can be discovered by decompiling apps, this lint check looks for code which looks like it may contain an url with a username and password&lt;br&gt;&lt;br&gt;Issue id: AuthLeak&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintExportedReceiver" displayName="Receiver does not require permission" enabled="false">&lt;html&gt;&lt;body&gt;Receiver does not require permission&lt;br&gt;&lt;br&gt;Exported receivers (receivers which either set &lt;code&gt;exported=true&lt;/code&gt; or contain an intent-filter and do not specify &lt;code&gt;exported=false&lt;/code&gt;) should define a permission that an entity must have in order to launch the receiver or bind to it. Without this, any application can use this receiver.&lt;br&gt;&lt;br&gt;Issue id: ExportedReceiver&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWorldReadableFiles" displayName="openFileOutput() or similar call passing MODE_WORLD_READABLE" enabled="false">&lt;html&gt;&lt;body&gt;&lt;code&gt;openFileOutput()&lt;/code&gt; or similar call passing &lt;code&gt;MODE_WORLD_READABLE&lt;/code&gt;&lt;br&gt;&lt;br&gt;There are cases where it is appropriate for an application to write world readable files, but these should be reviewed carefully to ensure that they contain no private data that is leaked to other applications.&lt;br&gt;&lt;br&gt;Issue id: WorldReadableFiles&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintExportedContentProvider" displayName="Content provider does not require permission" enabled="false">&lt;html&gt;&lt;body&gt;Content provider does not require permission&lt;br&gt;&lt;br&gt;Content providers are exported by default and any application on the system can potentially use them to read and write data. If the content provider provides access to sensitive data, it should be protected by specifying &lt;code&gt;export=false&lt;/code&gt; in the manifest or by protecting it with a permission that can be granted to other applications.&lt;br&gt;&lt;br&gt;Issue id: ExportedContentProvider&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAllowAllHostnameVerifier" displayName="Insecure HostnameVerifier" enabled="false">&lt;html&gt;&lt;body&gt;Insecure HostnameVerifier&lt;br&gt;&lt;br&gt;This check looks for use of HostnameVerifier implementations whose &lt;code&gt;verify&lt;/code&gt; method always returns true (thus trusting any hostname) which could result in insecure network traffic caused by trusting arbitrary hostnames in TLS/SSL certificates presented by peers.&lt;br&gt;&lt;br&gt;Issue id: AllowAllHostnameVerifier&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintRiskyLibrary" displayName="Libraries with Privacy or Security Risks" enabled="false">&lt;html&gt;&lt;body&gt;Libraries with Privacy or Security Risks&lt;br&gt;&lt;br&gt;Your app is using a version of a library that has been identified by the library developer as a potential source of privacy and/or security risks. This may be a violation of Google Play policies (see &lt;a href=&quot;https://play.google.com/about/monetization-ads/ads/&quot;&gt;https://play.google.com/about/monetization-ads/ads/&lt;/a&gt;) and/or affect your app&amp;#8217;s visibility on the Play Store.&lt;br/&gt;
&lt;br/&gt;
When available, the individual error messages from lint will include details about the reasons for this advisory.&lt;br/&gt;
&lt;br/&gt;
Please try updating your app with an updated version of this library, or remove it from your app.&lt;br&gt;&lt;br&gt;Issue id: RiskyLibrary&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInvalidPermission" displayName="Permission attribute declared on invalid element." enabled="false">&lt;html&gt;&lt;body&gt;Invalid Permission Attribute&lt;br&gt;&lt;br&gt;Not all elements support the permission attribute. If a permission is set on an invalid element, it is a no-op and ignored. Ensure that this permission attribute was set on the correct element to protect the correct component.&lt;br&gt;&lt;br&gt;Issue id: InvalidPermission&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUnsafeDynamicallyLoadedCode" displayName="load used to dynamically load code" enabled="false">&lt;html&gt;&lt;body&gt;&lt;code&gt;load&lt;/code&gt; used to dynamically load code&lt;br&gt;&lt;br&gt;Dynamically loading code from locations other than the application&apos;s library directory or the Android platform&apos;s built-in library directories is dangerous, as there is an increased risk that the code could have been tampered with. Applications should use &lt;code&gt;loadLibrary&lt;/code&gt; when possible, which provides increased assurance that libraries are loaded from one of these safer locations. Application developers should use the features of their development environment to place application native libraries into the lib directory of their compiled APKs.&lt;br&gt;&lt;br&gt;Issue id: UnsafeDynamicallyLoadedCode&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDeletedProvider" displayName="Using Deleted Provider" enabled="false">&lt;html&gt;&lt;body&gt;Using Deleted Provider&lt;br&gt;&lt;br&gt;The &lt;code&gt;Crypto&lt;/code&gt; provider has been completely removed in Android P (and was deprecated in an earlier release). This means that the code will throw a &lt;code&gt;NoSuchProviderException&lt;/code&gt; and the app will crash. Even if the code catches that exception at a higher level, this is not secure and should not be used.&lt;br&gt;&lt;br&gt;Issue id: DeletedProvider&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html&quot;&gt;https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDeprecatedProvider" displayName="Using BC Provider" enabled="false">&lt;html&gt;&lt;body&gt;Using BC Provider&lt;br&gt;&lt;br&gt;The &lt;code&gt;BC&lt;/code&gt; provider has been deprecated and will not be provided when &lt;code&gt;targetSdkVersion&lt;/code&gt; is P or higher.&lt;br&gt;&lt;br&gt;Issue id: DeprecatedProvider&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html&quot;&gt;https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSetJavaScriptEnabled" displayName="Using setJavaScriptEnabled" enabled="false">&lt;html&gt;&lt;body&gt;Using &lt;code&gt;setJavaScriptEnabled&lt;/code&gt;&lt;br&gt;&lt;br&gt;Your code should not invoke &lt;code&gt;setJavaScriptEnabled&lt;/code&gt; if you are not sure that your app really requires JavaScript support.&lt;br&gt;&lt;br&gt;Issue id: SetJavaScriptEnabled&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/practices/security.html&quot;&gt;http://developer.android.com/guide/practices/security.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
  </group>
  <group name="Language injection">
    <inspection shortName="LanguageMismatch" displayName="Language mismatch" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;

      &lt;p&gt;
        Checks whether the language of a reference matches the expected language of the usage context.
      &lt;/p&gt;

      &lt;p&gt;Example:&lt;/p&gt; 
         &lt;pre&gt;
        @Language(&quot;JavaScript&quot;)
        String JS_CODE = &quot;var x;&quot;;

        @Language(&quot;XPath&quot;)
        String XPATH_CODE = JS_CODE;
        &lt;/pre&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td height=&quot;20&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-2&quot;&gt;&lt;p id=&quot;footer&quot;&gt;Powered by IntelliLang&lt;/p&gt;&lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="InjectionNotApplicable" displayName="Injection Annotation not applicable" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;

      &lt;p&gt;
        Checks whether a language-injection annotation (&lt;code&gt;@Language&lt;/code&gt; or derived ones)
        is valid to be applied to the annotated element. Only elements of type &lt;code&gt;String&lt;/code&gt;
        and &lt;code&gt;String[]&lt;/code&gt; may be annotated.
      &lt;/p&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td height=&quot;20&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-2&quot;&gt;&lt;p id=&quot;footer&quot;&gt;Powered by IntelliLang&lt;/p&gt;&lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnknownLanguage" displayName="Unknown Language ID" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;

      &lt;p&gt;
        Checks whether the ID of the language used in an &lt;code&gt;@Language&lt;/code&gt; annotation refers to an
        existing language implementation.
      &lt;/p&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td height=&quot;20&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-2&quot;&gt;&lt;p id=&quot;footer&quot;&gt;Powered by IntelliLang&lt;/p&gt;&lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Logging">
    <inspection shortName="PlaceholderCountMatchesArgumentCount" displayName="Number of placeholders does not match number of arguments in logging call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports SLF4J or Log4j 2 logging calls where the number of {}-placeholders in the string literal argument
does not match the number of other arguments to the logging call.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassWithoutLogger" displayName="Class without logger" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes which do not have a logger declared.
Ensuring that every class has a dedicated logger is an important step in providing a unified logging
implementation for an application. Interfaces, enumerations, annotations, inner classes, and abstract classes are not reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify Logger class names.
Classes which do not declare a field with the type of one of the classes specified, will be reported by this inspection.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LogStatementGuardedByLogCondition" displayName="Logging call not guarded by log condition" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports logging calls with non-constant arguments which are not surrounded by a guard condition.
The evaluation of the arguments of a logging call can be expensive.
Surrounding a logging call with a guard clause prevents that cost, when the logging
is disabled for the level used by the logging statement. This is especially useful for the
least serious level (trace, debug, finest) of logging calls, because those are
most often disabled in a production environment.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the text field below to specify the logger class name used.
&lt;p&gt;
Use the table to specify the logging methods this inspection should warn on, with the corresponding
log condition text.
&lt;p&gt;
Use the checkbox below to let this inspection flag all unguarded log calls, not only those with non-constant arguments.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LoggingConditionDisagreesWithLogStatement" displayName="Log condition does not match logging call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;em&gt;is log enabled for&lt;/em&gt; conditions of if statements which
do not match the log level of the contained logging call.
&lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;
&lt;b&gt;if&lt;/b&gt; (logger.isTraceEnabled()) {
    logger.debug(&quot;some log message&quot;);
}
&lt;/pre&gt;&lt;/code&gt;
&lt;p&gt;This inspection understands the &lt;i&gt;java.util.logging&lt;/i&gt;, &lt;i&gt;log4j&lt;/i&gt;, &lt;i&gt;Log4j 2&lt;/i&gt;, &lt;i&gt;Apache Commons Logging&lt;/i&gt;
and &lt;i&gt;SLF4J&lt;/i&gt; logging frameworks.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassWithMultipleLoggers" displayName="Class with multiple loggers" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes which have multiple loggers declared.
Ensuring that every class has a single dedicated logger is an important step in providing a unified logging
implementation for an application. Interfaces,
enumerations, annotations, inner classes, and abstract classes are not reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify Logger class names.
Classes which declare multiple fields which have the type of one of the classes specified, will be reported by this inspection.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LoggerInitializedWithForeignClass" displayName="Logger initialized with foreign class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;Logger&lt;/b&gt;s which are initialized with a class literal from a different class than the &lt;b&gt;Logger&lt;/b&gt;
is contained in.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify the logger factory classes and logger factory methods recognized by this inspection.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringConcatenationArgumentToLogCall" displayName="Non-constant string concatenation as argument to logging call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports non-constant string concatenations used as arguments to SLF4J and Log4j 2 logging methods.
Non-constant concatenations will be evaluated at runtime even when the logging message is not logged; this can negatively impact performance.
It is recommended to use a parameterized log message instead, which will not be evaluated when logging is disabled.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the combobox below to ignore certain higher logging levels.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonStaticFinalLogger" displayName="Non-constant logger" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports logger fields on classes which are not declared &lt;b&gt;static&lt;/b&gt; and &lt;b&gt;final&lt;/b&gt;.
Ensuring that every classes logger is effectively constant and bound to that class
simplifies the task of providing a unified logging implementation for an application. Interfaces,
enumerations, annotations and inner classes are not reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify Logger class names.
Fields which have a type equal to one of the class names specified and which are not &lt;b&gt;static&lt;/b&gt;
and &lt;b&gt;final&lt;/b&gt;, will be reported by this inspection.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicMethodWithoutLogging" displayName="&apos;public&apos; method without logging" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any public method which does not contain a logging statement. This inspection does not report
simple getters and setters.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify Logger class names.
Public methods which do not contain a call to a method of a variable with the type of one of the classes specified,
  will be reported by this inspection.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="RegExp">
    <inspection shortName="RegExpRedundantEscape" displayName="Redundant character escape" enabled="false">&lt;!--
  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
  --&gt;

&lt;html&gt;
&lt;body&gt;
Reports character escapes that are replaceable with the unescaped character without a change in meaning.
Note that inside the square brackets of a character class, many escapes are unnecessary that would be necessary outside of a character class.
For example the regex &lt;b&gt;&lt;code&gt;[\.]&lt;/code&gt;&lt;/b&gt; is identical to &lt;b&gt;&lt;code&gt;[.]&lt;/code&gt;&lt;/b&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpEscapedMetaCharacter" displayName="Escaped meta character" enabled="false">&lt;!--
  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
  --&gt;

&lt;html&gt;
&lt;body&gt;
Reports the escaped meta characters, e.g. &lt;b&gt;&lt;code&gt;\.&lt;/code&gt;&lt;/b&gt;.
Some RegExp coding styles specify that meta characters should be placed inside a character class,
to make the regular expression easier to understand.
For example the regex &lt;b&gt;&lt;code&gt;\d+\.\d+&lt;/code&gt;&lt;/b&gt; would be written as &lt;code&gt;\d+[.]\d+&lt;/code&gt;.
This inspection does not warn about the meta character &lt;b&gt;&lt;code&gt;[&lt;/code&gt;&lt;/b&gt;, &lt;b&gt;&lt;code&gt;]&lt;/code&gt;&lt;/b&gt; and &lt;b&gt;&lt;code&gt;^&lt;/code&gt;&lt;/b&gt;,
because those would need additional escaping inside a character class.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpOctalEscape" displayName="Octal escape" enabled="false">&lt;!--
  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
  --&gt;

&lt;html&gt;
&lt;body&gt;
Reports octal escapes, which are easily confused with back references.
Use hexadecimal escapes to avoid confusion.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpDuplicateAlternationBranch" displayName="Duplicate branch in alternation" enabled="false">&lt;!--
  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
  --&gt;

&lt;html&gt;
&lt;body&gt;
Reports duplicate branches in a RegExp alternation. For example &lt;code&gt;(a|b|a)&lt;/code&gt;.
Duplicate branches slow down matching and obscure the intent of the expression.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpAnonymousGroup" displayName="Anonymous capturing group or numeric back reference" enabled="false">&lt;!--
  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
  --&gt;

&lt;html&gt;
&lt;body&gt;
Reports anonymous capturing groups and numeric back references in a RegExp.
These are only reported when the RegExp dialect supports named group and named group references.
Named groups and named back references improve code readability and are recommended to use instead.
When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group,
i.e. &lt;b&gt;(?:xxx)&lt;/b&gt; instead of &lt;b&gt;(xxx)&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpUnexpectedAnchor" displayName="Begin or end anchor in unexpected position" enabled="false">&lt;!--
  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
  --&gt;

&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;^&lt;/code&gt; or &lt;code&gt;\A&lt;/code&gt; anchors not at the beginning of the pattern and
&lt;code&gt;$&lt;/code&gt;, &lt;code&gt;\Z&lt;/code&gt; or &lt;code&gt;\z&lt;/code&gt; anchors not at the end of the pattern.
In the wrong position these RegExp anchors prevent the pattern from matching anything.
In case of the &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; anchors, most likely the literal character was meant and the escape forgotten.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2018.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpSingleCharAlternation" displayName="Single character alternation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports single char alternation (e.g. &lt;b&gt;&lt;code&gt;a|b|c|d&lt;/code&gt;&lt;/b&gt;) in a RegExp.
It is simpler to use a character class (&lt;b&gt;&lt;code&gt;[abcd]&lt;/code&gt;&lt;/b&gt;) instead.
This usually also provides slightly better matching performance.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpEmptyAlternationBranch" displayName="Empty branch in alternation" enabled="false">&lt;!--
  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
  --&gt;

&lt;html&gt;
&lt;body&gt;
Reports empty branches in a RegExp alternation. For example:&lt;br&gt; &lt;code&gt;a&lt;b&gt;||&lt;/b&gt;b&lt;/code&gt;
&lt;p&gt;An empty branch will only match the empty string, and in most cases that is not what is desired.
This inspection will not report a single empty branch at the start or the end of an alternation.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpRepeatedSpace" displayName="Consecutive spaces" enabled="false">&lt;!--
  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
  --&gt;

&lt;html&gt;
&lt;body&gt;
Reports multiple consecutive spaces in a RegExp.
Because spaces are not visible by default, it can be hard to see how many spaces are required.
The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Code maturity">
    <inspection shortName="SystemOutErr" displayName="Use of System.out or System.err" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any uses of &lt;b&gt;System.out&lt;/b&gt; or &lt;b&gt;System.err&lt;/b&gt;.
These are often temporary debugging statements, and should probably be either removed from production code, or replaced by a more robust
logging facility.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThrowablePrintedToSystemOut" displayName="&apos;Throwable&apos; printed to &apos;System.out&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;System.out.println()&lt;/b&gt; with an exception as an argument.
This is even worse than calling &lt;b&gt;printStackTrace()&lt;/b&gt; on an exception, since it will be unclear where the exception originated.
Calls to &lt;b&gt;System.out.print()&lt;/b&gt;, &lt;b&gt;System.err.println()&lt;/b&gt; and &lt;b&gt;System.err.print()&lt;/b&gt; with an exception argument will also be
reported.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseOfObsoleteDateTimeApi" displayName="Use of obsolete date-time API" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any uses of &lt;b&gt;java.util.Date&lt;/b&gt;, &lt;b&gt;java.util.Calendar&lt;/b&gt;, &lt;b&gt;java.util.GregorianCalendar&lt;/b&gt;, &lt;b&gt;java.util.TimeZone&lt;/b&gt;,
and &lt;b&gt;java.util.SimpleTimeZone&lt;/b&gt;.
While still supported, these classes were made obsolete by the JDK8 Date-Time API, and should probably
not be used in new development.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Deprecation" displayName="Deprecated API usage" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports where deprecated code is used in the specified inspection scope.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ObsoleteCollection" displayName="Use of obsolete collection type" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any uses of &lt;b&gt;java.util.Vector&lt;/b&gt;
or &lt;b&gt;java.util.Hashtable&lt;/b&gt;. While still supported,
these classes were made obsolete by the JDK1.2 collection classes, and should probably
not be used in new development.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore any cases where the obsolete collections are used
as an argument to a method or assigned to a variable that requires the obsolete type.
Enabling this option is potentially quite processor intensive.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MarkedForRemoval" displayName="Usage of API marked for removal" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports usages of deprecated API (classes, fields, and methods) which are marked for removal with
&lt;code&gt;@Deprecated(&lt;b&gt;forRemoval&lt;/b&gt;=true)&lt;/code&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The code that uses API marked for removal may cause a runtime error with a future version of the API.&lt;br&gt;
  The recommended severity of this inspection is &lt;i&gt;Error&lt;/i&gt; to emphasize that.
&lt;p&gt;
  You may change the severity of this inspection to &lt;i&gt;Warning&lt;/i&gt; if you want the same text decoration as ordinary deprecation has.
&lt;p&gt;
  &lt;small&gt;New in 2017.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SuppressionAnnotation" displayName="Inspection suppression annotation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any inspection suppression comments or annotations.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DeprecatedIsStillUsed" displayName="Deprecated member is still used" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports deprecated classes, methods and fields which are used in your code nonetheless.
&lt;br&gt;
For example:

&lt;pre&gt;
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;class&lt;/font&gt;&lt;/b&gt; MyCode {
  @Deprecated
  // warning: &quot;Deprecated member is still used&quot;
  &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;void&lt;/font&gt;&lt;/b&gt; &lt;span style=&quot;background-color: yellow;&quot;&gt;oldMethod&lt;/span&gt;() {}

  &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;void&lt;/font&gt;&lt;/b&gt; newMethod() {
    oldMethod(); // forgotten usage
  }
}
&lt;/pre&gt;
(Usages from within deprecated places are ignored).
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThrowablePrintStackTrace" displayName="Call to &apos;printStackTrace()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;Throwable.printStackTrace()&lt;/b&gt; without arguments.
Such statements are often used for temporary debugging, and should probably be either removed from production code,
or replaced with a more robust logging facility.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThreadDumpStack" displayName="Call to &apos;Thread.dumpStack()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any uses &lt;b&gt;Thread.dumpStack()&lt;/b&gt;.
These are often temporary debugging statements, and should probably be either removed from production code,
or replaced by a more robust logging facility.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Concurrency annotation issues">
    <inspection shortName="UnknownGuard" displayName="Unknown @GuardedBy field" enabled="false">&lt;html&gt;
&lt;body&gt;
                Reports any @GuardedBy annotations (net.jcip.annotations|javax.annotation.concurrent|org.apache.http.annotation) where the guarding field
                is unknown.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticGuardedByInstance" displayName="Static member guarded by instance field or this" enabled="false">&lt;html&gt;
&lt;body&gt;
                Reports any @GuardedBy annotations (net.jcip.annotations|javax.annotation.concurrent|org.apache.http.annotation) on static fields or methods,
                where the guard is either a non-static field or &apos;this&apos;. Guarding a static by a non-static may result in
                excessive concurrency, multiple threads may be able to access the guarded field simultaneously, by locking in different object contexts.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceGuardedByStatic" displayName="Instance member guarded by static field" enabled="false">&lt;html&gt;
&lt;body&gt;
               Reports any @GuardedBy annotations (net.jcip.annotations|javax.annotation.concurrent|org.apache.http.annotation) on instance fields or methods,
                where the guard is a static field. Guarding a non-static by a static may result in excessive lock contention,
                as access to each locked field in any object instance will prevent simultaneous access to that field in every object instance.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonFinalFieldInImmutable" displayName="Non-final field in @Immutable class" enabled="false">&lt;html&gt;
&lt;body&gt;
                Reports any non-final field in a class with @Immutable annotation
                (net.jcip.annotations|javax.annotation.concurrent|org.apache.http.annotation). This violates the contract of the @Immutable annotation.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonFinalGuard" displayName="Non-final @GuardedBy field" enabled="false">&lt;html&gt;
&lt;body&gt;
               Reports any @GuardedBy annotations (net.jcip.annotations|javax.annotation.concurrent|org.apache.http.annotation) annotations where the guarding field
                is not final. Guarding on a non-final field may result in unexpected race conditions, as locks will
                be held on the value of the field (which may change), rather than the field itself.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldAccessNotGuarded" displayName="Unguarded field access" enabled="false">&lt;html&gt;
&lt;body&gt;
               Reports any accesses of fields declared as @GuardedBy (net.jcip.annotations|javax.annotation.concurrent|org.apache.http.annotation)
                which are are not guarded by an appropriate synchronization structure.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Android">
    <inspection shortName="AndroidMissingOnClickHandler" displayName="onClick handler is missing in the related activity" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks if the method specified in onClick XML attribute is declared in related activity
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AndroidNonConstantResIdsInSwitch" displayName="Non-constant resource ID in a switch statement" enabled="false">&lt;html&gt;&lt;body&gt;
Validates using resource IDs in a switch statement in Android library module.&lt;br&gt;
Resource IDs are non final in the library projects since SDK tools r14,
means that the library code cannot treat these IDs as constants.
&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="XmlWrongFileType" displayName="Android XML root tag validation" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspections checks whether XML resources are stored in resource folder
which type is recommended by documentation
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AndroidUnknownAttribute" displayName="Unknown Android XML attribute" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection highlights unknown XML attributes in Android resource files and AndroidManifest.xml
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AndroidElementNotAllowed" displayName="Android XML element is not allowed" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection highlights unallowed XML tags in Android resource files and AndroidManifest.xml
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AndroidDomInspection" displayName="Android Resources Validation" enabled="false">&lt;html&gt;&lt;body&gt;
  Validates resource references inside Android XML files.
&lt;/body&gt;&lt;/html&gt;</inspection>
  </group>
  <group name="Properties Files">
    <inspection shortName="SuspiciousLocalesLanguages" displayName="Suspicious resource bundle locale languages" enabled="false">&lt;html&gt;
&lt;body&gt;
Inspection detects locales which contain language codes not supported by Java.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TrailingSpacesInProperty" displayName="Trailing Spaces in Property" enabled="false"/>
    <inspection shortName="InconsistentResourceBundle" displayName="Inconsistent Resource Bundle" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports problems in the properties files contained in the resource bundle.
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Report missing translation&lt;/b&gt;
  &lt;/li&gt;
&lt;/ul&gt;
option controls search for an untranslated properties. &lt;br&gt;
It reports properties contained in parent properties file that are missing in inherited (unless it&apos;s a language dialect). &lt;br&gt;
E.g. having this resource bundle: &lt;br&gt;

&lt;b&gt;messages.properties&lt;/b&gt; : &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc=xxx&lt;/b&gt;&lt;/font&gt; &lt;br&gt;
&lt;b&gt;messages_fr.properties&lt;/b&gt; : empty &lt;br&gt;

Property &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc&lt;/b&gt;&lt;/font&gt; will be reported as untranslated.
&lt;ul&gt;
  &lt;li&gt;

    &lt;b&gt;Report inconsistent properties&lt;/b&gt;
  &lt;/li&gt;
&lt;/ul&gt;
option controls invalid resource bundle structure inspection. &lt;br&gt;
It reports properties contained in inherited properties file that are missing in parent (or in sibling if there is no parent). &lt;br&gt;
E.g. having this resource bundle: &lt;br&gt;
&lt;b&gt;messages.properties&lt;/b&gt; : empty &lt;br&gt;
&lt;b&gt;messages_fr.properties&lt;/b&gt; : &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc=xxx&lt;/b&gt;&lt;/font&gt; &lt;br&gt;

Property &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc&lt;/b&gt;&lt;/font&gt; translation here is not available for any language except French,
and, thus, will be reported as missing in the (default) properties file &lt;b&gt;messages.properties&lt;/b&gt; .

&lt;ul&gt;
  &lt;li&gt;

    &lt;b&gt;Report properties overridden with the same value&lt;/b&gt;
  &lt;/li&gt;
&lt;/ul&gt;
option checks for properties which are copy-pasted into several properties files verbatim. &lt;br&gt;
E.g. in this resource bundle: &lt;br&gt;
&lt;b&gt;messages.properties&lt;/b&gt; : &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc=xxx&lt;/b&gt;&lt;/font&gt; &lt;br&gt;
&lt;b&gt;messages_fr.properties&lt;/b&gt; : &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc=xxx&lt;/b&gt;&lt;/font&gt; &lt;br&gt;

Property &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc&lt;/b&gt;&lt;/font&gt; will be reported as unnecessarily inherited in the file &lt;b&gt;messages_fr.properties&lt;/b&gt; .
&lt;br&gt;

&lt;ul&gt;
  &lt;li&gt;

    &lt;b&gt;Report properties overridden with different placeholders&lt;/b&gt;
  &lt;/li&gt;
&lt;/ul&gt;
option checks for properties which are overridden for placeholders consistency. &lt;br&gt;
E.g. in this resource bundle: &lt;br&gt;
&lt;b&gt;messages.properties&lt;/b&gt; : &lt;br&gt;
&lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;qwe={0}xxx{1}&lt;/b&gt;&lt;/font&gt; &lt;br&gt;
&lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc={0}yyy{1}&lt;/b&gt;&lt;/font&gt; &lt;br&gt;
&lt;b&gt;messages_fr.properties&lt;/b&gt; : &lt;br&gt;
&lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;qwe={0}xxx{0}xxx{1}&lt;/b&gt;&lt;/font&gt; &lt;br&gt;
&lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc={0}yyy&lt;/b&gt;&lt;/font&gt; &lt;br&gt;


Property &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc&lt;/b&gt;&lt;/font&gt; will be reported as property contains message format placeholders
with value not corresponding to &lt;b&gt;messages.properties&lt;/b&gt; .
&lt;br&gt;

&lt;ul&gt;
  &lt;li&gt;

    &lt;b&gt;Report properties overridden with different values endings&lt;/b&gt;
  &lt;/li&gt;
&lt;/ul&gt;
option checks for properties which are overridden for endings consistency. &lt;br&gt;
E.g. in this resource bundle: &lt;br&gt;
&lt;b&gt;messages.properties&lt;/b&gt; : &lt;br&gt;
&lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc=xxxzzz&lt;/b&gt;&lt;/font&gt; &lt;br&gt;
&lt;b&gt;messages_fr.properties&lt;/b&gt; : &lt;br&gt;
&lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc=xxx;&lt;/b&gt;&lt;/font&gt; &lt;br&gt;


Property &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc&lt;/b&gt;&lt;/font&gt; will be reported as property contains special signs
( &lt;b&gt;&apos;!&apos;&lt;/b&gt; , &lt;b&gt;&apos;?&apos;&lt;/b&gt; , &lt;b&gt;&apos;.&apos;&lt;/b&gt; , &lt;b&gt;&apos;:&apos;&lt;/b&gt; or &lt;b&gt;&apos;;&apos;&lt;/b&gt; ) at the end of value but
value in &lt;b&gt;messages.properties&lt;/b&gt; doesn&apos;t.
&lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnresolvedPropertyKey" displayName="Invalid property key" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection verifies that arguments passed to functions
with parameters annotated as &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;@PropertyKey&lt;/font&gt;&lt;/b&gt; are valid property keys in the
respective properties files. It also verifies that the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;resourceBundle&lt;/font&gt;&lt;/b&gt;
argument of the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;@PropertyKey&lt;/font&gt;&lt;/b&gt; annotation is an existing resource bundle.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnusedMessageFormatParameter" displayName="Missing message format parameter" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports properties values
which looks like &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.text.MessageFormat&lt;/font&gt;&lt;/b&gt; format strings
but do not use some of the parameters of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;{xx}&lt;/font&gt;&lt;/b&gt; kind.
&lt;p&gt;
  For example:
  &lt;code&gt;&lt;pre&gt;
# parameter {0} is not used
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;error.message&lt;/font&gt;&lt;/b&gt;=Something happened in line &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;{1}&lt;/font&gt;&lt;/b&gt;
&lt;/pre&gt;
  &lt;/code&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="WrongPropertyKeyValueDelimiter" displayName="Property key/value delimiter doesn&apos;t match code style settings" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on properties in which key/value delimiter doesn&apos;t match code style settings.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IncompleteProperty" displayName="Property is incomplete" enabled="false"/>
    <inspection shortName="UnusedProperty" displayName="Unused Property" enabled="true"/>
    <inspection shortName="DuplicatePropertyInspection" displayName="Duplicate Property" enabled="false"/>
    <inspection shortName="AlphaUnsortedPropertiesFile" displayName="Properties File or Resource Bundle is Alphabetically Unsorted" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on alphabetically unsorted resource bundles or properties files.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Control flow issues">
    <inspection shortName="GroovyConditionalWithIdenticalBranches" displayName="Conditional expression with identical branches" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions
with identical &quot;then&quot; and &quot;else&quot; branches.  Such expressions are almost certainly
programmer error.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ForLoopWithMissingComponent" displayName="&apos;for&apos; loop with missing components" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;for&lt;/b&gt; loops
that lack initialization, condition, or update clauses. Some coding styles prohibit
such loops.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to let this inspection ignore loops which use an iterator.
This is a standard way to iterate over a collection, in which the
&lt;b&gt;for&lt;/b&gt; loop does not have an update
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GrFinalVariableAccess" displayName="Final variable access" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports invalid assignments to final variables, parameters and fields and not initialized final fields.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyUnnecessaryReturn" displayName="Unnecessary &apos;return&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary &lt;b&gt;return&lt;/b&gt; statements at the end of constructors and
methods returning &lt;b&gt;void&lt;/b&gt;. These may be safely removed.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="LoopConditionNotUpdatedInsideLoop" displayName="Loop variable not updated inside loop" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any variables and parameters which are used in a loop condition
and are not updated inside the loop. These may cause an infinite loop if executed and
are probably not what was intended.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The option &quot;Ignore possible non-local changes&quot; suppresses warnings if condition can be updated indirectly (via called method
  or concurrently from another thread).
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DuplicateBooleanBranch" displayName="Duplicate condition on &apos;&amp;&amp;&apos; or &apos;||&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports duplicated branches in
&lt;b&gt;&amp;amp;&amp;amp;&lt;/b&gt; or &lt;b&gt;||&lt;/b&gt;
expressions. Such constructs almost always represents a typo or cut-and-paste error.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyConstantConditional" displayName="Constant conditional expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions of the form
&lt;b&gt;true?&lt;i&gt;result1&lt;/i&gt;:&lt;i&gt;result2&lt;/i&gt;&lt;/b&gt; or &lt;b&gt;false?&lt;i&gt;result1&lt;/i&gt;:&lt;i&gt;result2&lt;/i&gt;&lt;/b&gt;.
These expressions sometimes occur as the result of automatic refactorings, and may obviously be simplified.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SwitchStatementsWithoutDefault" displayName="&apos;switch&apos; statement without &apos;default&apos; branch" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;switch&lt;/b&gt; statements that do not contain
&lt;b&gt;default&lt;/b&gt; labels.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SwitchStatementDensity" displayName="&apos;switch&apos; statement with too low of a branch density" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;switch&lt;/b&gt; statements
with too low a ratio of switch labels to executable statements. Such &lt;b&gt;switch&lt;/b&gt; statements
may be confusing, and should probably be refactored.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IfMayBeConditional" displayName="&apos;if&apos; statement could be replaced with conditional expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;if&lt;/b&gt;
statements with then and &lt;b&gt;else&lt;/b&gt; branches which
are both assignment expressions or both &lt;b&gt;return&lt;/b&gt;
statements. The same semantics can be expressed more compactly, and arguably
more clearly, with a conditional expression. Example:
&lt;pre&gt;
  &lt;b&gt;if&lt;/b&gt; (foo == null) {
    bar = null;
  } &lt;b&gt;else&lt;/b&gt; {
    bar = foo.get();
  }
&lt;/pre&gt;
may be expressed as:
&lt;pre&gt;
  bar = foo == null ? null : foo.get();
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to let this inspection report &lt;b&gt;if&lt;/b&gt; statements containing method calls which can be replaced with a single
method call with a conditional expression argument.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IfStatementWithTooManyBranches" displayName="&apos;if&apos; statement with too many branches" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;if&lt;/b&gt; statements with too many branches.
Such statements may be confusing, and are often the sign of inadequate levels of design
abstraction.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of branches an &lt;b&gt;if&lt;/b&gt; statement is allowed to have.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LoopStatementsThatDontLoop" displayName="Loop statement that does not loop" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any instance of &lt;b&gt;for&lt;/b&gt;,
&lt;b&gt;while&lt;/b&gt; and &lt;b&gt;do&lt;/b&gt; statements whose
bodies are guaranteed to execute at most once. Normally, this is an indication of a bug.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore foreach loops.
These are sometimes used to perform an action only on the first item of an iterable in a compact way.
For example:
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;for&lt;/b&gt; (String s : stringIterable) {
    doSomethingOnFirstString(s);
    &lt;b&gt;break&lt;/b&gt;;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovySwitchStatementWithNoDefault" displayName="Switch statement with no default case" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;switch&lt;/b&gt; statements that do not contain
&lt;b&gt;default&lt;/b&gt; labels.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyTrivialConditional" displayName="Redundant conditional expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports ternary conditional operators of the form &lt;b&gt;x?true:false&lt;/b&gt;
or similar, which can be trivially simplified.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnnecessaryConditionalExpression" displayName="Redundant conditional expression" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions which can be replaced by simpler but equivalent expressions.
&lt;table&gt;
  &lt;tr&gt;&lt;th&gt;Example&lt;/th&gt;&lt;th&gt;&amp;rarr;&lt;/th&gt;&lt;th&gt;Replacement&lt;/th&gt;&lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;condition ? true : false&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;condition&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;condition ? false : true&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;!condition&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;value == null ? null : value&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;value&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;result != 0 ? result : 0&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;result&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;a == b ? a : b&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;b&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FallthruInSwitchStatement" displayName="Fallthrough in &apos;switch&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &apos;fall-through&apos; in a &lt;b&gt;switch&lt;/b&gt; statement.
Fall-through is defined to occur when a series of executable statements after a &lt;b&gt;case&lt;/b&gt; label is not guaranteed
to transfer control before the next &lt;b&gt;case&lt;/b&gt; label. For example if the branch is missing a &lt;b&gt;break&lt;/b&gt; statement.
In that case, control falls through to the statements after
that &lt;b&gt;switch&lt;/b&gt; label, even though the &lt;b&gt;switch&lt;/b&gt; expression does not equal
the value of the fallen-through label. While occasionally intended, this construction is confusing, and is often the result of a typo.
&lt;p&gt;
This inspection ignores any fall-through commented with a text matching the regex pattern &lt;code&gt;(?i)falls?\s*thro?u&lt;/code&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TrivialIf" displayName="Redundant &apos;if&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;if&lt;/b&gt; statements which can be simplified to a single assignment,
&lt;b&gt;return&lt;/b&gt; or &lt;b&gt;assert&lt;/b&gt; statement.
&lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;
    &lt;b&gt;if&lt;/b&gt; (foo()) {
       &lt;b&gt;return true&lt;/b&gt;;
    } &lt;b&gt;else&lt;/b&gt; {
       &lt;b&gt;return false&lt;/b&gt;;
    }
&lt;/pre&gt;&lt;/code&gt;
can be simplified to
&lt;code&gt;&lt;pre&gt;
    &lt;b&gt;return&lt;/b&gt; foo();
&lt;/pre&gt;&lt;/code&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IfCanBeAssertion" displayName="Statement can be replaced with &apos;assert&apos; or &apos;Objects.requireNonNull&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;if&lt;/b&gt; statements (with no &lt;b&gt;else&lt;/b&gt; branch) throwing &lt;code&gt;java.lang.Throwable&lt;/code&gt;.
&lt;!-- tooltip end --&gt;
&lt;br&gt;For example:&lt;br&gt;
&lt;code&gt;&lt;b&gt;if&lt;/b&gt; (param == 2) &lt;b&gt;throw new&lt;/b&gt; Exception();&lt;/code&gt;
&lt;br&gt;or guava&apos;s:&lt;br&gt;
&lt;code&gt;Preconditions.checkNotNull(param, message)&lt;/code&gt;

&lt;p&gt;Quick fix replaces it with an &lt;b&gt;assert&lt;/b&gt; statement.&lt;br&gt;
Example:&lt;br&gt;
&lt;code&gt;&lt;b&gt;assert&lt;/b&gt; param != 2;&lt;/code&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SwitchStatementWithTooFewBranches" displayName="&apos;switch&apos; statement with too few branches" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;switch&lt;/b&gt; statements with too few &lt;b&gt;case&lt;/b&gt; labels.
Such statements may be more clearly expressed as &lt;b&gt;if&lt;/b&gt; statements.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the minimum number of &lt;b&gt;case&lt;/b&gt; labels expected.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IdempotentLoopBody" displayName="Idempotent loop body" enabled="false">&lt;html&gt;
&lt;body&gt;
Detects loops whose second and the subsequent iterations do not produce any additional side effects other than produced by the first iteration,
which could indicate a programming error. Such loops may iterate only zero, one or infinite number of times.
If infinite number of times case is unreachable, such loop could be replaced with &lt;b&gt;if&lt;/b&gt; statement. Otherwise there&apos;s a danger that
the program could stuck. Example:
&lt;pre&gt;
  int suffix = 1;
  String name = baseName;
  while(names.contains(name)) {
    name = baseName + suffix; // error: suffix is not updated making loop body idempotent
  }
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PointlessNullCheck" displayName="Unnecessary &apos;null&apos; check before method call" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports a &lt;b&gt;null&lt;/b&gt; check followed by a method call that will definitely return &lt;b&gt;false&lt;/b&gt; when  &lt;b&gt;null&lt;/b&gt; is passed (e.g. &lt;b&gt;Class.isInstance&lt;/b&gt;).
  Such a check seems excessive as the method call always returns &lt;b&gt;false&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;Here is an example of a violation: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    if (x != null &amp;&amp; myClass.isInstance(x)) { ... }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quickfix changes this code to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    if (myClass.isInstance(x)) { ... }&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NegatedIfElse" displayName="&apos;if&apos; statement with negated condition" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;if&lt;/b&gt; statements
which contain &lt;b&gt;else&lt;/b&gt; branches and whose conditions are negated.
Flipping the order of the &lt;b&gt;if&lt;/b&gt; and &lt;b&gt;else&lt;/b&gt;
branches will usually increase the clarity of such statements.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore comparisons of the form &lt;b&gt;!= null&lt;/b&gt;.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverlyComplexBooleanExpression" displayName="Overly complex boolean expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports boolean expressions with too many terms. Such expressions may be confusing and bug-prone.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of terms allowed in a boolean expression.
&lt;p&gt;
Use the checkbox below to ignore boolean expressions which use only a single boolean operator repeatedly.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantConditionalExpression" displayName="Constant conditional expression" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions of the form
&lt;b&gt;true?&lt;i&gt;result1&lt;/i&gt;:&lt;i&gt;result2&lt;/i&gt;&lt;/b&gt; or &lt;b&gt;false?&lt;i&gt;result1&lt;/i&gt;:&lt;i&gt;result2&lt;/i&gt;&lt;/b&gt;.
These expressions sometimes occur as the result of automatic refactorings, and may obviously be simplified.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SwitchStatement" displayName="&apos;switch&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;switch&lt;/b&gt; statements.
&lt;b&gt;switch&lt;/b&gt; statements are often (but not always) indicators of poor object-oriented design.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimplifiableConditionalExpression" displayName="Simplifiable conditional expression" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions of the following form
&lt;pre&gt;&lt;code&gt;  condition ? true : foo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  condition ? false : foo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  condition ? foo : !foo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  condition ? !foo : foo&lt;/code&gt;&lt;/pre&gt;
These expressions may respectively be safely simplified to
&lt;pre&gt;&lt;code&gt;  condition || foo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  !condition &amp;&amp; foo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  condition == foo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  condition != foo&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyConditionalCanBeConditionalCall" displayName="Conditional expression can be conditional call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports ternary conditional expressions which can be replaced by the conditional
call (?.) operation.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PointlessBooleanExpression" displayName="Pointless boolean expression" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports pointless or pointlessly
complicated boolean expressions. Such expressions include &lt;b&gt;and&lt;/b&gt;ing with &lt;b&gt;true&lt;/b&gt;,
&lt;b&gt;or&lt;/b&gt;ing with &lt;b&gt;false&lt;/b&gt;,
equality comparison with a boolean literal, or negation of a boolean literal. Such expressions may be the result of automated refactorings
not completely followed through to completion, and in any case are unlikely to be what the developer
intended to do.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore named constants when determining if an expression is pointless.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BooleanExpressionMayBeConditional" displayName="Boolean expression could be replaced with conditional expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;boolean&lt;/b&gt; expressions which can be expressed more compactly, and arguably more clearly, as a conditional expression.
Take for example the following expression:
&lt;pre&gt;a &amp;&amp; b || !a &amp;&amp; c;&lt;/pre&gt;
which may be expressed as:
&lt;pre&gt;a ? b : c;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 15&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConditionalExpressionWithIdenticalBranches" displayName="Conditional expression with identical branches" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions with identical &lt;em&gt;then&lt;/em&gt; and &lt;em&gt;else&lt;/em&gt; branches.
Such expressions are almost certainly a mistake.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyContinue" displayName="Continue statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;continue&lt;/b&gt; statements.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DuplicateCondition" displayName="Duplicate condition in &apos;if&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on any duplicate conditions among different branches of an
&lt;b&gt;if&lt;/b&gt; statement. While it may rarely be the
desired semantics, duplicate conditions usually represent programmer oversight.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to let this inspection ignore conditions which may produce side effects.
Unchecking this checkbox may lead to some false-positives, e.g. when the same method call returns different values on subsequent invocations.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DefaultNotLastCaseInSwitch" displayName="&apos;default&apos; not last case in &apos;switch&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;switch&lt;/b&gt; statements where the &lt;b&gt;default&lt;/b&gt; case
comes before some other case. This construct is unnecessarily confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyLoopStatementThatDoesntLoop" displayName="Loop statement that doesn&apos;t loop" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;for&lt;/b&gt; or &lt;b&gt;while&lt;/b&gt; statements whose
bodies are guaranteed to execute at most once. Normally, this is an indication of a bug.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="LabeledStatement" displayName="Labeled statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports labeled statements.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssertionCanBeIf" displayName="Assertion can be replaced with if statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;assert&lt;/b&gt; statements.
For example, &lt;br&gt;
&lt;code&gt;&lt;b&gt;assert&lt;/b&gt; param != &lt;b&gt;null&lt;/b&gt;;&lt;/code&gt;
&lt;p&gt;Quick fix replaces it with
&lt;b&gt;if&lt;/b&gt; statement throwing an &lt;b&gt;java.lang.AssertionError&lt;/b&gt;.
&lt;p&gt;Example:&lt;br&gt;
&lt;code&gt;if (param == &lt;b&gt;null&lt;/b&gt;) &lt;b&gt;throw new&lt;/b&gt; AssertionError();&lt;/code&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyConditionalCanBeElvis" displayName="Conditional expression can be elvis" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports ternary condition operators which can be replaced by the simpler
&quot;elvis&quot; operator.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NegatedConditionalExpression" displayName="Negated conditional expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions which are negated with a prefix expression. For example:
&lt;pre&gt;&lt;code&gt;!(i == 1 ? a : b)&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NestedConditionalExpression" displayName="Nested conditional expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports nested conditional expressions. Nested conditional expressions
may result in extremely confusing code.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ContinueStatementWithLabel" displayName="&apos;continue&apos; statement with label" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;continue&lt;/b&gt; statements with labels.
Labeled &lt;b&gt;continue&lt;/b&gt; statements complicate refactoring, and can be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyConstantIfStatement" displayName="Constant if statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;if&lt;/b&gt; statements of the form
&lt;b&gt;if(true)...&lt;/b&gt; or &lt;b&gt;if(false)...&lt;/b&gt;.
These statements sometimes occur due to automatic refactorings, and may obviously
be simplified.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NegatedConditional" displayName="Conditional expression with negated condition" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions whose conditions are negated.
Flipping the order of the conditional expression branches will usually increase the clarity of such statements.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the checkboxes below to ignore comparisons of the form &lt;tt&gt;obj != null&lt;/tt&gt; or &lt;tt&gt;num != 0&lt;/tt&gt;.
  Since &lt;tt&gt;obj != null&lt;/tt&gt; effectively means &quot;obj exists&quot;,
  the meaning of the whole expression does not involve any negation
  and is therefore easy to understand.
&lt;p&gt;
  The same reasoning applies to &lt;tt&gt;num != 0&lt;/tt&gt; expressions, especially when using bit masks.
&lt;p&gt;
  These forms have the added benefit of mentioning the interesting case first.
  In most cases, the value for the &lt;tt&gt;== null&lt;/tt&gt; branch is &lt;tt&gt;null&lt;/tt&gt; itself,
  like in the following examples:

&lt;pre&gt;
    static String getName(Person p) {
        return p != null ? p.getName() : null;
    }

    static String getExecutableString(int fileMode) {
        return (fileMode &amp; 0xb001001001) != 0 ? &quot;executable&quot; : &quot;non-executable&quot;;
    }
&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InfiniteLoopStatement" displayName="Infinite loop statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;for&lt;/b&gt;, &lt;b&gt;while&lt;/b&gt;,
or &lt;b&gt;do&lt;/b&gt; statements which
can only exit by throwing an exception. While such statements may be correct, they
are often a symptom of coding errors.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyIfStatementWithIdenticalBranches" displayName="If statement with identical branches" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;if&lt;/b&gt;
statements with identical &quot;then&quot; and &lt;b&gt;else&lt;/b&gt; branches. Such statements are almost certainly
programmer error.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConditionalCanBePushedInsideExpression" displayName="Conditional can be pushed inside branch expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions with &lt;em&gt;then&lt;/em&gt; and &lt;em&gt;else&lt;/em&gt; branches so similar that the conditional expression can be pushed inside, thereby shortening the code.
&lt;p&gt;For example the following conditional expression:
  &lt;pre&gt;&lt;code&gt;condition ? message(&quot;value: &quot; + 1) : message(&quot;value: &quot; + 2)&lt;/code&gt;&lt;/pre&gt;
Can be pushed inside and transformed into:
  &lt;pre&gt;&lt;code&gt;message(&quot;value: &quot; + (condition ? 1 : 2))&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BreakStatementWithLabel" displayName="&apos;break&apos; statement with label" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;break&lt;/b&gt; statements with labels.
Labeled &lt;b&gt;break&lt;/b&gt; statements complicate refactoring, and can be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PointlessIndexOfComparison" displayName="Pointless &apos;indexOf()&apos; comparison" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports pointless comparison with
&lt;b&gt;.indexOf()&lt;/b&gt; expression. An example of such an expression
is comparing the result of &lt;b&gt;.indexOf()&lt;/b&gt; with numbers less than -1.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NegatedEqualityExpression" displayName="Negated equality expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports equality expressions which are negated by a prefix expression. For example:
&lt;pre&gt;&lt;code&gt;!(i == 1)&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyReturnFromClosureCanBeImplicit" displayName="&apos;return&apos; statement can be implicit" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports  return statements at the end of closures which can be made implicit.
Groovy closures implicitly return the value of the last statement in them.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NestedSwitchStatement" displayName="Nested &apos;switch&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports nested &lt;b&gt;switch&lt;/b&gt; statements/expressions. Nested &lt;b&gt;switch&lt;/b&gt;-es
may result in extremely confusing code.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConfusingElse" displayName="Redundant &apos;else&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports redundant &lt;b&gt;else&lt;/b&gt; keywords in &lt;b&gt;if&lt;/b&gt;&amp;mdash;&lt;b&gt;else&lt;/b&gt; statements and statement chains.
An &lt;b&gt;else&lt;/b&gt; keyword is redundant when all previous &lt;b&gt;if&lt;/b&gt; branches in the chain don&apos;t complete normally
because they end with &lt;b&gt;return&lt;/b&gt;, &lt;b&gt;throw&lt;/b&gt;, &lt;b&gt;break&lt;/b&gt;, or &lt;b&gt;continue&lt;/b&gt; statement.
&lt;p&gt;
  In these cases the statements from the &lt;b&gt;else&lt;/b&gt; branch can be placed after the &lt;b&gt;if&lt;/b&gt; statement and
  the &lt;b&gt;else&lt;/b&gt; keyword can be removed.
  &lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SwitchStatementWithTooManyBranches" displayName="&apos;switch&apos; statement with too many branches" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;switch&lt;/b&gt; statements with too many &lt;b&gt;case&lt;/b&gt; labels.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of &lt;b&gt;case&lt;/b&gt; labels expected.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DoubleNegation" displayName="Double negation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports double negation.
&lt;p&gt;
For example:
&lt;pre&gt;&lt;code&gt;&lt;b&gt;if&lt;/b&gt; (!!functionCall())&lt;/code&gt;&lt;/pre&gt;
  &lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyFallthrough" displayName="Fallthrough in switch statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;i&gt;fallthrough&lt;/i&gt; in switch statements.  While occasionally useful,
  fallthrough is often unintended, and may lead to surprising bugs.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyIfStatementWithTooManyBranches" displayName="If statement with too many branches" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;if&lt;/b&gt; statements with too many branches.
Such statements may be confusing, and are often the sign of inadequate levels of design
abstraction.
&lt;p&gt;
 Use the field provided below to specify the maximum number of branches expected.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="BreakStatement" displayName="&apos;break&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;break&lt;/b&gt; statements,
other than at the end of a &lt;b&gt;switch&lt;/b&gt; statement branch.
&lt;b&gt;break&lt;/b&gt; statements complicate refactoring, and can be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ContinueStatement" displayName="&apos;continue&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;continue&lt;/b&gt; statements.
&lt;b&gt;continue&lt;/b&gt; statements complicate refactoring, and can be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IfStatementWithIdenticalBranches" displayName="&apos;if&apos; statement with common parts" enabled="true">&lt;html&gt;
&lt;body&gt;
Inspection that can extract common parts from branches of if statement.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Before:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (x &gt; 12) {
    doSomethingBefore();
    doSomethingDifferent1();
    doSomethingAfter();
  } else {
    doSomething();
    doSomethingDifferent2();
    doSomethingAfter();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  doSomethingBefore();
  if (x &gt; 12) {
    doSomethingDifferent1();
  } else {
    doSomethingDifferent2();
  }
  doSomethingAfter();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Updated in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SwitchStatementWithConfusingDeclaration" displayName="Local variable used and declared in different &apos;switch&apos; branches" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports local variables declared in one branch of a &lt;b&gt;switch&lt;/b&gt; statement
and used in a different branch. Such declarations can be extremely confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyBreak" displayName="Break statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;break&lt;/b&gt; statements other than in switch statements.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ForLoopReplaceableByWhile" displayName="&apos;for&apos; loop may be replaced with &apos;while&apos; loop" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;for&lt;/b&gt; loops
which contain neither initialization or update components, and can thus be replaced by
simpler &lt;b&gt;while&lt;/b&gt; statements.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below if you wish this inspection to ignore &lt;b&gt;for&lt;/b&gt; loops with trivial or non-existent conditions.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimplifiableBooleanExpression" displayName="Simplifiable boolean expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports boolean expressions of the form&lt;br&gt;
&lt;code&gt;!(foo ^ bar)&lt;/code&gt; and &lt;code&gt;(foo &amp;&amp; bar) || !foo&lt;/code&gt;.&lt;br&gt;
Such expressions may be safely simplified to&lt;br&gt;
&lt;code&gt;foo == bar&lt;/code&gt; and &lt;code&gt;!foo || bar&lt;/code&gt; respectively.&lt;br&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 15&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyTrivialIf" displayName="Redundant &apos;if&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;if&lt;/b&gt; statements which can be simplified to single assignment
or
&lt;b&gt;return&lt;/b&gt; statements. For example:
 &lt;pre&gt;
    &lt;b&gt;if&lt;/b&gt;(foo())
    {
       &lt;b&gt;return true&lt;/b&gt;;
    }
    &lt;b&gt;else&lt;/b&gt;
    {
       &lt;b&gt;return false&lt;/b&gt;;
    }
&lt;/pre&gt;
can be simplified to
 &lt;pre&gt;
    &lt;b&gt;return&lt;/b&gt; foo();
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EnumSwitchStatementWhichMissesCases" displayName="Enum &apos;switch&apos; statement that misses case" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;switch&lt;/b&gt; statements
over enumerated types which do not include all of the enumerated type&apos;s elements as cases.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore &lt;b&gt;switch&lt;/b&gt; statements which have a &lt;b&gt;default&lt;/b&gt; branch.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyUnnecessaryContinue" displayName="Unnecessary &apos;continue&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary &lt;b&gt;continue&lt;/b&gt; statements at the end of loops.
These may be safely removed.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConditionalExpression" displayName="Conditional expression (?:)" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports the ternary condition operator. Some coding standards prohibit the use of
the condition operator, in favor of &lt;b&gt;if-else&lt;/b&gt; statements.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to ignore simple assignments and returns and thus allow constructs like this:
&lt;pre&gt;
    String s = (foo == null) ? &quot;&quot; : foo.toString();
&lt;/pre&gt;
&lt;p&gt;
Use the second checkbox below to ignore conditional expression in contexts where an if statement is not allowed.
For example when the conditional expression is used as an argument to a &lt;b&gt;super()&lt;/b&gt; constructor call, or inside a field initializer.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConditionalBreakInInfiniteLoop" displayName="Conditional break inside infinite loop" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;This inspection detects conditional breaks at the end or beginning and suggests move condition to loop&lt;/p&gt;
&lt;!-- tooltip end --&gt;
Example:
&lt;p&gt;&lt;code&gt;
  while(true) {
    if(i  == 23) break;
    i++;
  }
&lt;/code&gt;&lt;/p&gt;
Will be replaced with:
&lt;p&gt;&lt;code&gt;
  while(i != 23) {
    i++;
  }
&lt;/code&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LoopWithImplicitTerminationCondition" displayName="Loop with implicit termination condition" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;while&lt;/b&gt;,
&lt;b&gt;do-while&lt;/b&gt; and &lt;b&gt;for&lt;/b&gt;
loops which have the constant &lt;b&gt;true&lt;/b&gt; as their
only condition, but which still can be terminated by a containing
&lt;b&gt;if&lt;/b&gt; statement which can break out of the loop.
This &lt;b&gt;if&lt;/b&gt; statement must be the first or only statement
in a &lt;b&gt;while&lt;/b&gt; or &lt;b&gt;for&lt;/b&gt;
loops and the last or only statement in a &lt;b&gt;do-while&lt;/b&gt; loop.
Such a loop would be clearer if the if statement was removed and its condition
was made an explicit loop condition.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Version control">
    <inspection shortName="IgnoreFileDuplicateEntry" displayName="Ignore file duplicates" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks if an entry (pattern) is duplicated in the ignore file (e.g. .gitignore, .hgignore).
Duplicate entries in these files are redundant and can be removed.

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;
    # Output directories
    /out/
    /target/
    &lt;b&gt;&lt;span style=&quot;color: #BE9117; &quot;&gt;/out/&lt;/span&gt;&lt;/b&gt;
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="General">
    <inspection shortName="TestOnlyProblems" displayName="Test-only class or method call in production code" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports usages of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;@TestOnly&lt;/font&gt;&lt;/b&gt; - or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;VisibleForTesting&lt;/font&gt;&lt;/b&gt;
annotated methods and classes in production code.
&lt;br&gt; The problems are not reported if such method or class is referenced from
&lt;ul&gt;
  &lt;li&gt;code under &apos;Test Sources&apos; folder
  &lt;li&gt;test-class (JUnit/TestNG)
  &lt;li&gt;another &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;@TestOnly&lt;/font&gt;&lt;/b&gt;-annotated method
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantSuppression" displayName="Redundant suppression" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports usages of
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;@SuppressWarning&lt;/code&gt; annotation, or&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;// noinspection&lt;/code&gt; line comment, or&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/** noinspection */&lt;/code&gt; JavaDoc comment&lt;/li&gt;
&lt;/ul&gt;

which can be safely removed because inspection they affect is no longer applicable in this context.
&lt;p&gt;
  For example:
  &lt;code&gt;&lt;pre&gt;
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;public class&lt;/font&gt;&lt;/b&gt; C {
 // symbol is already private,
 // but annotation is still around
  @SuppressWarnings({&quot;WeakerAccess&quot;})
 &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;private boolean&lt;/font&gt;&lt;/b&gt; CONST = &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;true&lt;/font&gt;&lt;/b&gt;;
 &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;void&lt;/font&gt;&lt;/b&gt; f() {
    CONST = &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;false&lt;/font&gt;&lt;/b&gt;;
  }
}
&lt;/pre&gt;
  &lt;/code&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SSBasedInspection" displayName="Structural search inspection" enabled="true">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;This inspection allows to configure number of &lt;b&gt;Structural Search/Structural Replace&lt;/b&gt; templates to be applied to the file you are editing.
&lt;/p&gt;
&lt;p&gt;All matches are highlighted with the template name you have configured.
If you configured &lt;b&gt;Structural Replace&lt;/b&gt; pattern, corresponding replace would appear as a quick fix.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ProblematicWhitespace" displayName="Problematic whitespace" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports tabs used for indentation when the code style is configured to use only spaces. Reports spaces used for indentation when
the code style is configured to use only tabs. Reports spaces used for indentation and tabs used for alignment when the code
style is configured to use smart tabs.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InjectedReferences" displayName="Injected references" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks references injected by IntelliLang plugin.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Annotator" displayName="Annotator" enabled="false">&lt;html&gt;
&lt;body&gt;
Allows you to see problems reported by language annotators in the results of batch code inspection.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SyntaxError" displayName="Syntax error" enabled="false">&lt;html&gt;
&lt;body&gt;
Allows you to see syntax errors in the results of batch code inspection.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LongLine" displayName="Line is longer than allowed by code style" enabled="false">&lt;html&gt;
&lt;body&gt;
Inspection warns you of lines which are longer than &lt;b&gt;right margin&lt;/b&gt; parameter in &lt;b&gt;Code Style&lt;/b&gt; settings.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DefaultFileTemplate" displayName="Default File Template Usage" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspections reports usage of the default file template for File Header.
 &lt;p&gt;
Also, the inspection proposes to change default file template and its usage.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TodoComment" displayName="TODO comment" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;TODO&lt;/b&gt; comments in your code. The Format of
&lt;b&gt;TODO&lt;/b&gt; comments is configurable via the &lt;i&gt;Settings | Editor | TODO&lt;/i&gt; panel. Since
syntax highlighting for &lt;b&gt;TODO&lt;/b&gt; comments is already provided, it is expected that this will largely
be used in batch mode.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InconsistentLineSeparators" displayName="Inconsistent line separators" enabled="false">&lt;html&gt;
&lt;body&gt;
  This inspection detects files with line separators different from the project default.
  E.g. you set the line separator to &quot;\n&quot; in the Settings|Code Style|Line separator,
  and the file you are editing uses &apos;\r\n&apos; as a line separator.

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Visibility">
    <inspection shortName="MethodOverridesInaccessibleMethodOfSuper" displayName="Method overrides inaccessible method of superclass" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods with the same signature as an inaccessible method from super class, e.g. package-private method of super class in another package or private method.
Such methods may result in confusing semantics, particularly if the super method is ever made
publicly visible. A package-private method can only properly be overridden if
the subclass resides in the same package. Private methods can&apos;t be overridden.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodOverridesStaticMethod" displayName="Method tries to override static method of superclass" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;static&lt;/b&gt; methods with an identical signature as a &lt;b&gt;static&lt;/b&gt; method of a superclass.
Because &lt;b&gt;static&lt;/b&gt; methods cannot override methods in superclasses, this may result in confusing semantics.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LambdaParameterHidingMemberVariable" displayName="Lambda parameter hides field" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports lambda parameters named identically to fields of the surrounding classes or their superclasses.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore fields that are not actually visible from the lambda expression.
For example &lt;b&gt;private&lt;/b&gt; fields in a super class.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AmbiguousMethodCall" displayName="Call to inherited method looks like call to local method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports ambiguous super method calls from inside an inner or anonymous class, where a method
with identical signature is available in the surrounding class. In this situation a cursory
examination of the code may suggest a method in the surrounding class is
called, when in actual fact a method from the super class is called. To clarify the
intent of the code it is recommended to add a
&lt;b&gt;super&lt;/b&gt; qualifier to the method call.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InnerClassVariableHidesOuterClassVariable" displayName="Inner class field hides outer class field" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports inner class variables being named identically to member variables of a containing class.
Such a variable name may be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below the indicate whether this inspection should report all name clashes, or only
clashes with fields which are visible from the inner class.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeParameterHidesVisibleType" displayName="Type parameter hides visible type" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports type parameters being named
identically to visible types in the current scope. Such a parameter name may be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LocalVariableHidingMemberVariable" displayName="Local variable hides field" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports local variables named identically to visible fields of their class
or surrounding classes if it is a local variable inside of an inner or anonymous class.
Such a variable name may be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to ignore local variables hiding a super class field which is not visible.
&lt;p&gt;
Use the second checkbox below to ignore local variables in a static context.
For example when the local variable is inside a &lt;b&gt;static&lt;/b&gt; method
or inside a method which is inside an inner class which is &lt;b&gt;static&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassEscapesItsScope" displayName="Non-accessible class is exposed" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports usages of classes in field types and in method signatures where the class is less visible than the field or the method.
&lt;p&gt;
  Examples are a &lt;b&gt;public&lt;/b&gt; method which returns a &lt;b&gt;private&lt;/b&gt; inner class, or a &lt;b&gt;protected&lt;/b&gt; field
  whose type is a package-visible class.&lt;br&gt;
  While legal Java, such fields and methods aren&apos;t useful outside of the visibility scope of the classes used in the field or the method.
&lt;p&gt;
  In addition to that, in Java 9 a module may hide some of its classes by not exporting their packages.&lt;br&gt;
  If the public API of a class in an exported package references a class from non-exported package,
  such API isn&apos;t useful outside of the module.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The options of what is checked are:
&lt;ul&gt;
  &lt;li&gt;The module API - the public&amp;protected fields&amp;methods within exported packages (for Java 9+)&lt;/li&gt;
  &lt;li&gt;The public&amp;protected fields&amp;methods (the &quot;public API&quot;) in all packages&lt;/li&gt;
  &lt;li&gt;The package-local fields&amp;methods&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AmbiguousFieldAccess" displayName="Access of inherited field looks like access of element in surrounding code" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports ambiguous accesses of a super class field from an inner or anonymous class, where a local variable, parameter or field with identical name is available
in the surrounding code. In this situation a cursory examination of the code may suggest that an element in the surrounding code is
accessed, when in actual fact a field from the super class is accessed. To clarify the intent of the code it is recommended to add a
&lt;b&gt;super&lt;/b&gt; qualifier to the field access.
&lt;p&gt;Example:
&lt;pre&gt;&lt;code&gt;
&lt;b&gt;class&lt;/b&gt; X {
  &lt;b&gt;protected&lt;/b&gt; String s;
}
&lt;b&gt;class&lt;/b&gt; Y {
  &lt;b&gt;void&lt;/b&gt; foo(String s) {
    &lt;b&gt;new&lt;/b&gt; X() {{
      System.out.println(s); // here the field is accessed not the parameter
    }};
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AnonymousClassVariableHidesContainingMethodVariable" displayName="Anonymous class variable hides variable in containing method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous class variables being named identically to variables of a containing method or lambda expression.
Such a variable name may be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Java9UndeclaredServiceUsage" displayName="Usage of service not declared in &apos;module-info&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
The inspection detects situations when a service is loaded with &lt;code&gt;java.util.ServiceLoader&lt;/code&gt;
but it isn&apos;t declared with &lt;code&gt;uses&lt;/code&gt; clause in the &lt;code&gt;module-info.java&lt;/code&gt; file.
&lt;p&gt;
  &lt;small&gt;New in 2018.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodOverloadsParentMethod" displayName="Method overloads method of superclass" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports instance methods having the same name and the same number of parameters with the same or compatible types as
a method in a superclass. In this case, the child method overloads the parent method, instead of overriding it.
While that may be intended, if unintended it may result in latent bugs.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below also report even if the parameter types are not compatible.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ParameterHidingMemberVariable" displayName="Parameter hides field" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports method parameters named identically to visible fields of their class
or surrounding classes if it is a parameter inside of an inner or anonymous class.
Such a parameter name may be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox to ignore parameters of simple setters.
&lt;p&gt;
Use the second checkbox to ignore for private fields in a superclass, which are not visible from the parameter.
&lt;p&gt;
Use the third checkbox to ignore parameters of constructors.
&lt;p&gt;
Use the fourth checkbox to ignore parameters of abstract methods.
&lt;p&gt;
Use the fifth checkbox to ignore parameters of &lt;b&gt;static&lt;/b&gt; methods hiding an instance field and
to ignore parameters of instance methods in static inner classes hiding an instance field in an outer class.
While not strictly hiding, such parameters can still be confusing.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldHidesSuperclassField" displayName="Field name hides field in superclass" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports fields with the same name as a field in an ancestor class. Such field
names may be confusing, and can be bug-prone.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to indicate whether this inspection should report all name clashes, or only
clashes with fields which are visible from the subclass.
&lt;p&gt;
Use the second checkbox below to ignore &lt;b&gt;static&lt;/b&gt; fields which hide &lt;b&gt;static&lt;/b&gt; fields in super classes.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Java9ModuleExportsPackageToItself" displayName="Module exports/opens package to itself" enabled="false">&lt;html&gt;
&lt;body&gt;
The inspection detects a situation where a package is exported or opened to the same Java 9 module where it&apos;s defined.
&lt;br&gt;Example:
&lt;code&gt;module &lt;b&gt;B&lt;/b&gt; { exports org.example to A, &lt;b&gt;B&lt;/b&gt;, C; }&lt;/code&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Resource management">
    <inspection shortName="JDBCResource" displayName="JDBC resource opened but not safely closed" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any JDBC resource which is not safely closed in a &lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed. JDBC resources reported
by this inspection include &lt;b&gt;java.sql.Connection&lt;/b&gt;,
&lt;b&gt;java.sql.Statement&lt;/b&gt;,
&lt;b&gt;java.sql.PreparedStatement&lt;/b&gt;,
&lt;b&gt;java.sql.CallableStatement&lt;/b&gt;,
and &lt;b&gt;java.sql.ResultSet&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to specify if a JDBC resource is allowed to be opened &lt;i&gt;inside&lt;/i&gt; a &lt;b&gt;try&lt;/b&gt;
block. This style is less desirable because it is more verbose than opening a resource
&lt;i&gt;in front of&lt;/i&gt; a &lt;b&gt;try&lt;/b&gt; block.
&lt;p&gt;
Use the second checkbox below to specify that the inspection should not warn if a JDBC resource is passed as a method call argument.
If enabled the inspection assumes the resource is closed in the called method.
Method calls inside a &lt;b&gt;finally&lt;/b&gt; block with &lt;i&gt;close&lt;/i&gt; in the name and an JDBC resource argument will not be ignored.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IOResource" displayName="I/O resource opened but not safely closed" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any I/O resource which is not safely closed in a &lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed. I/O resources checked
by this inspection include &lt;b&gt;java.io.InputStream&lt;/b&gt;,
&lt;b&gt;java.io.OutputStream&lt;/b&gt;,
&lt;b&gt;java.io.Reader&lt;/b&gt;,
&lt;b&gt;java.io.Writer&lt;/b&gt; and
&lt;b&gt;java.io.RandomAccessFile&lt;/b&gt;. I/O resources which are wrapped by other I/O resources
are not reported, as the wrapped resource will be closed by the wrapping resource.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify which I/O resources should be ignored by this inspection.
Specify I/O resource classes here which do not need to be closed.
&lt;p&gt;
Use the first checkbox below to specify if an I/O resource is allowed to be opened &lt;i&gt;inside&lt;/i&gt; a &lt;b&gt;try&lt;/b&gt;
block. This style is less desirable because it is more verbose than opening a resource &lt;i&gt;in front of&lt;/i&gt; a &lt;b&gt;try&lt;/b&gt;
block.
&lt;p&gt;
Use the second checkbox below to specify that the inspection should not warn if an I/O resource is passed as a method call argument.
If enabled the inspection assumes the resource is closed in the called method.
Method calls inside a &lt;b&gt;finally&lt;/b&gt; block with &lt;i&gt;close&lt;/i&gt; in the name and an I/O resource argument will not be ignored.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JNDIResource" displayName="JNDI resource opened but not safely closed" enabled="true">
&lt;html&gt;
&lt;body&gt;
Reports any JNDI resource which is not safely closed in a &lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed. JNDI resources reported
by this inspection include &lt;b&gt;javax.naming.InitialContext&lt;/b&gt;,
and &lt;b&gt;javax.naming.NamingEnumeration&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to specify if a JNDI Resource is allowed to be opened &lt;i&gt;inside&lt;/i&gt; a &lt;b&gt;try&lt;/b&gt;
block. This style is less desirable because it is more verbose than opening a resource
&lt;i&gt;in front of&lt;/i&gt; a &lt;b&gt;try&lt;/b&gt; block.
&lt;p&gt;
Use the second checkbox below to specify that the inspection should not warn if a JNDI resource is passed as a method call argument.
If enabled the inspection assumes the resource is closed in the called method.
Method calls inside a &lt;b&gt;finally&lt;/b&gt; block with &lt;i&gt;close&lt;/i&gt; in the name and a JNDI resource argument will not be ignored.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AutoCloseableResource" displayName="AutoCloseable used without &apos;try&apos;-with-resources" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;AutoCloseable&lt;/b&gt; instances which are not used in a try-with-resources statement, also known as
&lt;i&gt;Automatic Resource Management&lt;/i&gt;.
This means that the open resource before/in &lt;b&gt;try&lt;/b&gt;, close in &lt;b&gt;finally&lt;/b&gt; style which was used before
try-with-resources was available is also reported.
This inspection is meant to replace all &lt;i&gt;opened but not safely closed&lt;/i&gt; inspections when developing in Java 7 and higher.
&lt;p&gt;
Use the first table below to specify which AutoCloseable subclasses should be ignored by this inspection.
Specify AutoCloseable subclasses here which do not need to be closed.
&lt;p&gt;
  &lt;b&gt;Note&lt;/b&gt;: This inspection will still warn on streams returned from the java.nio.file.Files methods lines(), walk(), list() and find(),
  even when java.util.stream.Stream is specified to be ignored in this table.
  These streams contain an associated I/O resource that needs to be closed.
&lt;/p&gt;
&lt;p&gt;
Use the second table below to specify which methods returning AutoCloseable will be ignored when called.
&lt;p&gt;
Use the first checkbox below to ignore an AutoCloseable if it the result of a method call.
When enabled, the results of factory methods will also be ignored.
&lt;p&gt;
Use the second checkbox below to specify that the inspection should not warn if an AutoCloseable instance is passed
as a method call argument.
If enabled the inspection assumes the resource is closed in the called method.
Method calls inside a &lt;b&gt;finally&lt;/b&gt; block with &lt;i&gt;close&lt;/i&gt; in the name and an AutoCloseable argument will not be ignored.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HibernateResource" displayName="Hibernate resource opened but not safely closed" enabled="false">
&lt;html&gt;
&lt;body&gt;
Reports any Hibernate resource which is not safely closed in a &lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed. Hibernate resources reported
by this inspection include &lt;b&gt;org.hibernate.Session&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to specify if a Hibernate resource is allowed to be opened &lt;i&gt;inside&lt;/i&gt; a &lt;b&gt;try&lt;/b&gt;
block. This style is less desirable because it is more verbose than opening a resource
&lt;i&gt;in front of&lt;/i&gt; a &lt;b&gt;try&lt;/b&gt; block.
&lt;p&gt;
Use the second checkbox below to specify that the inspection should not warn if a Hibernate resource is passed as a method call argument.
If enabled the inspection assumes the resource is closed in the called method.
Method calls inside a &lt;b&gt;finally&lt;/b&gt; block with &lt;i&gt;close&lt;/i&gt; in the name and a Hibernate resource argument will not be ignored.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ChannelResource" displayName="Channel opened but not safely closed" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any Channel which is not safely closed in a &lt;b&gt;finally&lt;/b&gt; block.
Such resources may be inadvertently leaked
if an exception is thrown before the resource is closed. Channel resources reported
by this inspection include any instances created by calling
getChannel() on a file or socket resource.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to specify if a Channel is allowed to be opened &lt;i&gt;inside&lt;/i&gt; a &lt;b&gt;try&lt;/b&gt;
block. This style is less desirable because it is more verbose than opening a Channel
&lt;i&gt;in front of&lt;/i&gt; a &lt;b&gt;try&lt;/b&gt; block.
&lt;p&gt;
Use the second checkbox below to specify that the inspection should not warn if a Channel instance is passed as a method call argument.
If enabled the inspection assumes the Channel is closed in the called method.
Method calls inside a &lt;b&gt;finally&lt;/b&gt; block with &lt;i&gt;close&lt;/i&gt; in the name and a Channel argument will not ignored.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DriverManagerGetConnection" displayName="Use of DriverManager to get JDBC connection" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any uses of &lt;b&gt;java.sql.DriverManager&lt;/b&gt;
to acquire a JDBC connection. The &lt;b&gt;java.sql.DriverManager&lt;/b&gt;
has been superseded by &lt;b&gt;javax.sql.Datasource&lt;/b&gt;, which
allows for connection pooling and other optimizations.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SocketResource" displayName="Socket opened but not safely closed" enabled="true">
&lt;html&gt;
&lt;body&gt;
Reports any Socket resource which is not safely closed in a &lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed. Socket resources reported
by this inspection include &lt;b&gt;java.net.Socket&lt;/b&gt;,
&lt;b&gt;java.net.DatagramSocket&lt;/b&gt;,
and &lt;b&gt;java.net.ServerSocket&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to specify if a Socket is allowed to be opened &lt;i&gt;inside&lt;/i&gt; a &lt;b&gt;try&lt;/b&gt;&apos;
block. This style is less desirable because it is more verbose than opening a Socket
&lt;i&gt;in front of&lt;/i&gt; a &lt;b&gt;try&lt;/b&gt; block.
&lt;p&gt;
Use the second checkbox below to specify that the inspection should not warn if a Socket is passed as a method call argument.
If enabled the inspection assumes the Socket is closed in the called method.
Method calls inside a &lt;b&gt;finally&lt;/b&gt; block with &lt;i&gt;close&lt;/i&gt; in the name and a Socket argument will not be ignored.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Description file">
    <inspection shortName="PostfixTemplateDescriptionNotFound" displayName="Postfix template description checker" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks if postfix template (completion) has a description.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="InspectionDescriptionNotFoundInspection" displayName="Inspection description checker" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects missing HTML-description for an inspection.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="IntentionDescriptionNotFoundInspection" displayName="Intention description checker" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks if intention has a description.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Ant">
    <inspection shortName="AntMissingPropertiesFileInspection" displayName="Missing properties file" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;
        Reports missing &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;properties files&lt;/font&gt;&lt;/b&gt;.
      &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AntDuplicateTargetsInspection" displayName="Duplicate targets" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;
        Reports duplicate &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;targets&lt;/font&gt;&lt;/b&gt; in
        current build file.
      &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AntResolveInspection" displayName="Ant references resolve problems" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;

      Reports unresolved references on properties as well as custom type definitions that cannot be resolved.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Assignment issues">
    <inspection shortName="GroovyAssignabilityCheck" displayName="Incompatible type assignments" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports assignments with incompatible types.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyAssignmentCanBeOperatorAssignment" displayName="Assignment replaceable with operator assignment" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports assignment operations which can be replaced by operator-assignment. Code
using operator assignment may be clearer, and theoretically more performant.
&lt;p&gt;
 Use the check box below to ignore the conditional operators &lt;b&gt;&amp;amp;&amp;amp;&lt;/b&gt;
 and &lt;b&gt;||&lt;/b&gt;. Replacing conditional operators with operator
 assignment modifies the semantics of the expression.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AssignmentToStaticFieldFromInstanceMethod" displayName="Assignment to static field from instance context" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any assignments to &lt;b&gt;static&lt;/b&gt; fields from within
instance methods. While legal, such assignments are tricky to do
safely, and are often a result of fields being inadvertently marked
&lt;b&gt;static&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyAssignmentToForLoopParameter" displayName="Assignment to for-loop parameter" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports assignment to or modification of &lt;b&gt;for&lt;/b&gt; statement parameters inside the &lt;b&gt;for&lt;/b&gt; loop body.
While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyNestedAssignment" displayName="Nested assignment" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports assignment expressions nested inside other expressions.
While admirably terse,
such expressions may be confusing, and violate the general design principle that a given construct
should do precisely one thing.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AssignmentToMethodParameter" displayName="Assignment to method parameter" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports assignment to a
variable declared as a method parameter. It also reports any attempt to increment or decrement the variable.
While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyAssignmentToMethodParameter" displayName="Assignment to method parameter" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports assignment to or modification of a
variable declared as a method parameter.
While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AssignmentToNull" displayName="&apos;null&apos; assignment" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports the assignment of a variable to
&lt;b&gt;null&lt;/b&gt;, outside of declarations.
While occasionally useful for triggering garbage collection, this
construct may make the code more prone
to NullPointerExceptions, and often indicates that the developer doesn&apos;t
really understand the class&apos;s intended semantics.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore assignments to fields.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovySillyAssignment" displayName="Silly assignment" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports assignments of a variable to itself.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyResultOfAssignmentUsed" displayName="Result of assignment used" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports assignment expressions nested inside other expressions, so as to use the assigned value immediately.
While admirably terse, such expressions may be confusing, and violate the general design principle that a
given construct should do precisely one thing.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReplaceAssignmentWithOperatorAssignment" displayName="Assignment replaceable with operator assignment" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports assignment operations which can be replaced by operator-assignment. Code
using operator assignment may be clearer, and theoretically more performant.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore the conditional operators &lt;b&gt;&amp;amp;&amp;amp;&lt;/b&gt;
and &lt;b&gt;||&lt;/b&gt;. Replacing conditional operators with operator
assignment modifies the semantics of the expression.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssignmentToForLoopParameter" displayName="Assignment to &apos;for&apos; loop parameter" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports assignment to, or modification of &lt;b&gt;for&lt;/b&gt; statement parameters inside the &lt;b&gt;for&lt;/b&gt; loop body.
While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.
&lt;p&gt;
Assignments in basic &lt;b&gt;for&lt;/b&gt; loops without an update statement are not reported.
In these cases the assignment is probably intended and can&apos;t be easily moved to the update part of the &lt;b&gt;for&lt;/b&gt; loop.
For example:
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;for&lt;/b&gt; (&lt;b&gt;int&lt;/b&gt; i = 0; i &amp;lt; list.size(); ) {
    &lt;b&gt;if&lt;/b&gt; (element.equals(list.get(i))) {
      list.remove(i);
    } &lt;b&gt;else&lt;/b&gt; {
      i++; // modification of for loop parameter
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssignmentToSuperclassField" displayName="Constructor assigns value to field defined in superclass" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any assignments to fields from a superclass from within a constructor. It is usually better to call a constructor of the
superclass to initialize the fields.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NestedAssignment" displayName="Result of assignment used" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports assignment expressions nested inside other expressions. While admirably terse,
such expressions may be confusing, and violate the general design principle that a given construct should do precisely one thing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssignmentUsedAsCondition" displayName="Assignment used as condition" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports an assignment being
used as the condition of an &lt;b&gt;if&lt;/b&gt;, &lt;b&gt;while&lt;/b&gt;, &lt;b&gt;for&lt;/b&gt; or
&lt;b&gt;do&lt;/b&gt; statement. While occasionally intended,
this usage is confusing, and often indicates a typo
(&lt;b&gt;=&lt;/b&gt; instead of &lt;b&gt;==&lt;/b&gt;).
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IncrementDecrementUsedAsExpression" displayName="Value of ++ or -- used" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports increment or decrement expressions nested inside other expressions.
While admirably terse, such expressions may be confusing, and violate the general design principle that a
given construct should do precisely one thing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyUncheckedAssignmentOfMemberOfRawType" displayName="Unchecked assignment from members of raw type" enabled="false">&lt;html&gt;
&lt;body&gt;
        Reports unchecked assignments from members of raw type.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AssignmentToLambdaParameter" displayName="Assignment to lambda parameter" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports assignments to a lambda parameter, this includes compound assignments and incrementing or decrementing the parameter.
While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssignmentToCatchBlockParameter" displayName="Assignment to catch block parameter" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports assignment to variable declared as a &lt;b&gt;catch&lt;/b&gt; block parameter.
While occasionally intended, this construct can be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Potentially confusing code constructs">
    <inspection shortName="GroovyOverlyComplexBooleanExpression" displayName="Overly complex boolean expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports boolean expressions with too many terms. Such
expressions may be confusing and bug-prone.
&lt;p&gt;
 Use the field provided below to specify the maximum number of terms allowed in an boolean expression.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GrDeprecatedAPIUsage" displayName="Deprecated API inspection" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports usages of deprecated code.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyConditional" displayName="Conditional expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports the ternary condition operator. Some coding standards prohibit the use of
the condition operator, in favor of &lt;b&gt;if-else&lt;/b&gt; statements.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyPointlessArithmetic" displayName="Pointless arithmetic expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports pointless arithmetic
expressions. Such expressions include adding or subtracting zero, multiplying by zero or one,
division by one, and shift by zero. Such expressions may be the result of automated refactorings
not completely followed through to completion, and in any case are unlikely to be what the developer
intended to do.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ClashingGetters" displayName="Clashing getters" enabled="false">&lt;html&gt;
&lt;body&gt;

  Assume you have two methods with signatures &apos;getX()&apos; and &apos;isX()&apos;. Both methods are getters for property &apos;x&apos;. So the result of invoking
  &apos;foo.x&apos; can be unexpected.
  Reports methods which have such a problem.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyResultOfIncrementOrDecrementUsed" displayName="Result of increment or decrement used" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports increment or decrement expressions nested inside other expressions.
While admirably terse, such expressions may be confusing, and violate the general design principle that a
given construct should do precisely one thing.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ClashingTraitMethods" displayName="Clashing trait methods" enabled="false">&lt;html&gt;
&lt;body&gt;
  Assume you have two traits which contains methods with the same signatures e.g. &apos;foo()&apos; and you create a class &apos;MyImplementor&apos; implementing both these traits. So the result of invoking
  &apos;new MyImplementor().foo()&apos; can be unexpected.
  Reports classes which have such a problem.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyNestedConditional" displayName="Nested conditional expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports ternary conditional expressions that are nested inside other
conditional expressions.  Such nested conditionals may be very confusing.  &quot;Elvis&quot; expressions are counted as conditionals
for purpose of this inspection.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyPointlessBoolean" displayName="Pointless boolean expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports pointless or pointlessly
complicated boolean expressions. Such expressions include &lt;b&gt;and&lt;/b&gt;ing with true,
&lt;b&gt;or&lt;/b&gt;ing with false,
equality comparison with a boolean literal, or negation of a boolean literal. Such expressions may be
the result of automated refactorings
not completely followed through to completion, and in any case are unlikely to be what the developer
intended to do.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyNestedSwitch" displayName="Nested switch statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;switch&lt;/b&gt; statements that are nested inside other
&lt;b&gt;switch&lt;/b&gt; statements. Such nested switch statements are confusing, and may result in unexpected behaviour.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyOctalInteger" displayName="Octal integer" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports octal integer literals. Some coding standards prohibit the
use of octal literals, as they may be easily confused with decimal literals.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyGStringKey" displayName="GString map key" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports statements which use a &lt;b&gt;GString&lt;/b&gt; object as a key to map.
In general &lt;b&gt;GString&lt;/b&gt; objects are mutable and probably should not be used as keys.
&lt;p&gt;
Also, a &lt;b&gt;GString&lt;/b&gt; entry cannot be accessed with a &lt;b&gt;java.lang.String&lt;/b&gt; object with same value. Example:
&lt;br&gt;
&lt;pre&gt;
    def map = [:]
    &lt;b&gt;def&lt;/b&gt; key = &apos;foo&apos;
    map &amp;lt&amp;lt [&quot;${key}&quot;: &apos;bar&apos;]
    &lt;b&gt;assert &lt;/b&gt; map[key] == &lt;b&gt;null&lt;/b&gt;
&lt;/pre&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyEmptyStatementBody" displayName="Statement with empty body" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;if&lt;/b&gt;, &lt;b&gt;while&lt;/b&gt;, &lt;b&gt;do&lt;/b&gt; or &lt;b&gt;for&lt;/b&gt; statements
with empty bodies. While occasionally intended, this construction is confusing, and often the result of a typo.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnnecessaryQualifiedReference" displayName="Unnecessary qualified reference" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports fully qualified references which can be replaced with import.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyDoubleNegation" displayName="Double negation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports double negation, for example: &lt;b&gt;if (!!functionCall())&lt;/b&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyOverlyComplexArithmeticExpression" displayName="Overly complex arithmetic expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports arithmetic expressions with too many terms. Such
expressions may be confusing and bug-prone.
&lt;p&gt;
 Use the field provided below to specify the maximum number of terms allowed in an arithmetic expression.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyNegatedIf" displayName="Negated if condition expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;if&lt;/b&gt; statements
which contain &lt;b&gt;else&lt;/b&gt; branches and whose conditions are negated.
Flipping the order of the &lt;b&gt;if&lt;/b&gt; and &lt;b&gt;else&lt;/b&gt;
branches will usually increase the clarity of such statements.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GrPackage" displayName="Package mismatch" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports files with a declared package that does not match the package expected.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GrReassignedInClosureLocalVar" displayName="Local variable is reassigned in closure or anonymous class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports local variables assigned to expression with different type inside of closure of anonymous class.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NewInstanceOfSingleton" displayName="New instance of class annotated with @groovy.lang.Singleton" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports new instance creation of classes annotated with &lt;b&gt;@groovy.lang.Singleton&lt;/b&gt;.
Such constructions can lead to runtime exception &quot;Can&apos;t instantiate singleton&quot;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyNegatedConditional" displayName="Negated conditional expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions whose conditions are negated.
Flipping the order of the conditional expression branches will usually increase the clarity of such
statements.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Java language level migration aids">
    <inspection shortName="IfCanBeSwitch" displayName="&apos;if&apos; replaceable with &apos;switch&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;if&lt;/b&gt; statements that can be replaced
by a &lt;b&gt;switch&lt;/b&gt; statement. This inspection will automatically suggest string
switches when the project language level is Java 7 or higher.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the text field below to indicate the minimum number of &lt;b&gt;if&lt;/b&gt; branches with condition
an &lt;b&gt;if&lt;/b&gt; statement should have to be reported.
A terminal &lt;b&gt;else&lt;/b&gt; branch (without &lt;b&gt;if&lt;/b&gt;) is not counted
&lt;p&gt;
Use the first checkbox below to have this inspection suggest &lt;b&gt;switch&lt;/b&gt; statements on
primitive and boxed numbers and characters.
&lt;p&gt;
Use the second checkbox below to have this inspection suggest switch statements on
enum constants.
&lt;p&gt;
Use the third checkbox below to only suggest switch statements which can&apos;t introduce a &lt;b&gt;NullPointerException&lt;/b&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Since15" displayName="Usages of API which isn&apos;t available at the configured language level" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection finds all usages of methods that have &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;@since&lt;/font&gt;&lt;/b&gt; tag in
their documentation.&lt;br&gt;&lt;br&gt;
This may be useful when development is performed under newer SDK version as the target platform for production.&lt;br&gt;&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UseCompareMethod" displayName="&apos;compare()&apos; method can be used to compare numbers" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;This inspection suggests to use &lt;code&gt;Integer.compare()&lt;/code&gt;, etc. static methods where more verbose or less efficient constructs are
  used. For example, &lt;code&gt;x &amp;gt; y ? 1 : x &amp;lt; y ? -1 : 0&lt;/code&gt; or &lt;code&gt;Integer.valueOf(x).compareTo(y)&lt;/code&gt; could be
  replaced with &lt;code&gt;Integer.compare(x, y)&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are already boxed integers, then
  &lt;code&gt;x.compareTo(y)&lt;/code&gt; is suggested.
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Double.compare&lt;/code&gt; and &lt;code&gt;Float.compare&lt;/code&gt; methods appeared in Java 1.4, methods for other primitive types
   are available since Java 1.7&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EnumerationCanBeIteration" displayName="Enumeration can be iteration" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;Enumeration&lt;/b&gt; methods
used, which can be replaced equivalent &lt;b&gt;Iterator&lt;/b&gt;
constructs. &lt;b&gt;Iterator&lt;/b&gt;s are part of the Java
Collection Framework, which has been available since Java 1.2.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Verbose or redundant code constructs">
    <inspection shortName="RedundantCompareCall" displayName="Redundant &apos;compare&apos; method call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports comparisons like &lt;b&gt;Integer.compare(a, b) == 0&lt;/b&gt; which could be replaced simply with &lt;b&gt;a == b&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantTypeArguments" displayName="Redundant type arguments" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports all calls to parametrized methods where explicit argument types
can be omitted, since they will be unambiguously inferred by compiler. &lt;br&gt;
Such usages make code excessive and thus less readable. &lt;br&gt; &lt;br&gt;
For example if you have a call to parametrized method like:
 &lt;pre&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;this&lt;/font&gt;&lt;/b&gt;.&amp;lt;String&amp;gt;addItem(&lt;font color=&quot;#008000&quot;&gt;&quot;&quot;&lt;/font&gt;);
&lt;/pre&gt;
- the usage of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&amp;lt;String&amp;gt;&lt;/font&gt;&lt;/b&gt; will be highlighted. &lt;br&gt; &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="StringOperationCanBeSimplified" displayName="Redundant String operation" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports a variety of redundant String-related operations like calling &lt;b&gt;String.toString()&lt;/b&gt; or &lt;b&gt;String.substring(0)&lt;/b&gt;.
Also, reports usage of redundant String constructors like &lt;b&gt;new String()&lt;/b&gt; (equivalent to &lt;b&gt;&quot;&quot;&lt;/b&gt;) or &lt;b&gt;new String(anotherString)&lt;/b&gt;
(equivalent to &lt;b&gt;anotherString&lt;/b&gt;). Such code, when fixed, may change the program semantics if String referential equality is
important (which is commonly considered as a bad practice). In this case, consider suppressing the warning.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CastCanBeRemovedNarrowingVariableType" displayName="Too weak variable type leads to unnecessary cast" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports type casts which could be removed if the variable type is narrowed to the cast type. Example:
&lt;pre&gt;
  Object x = &quot;  string  &quot;;
  System.out.println(((String)x).trim());
&lt;/pre&gt;
Here changing the type of &lt;b&gt;x&lt;/b&gt; to &lt;b&gt;String&lt;/b&gt; will make the cast redundant. The suggested quick-fix updates variable type and
removes all redundant casts on that variable.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantCollectionOperation" displayName="Redundant Collection operation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessarily complex collection operations which have simpler alternatives. E.g.
&lt;b&gt;Arrays.asList(array).subList(0, 10).toArray(new String[0])&lt;/b&gt; could be simplified to
&lt;b&gt;Arrays.copyOfRange(array, 0, 10)&lt;/b&gt; or &lt;b&gt;collection.containsAll(singletonList(&quot;x&quot;))&lt;/b&gt; could be
simplified to &lt;b&gt;collection.contains(&quot;x&quot;)&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryDefault" displayName="Unnecessary &apos;default&apos; for enum &apos;switch&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports enum &lt;b&gt;switch&lt;/b&gt; statements or expression with&lt;b&gt;default&lt;/b&gt; branches which can never be taken,
because all possible values are covered by a &lt;b&gt;case&lt;/b&gt; branch.
These are unnecessary, especially for &lt;b&gt;switch&lt;/b&gt; expressions, because they don&apos;t compile when all
enum constants are not covered by a &lt;b&gt;case&lt;/b&gt; branch.
&lt;p&gt;
  The language level needs to be at least Java 12 Preview to report &lt;b&gt;switch&lt;/b&gt; expressions.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantComparatorComparing" displayName="Comparator can be simplified" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports redundant Comparator combinator constructs like &lt;b&gt;thenComparing(Comparator.comparing(function))&lt;/b&gt;
which can be simplified to &lt;b&gt;thenComparing(function)&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DuplicateExpressions" displayName="Multiple occurrences of the same expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports multiple equivalent occurrences of the same expression within a method (or constructor, or class initializer)
if the result of the expression can be reused.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The expression is reported if it&apos;s free of side effects and its result is always the same (in terms of &lt;code&gt;Object.equals()&lt;/code&gt;).
  The examples of such expressions are &lt;code&gt;a + b&lt;/code&gt;, &lt;code&gt;Math.max(a, b)&lt;/code&gt;, &lt;code&gt;a.equals(b)&lt;/code&gt;,
  &lt;code&gt;s.substring(a,b)&lt;/code&gt;. To make sure the result is always the same, it&apos;s verified that the variables used in the expression don&apos;t
  change their values between the occurrences of the expression.&lt;/p&gt;
&lt;p&gt;
  Such expressions may contain methods of immutable classes like &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;BigDecimal&lt;/code&gt;, etc,
  and of utility classes like &lt;code&gt;Objects&lt;/code&gt;, &lt;code&gt;Math&lt;/code&gt; (except &lt;code&gt;random()&lt;/code&gt;).
  The well-known methods, such as &lt;code&gt;Object.equals()&lt;/code&gt;, &lt;code&gt;Object.hashCode()&lt;/code&gt;, &lt;code&gt;Object.toString()&lt;/code&gt;,
  &lt;code&gt;Comparable.compareTo()&lt;/code&gt;, and &lt;code&gt;Comparator.compare()&lt;/code&gt; are OK as well because they normally don&apos;t have
  any observable side effects.
&lt;/p&gt;

&lt;p&gt;&lt;small&gt;New in 2018.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryLabelOnContinueStatement" displayName="Unnecessary label on &apos;continue&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;continue&lt;/b&gt; statements with unnecessary
labels.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringBufferReplaceableByString" displayName="&apos;StringBuilder&apos; can be replaced with &apos;String&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any usages of &lt;b&gt;StringBuffer&lt;/b&gt;, &lt;b&gt;StringBuilder&lt;/b&gt; or &lt;b&gt;StringJoiner&lt;/b&gt;
which can be replaced with a single &lt;b&gt;java.lang.String&lt;/b&gt; concatenation. Using a &lt;b&gt;String&lt;/b&gt; concatenation
makes the code shorter and simpler. Example:
&lt;pre&gt;
  StringBuilder result = new StringBuilder();
  result.append(&quot;i = &quot;);
  result.append(i);
  result.append(&quot;;&quot;);
  return result.toString();
&lt;/pre&gt;
&lt;p&gt;
  This code could be replaced with
&lt;/p&gt;
&lt;pre&gt;
  String result = &quot;i = &quot; + i + &quot;;&quot;;
  return result;
&lt;/pre&gt;
&lt;p&gt;
This inspection only reports when the suggested replacement does not result in significant 
performance drawback on modern JVMs. In many cases the String concatenation may perform better. 
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryReturn" displayName="Unnecessary &apos;return&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on any unnecessary &lt;b&gt;return&lt;/b&gt; statements at the end of constructors and methods returning
&lt;b&gt;void&lt;/b&gt;. These may be safely removed.
&lt;p&gt;
At present, this inspection is disabled in JSP files.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to let this inspection ignore &lt;b&gt;return&lt;/b&gt; statements in the then branch of &lt;b&gt;if&lt;/b&gt; statements
which also have an &lt;b&gt;else&lt;/b&gt; branch.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExcessiveRangeCheck" displayName="Excessive range check" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports condition chains where a value range is checked which could be simplified to a single check. E.g. &lt;b&gt;x &gt; 2 &amp;&amp; x &amp;lt; 4&lt;/b&gt; could be
  simplified to &lt;b&gt;x == 3&lt;/b&gt; or &lt;b&gt;arr.length == 0 || arr.length &gt; 1&lt;/b&gt; could be simplified to &lt;b&gt;arr.length != 1&lt;/b&gt;. 
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryContinue" displayName="Unnecessary &apos;continue&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on any unnecessary &lt;b&gt;continue&lt;/b&gt; statements at the end of loops.
These may be safely removed.
&lt;p&gt;
At present, this inspection is disabled in JSP files.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ManualMinMaxCalculation" displayName="Manual min/max calculation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports cases where the minimum or the maximum of two numbers can be calculated by means of
&lt;code&gt;Math.max()&lt;/code&gt; or &lt;code&gt;Math.min()&lt;/code&gt; instead of doing it manually.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;
  public int getMinWeight(int typeDiffWeight, int rawTypeDiffWeight) {
    return (rawTypeDiffWeight &amp;lt; typeDiffWeight ? rawTypeDiffWeight : typeDiffWeight);
  }
&lt;/pre&gt;
&lt;p&gt;Will be replaced with:&lt;/p&gt;
&lt;pre&gt;
  public int getMinWeight(int typeDiffWeight, int rawTypeDiffWeight) {
    return Math.min(rawTypeDiffWeight, typeDiffWeight);
  }
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2019.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DuplicateBranchesInSwitch" displayName="Duplicate branches in &apos;switch&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;switch&lt;/code&gt; statements containing the same code in different branches.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExplicitArrayFilling" displayName="Explicit array filling" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports loops which could be replaced with the &lt;code&gt;Arrays.setAll()&lt;/code&gt; or &lt;code&gt;Arrays.fill()&lt;/code&gt; calls.
This inspection suggests replacing loops with &lt;code&gt;Arrays.setAll()&lt;/code&gt; if the language level of the project or module is 8 or higher.
Replacing loops with &lt;code&gt;Arrays.fill()&lt;/code&gt; is possible with any language level.
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
  for (int i=0; i&amp;lt;array.length; i++) {
     array[i] = calc(i);
  }
&lt;/pre&gt;
&lt;p&gt;Will be replaced with:&lt;/p&gt;
&lt;pre&gt;
  Arrays.setAll(array, this::calc);
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExcessiveLambdaUsage" displayName="Excessive lambda usage" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports if trivial lambda expression is used where there&apos;s an alternative method which behaves the same way, but
accepts a concrete value instead of a lambda.
&lt;p&gt;
  For example, &lt;code&gt;Optional.orElseGet(() -&gt; null)&lt;/code&gt; can be replaced with &lt;code&gt;Optional.orElse(null)&lt;/code&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantCast" displayName="Redundant type cast" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports unnecessary cast expressions.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantClassCall" displayName="Redundant &apos;isInstance&apos; or &apos;cast&apos; call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports redundant calls of &lt;b&gt;java.lang.Class&lt;/b&gt; methods. E.g. &lt;b&gt;Xyz.class.isInstance(object)&lt;/b&gt; could be replaced with &lt;b&gt;object instanceof Xyz&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConditionCoveredByFurtherCondition" displayName="Condition is covered by further condition" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports conditions that become redundant as they are completely covered by a subsequent condition.
For example, in the &lt;code&gt;value != -1 &amp;&amp; value &gt; 0&lt;/code&gt; condition, the first part is redundant:
if it&apos;s false, then the second part is also false.
Or in a condition like &lt;code&gt;obj != null &amp;&amp; obj instanceof String&lt;/code&gt;,
the null-check is redundant as &lt;code&gt;instanceof&lt;/code&gt; operator implies non-nullity.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantArrayCreation" displayName="Redundant array creation" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports unnecessary creation of array expression
to be passed as an argument to varargs parameter.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnnecessaryLabelOnBreakStatement" displayName="Unnecessary label on &apos;break&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;break&lt;/b&gt; statements with unnecessary
labels.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryBreak" displayName="Unnecessary &apos;break&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any unnecessary &lt;b&gt;break&lt;/b&gt; statements.
An &lt;b&gt;break&lt;/b&gt; statement is unnecessary when no other statements will be executed when it is removed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Android Lint: Internationalization">
    <inspection shortName="AndroidLintRtlCompat" displayName="Right-to-left text compatibility issues" enabled="false">&lt;html&gt;&lt;body&gt;Right-to-left text compatibility issues&lt;br&gt;&lt;br&gt;API 17 adds a &lt;code&gt;textAlignment&lt;/code&gt; attribute to specify text alignment. However, if you are supporting older versions than API 17, you must &lt;b&gt;also&lt;/b&gt; specify a gravity or layout_gravity attribute, since older platforms will ignore the &lt;code&gt;textAlignment&lt;/code&gt; attribute.&lt;br&gt;&lt;br&gt;Issue id: RtlCompat&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintRtlHardcoded" displayName="Using left/right instead of start/end attributes" enabled="false">&lt;html&gt;&lt;body&gt;Using left/right instead of start/end attributes&lt;br&gt;&lt;br&gt;Using &lt;code&gt;Gravity#LEFT&lt;/code&gt; and &lt;code&gt;Gravity#RIGHT&lt;/code&gt; can lead to problems when a layout is rendered in locales where text flows from right to left. Use &lt;code&gt;Gravity#START&lt;/code&gt; and &lt;code&gt;Gravity#END&lt;/code&gt; instead. Similarly, in XML &lt;code&gt;gravity&lt;/code&gt; and &lt;code&gt;layout_gravity&lt;/code&gt; attributes, use &lt;code&gt;start&lt;/code&gt; rather than &lt;code&gt;left&lt;/code&gt;.&lt;br/&gt;
&lt;br/&gt;
For XML attributes such as paddingLeft and &lt;code&gt;layout_marginLeft&lt;/code&gt;, use &lt;code&gt;paddingStart&lt;/code&gt; and &lt;code&gt;layout_marginStart&lt;/code&gt;. &lt;b&gt;NOTE&lt;/b&gt;: If your &lt;code&gt;minSdkVersion&lt;/code&gt; is less than 17, you should add &lt;b&gt;both&lt;/b&gt; the older left/right attributes &lt;b&gt;as well as&lt;/b&gt; the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&lt;br/&gt;
&lt;br/&gt;
(Note: For &lt;code&gt;Gravity#LEFT&lt;/code&gt; and &lt;code&gt;Gravity#START&lt;/code&gt;, you can use these constants even when targeting older platforms, because the &lt;code&gt;start&lt;/code&gt; bitmask is a superset of the &lt;code&gt;left&lt;/code&gt; bitmask. Therefore, you can use &lt;code&gt;gravity=&quot;start&quot;&lt;/code&gt; rather than &lt;code&gt;gravity=&quot;left|start&quot;&lt;/code&gt;.)&lt;br&gt;&lt;br&gt;Issue id: RtlHardcoded&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintConstantLocale" displayName="Constant Locale" enabled="false">&lt;html&gt;&lt;body&gt;Constant Locale&lt;br&gt;&lt;br&gt;Assigning &lt;code&gt;Locale.getDefault()&lt;/code&gt; to a constant is suspicious, because the locale can change while the app is running.&lt;br&gt;&lt;br&gt;Issue id: ConstantLocale&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintRtlSymmetry" displayName="Padding and margin symmetry" enabled="false">&lt;html&gt;&lt;body&gt;Padding and margin symmetry&lt;br&gt;&lt;br&gt;If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry.&lt;br&gt;&lt;br&gt;Issue id: RtlSymmetry&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintHardcodedText" displayName="Hardcoded text" enabled="false">&lt;html&gt;&lt;body&gt;Hardcoded text&lt;br&gt;&lt;br&gt;Hardcoding text attributes directly in layout files is bad for several reasons:&lt;br/&gt;
&lt;br/&gt;
* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&lt;br/&gt;
&lt;br/&gt;
* The application cannot be translated to other languages by just adding new translations for existing string resources.&lt;br/&gt;
&lt;br/&gt;
There are quickfixes to automatically extract this hardcoded string into a resource lookup.&lt;br&gt;&lt;br&gt;Issue id: HardcodedText&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintRtlEnabled" displayName="Using RTL attributes without enabling RTL support" enabled="false">&lt;html&gt;&lt;body&gt;Using RTL attributes without enabling RTL support&lt;br&gt;&lt;br&gt;To enable right-to-left support, when running on API 17 and higher, you must set the &lt;code&gt;android:supportsRtl&lt;/code&gt; attribute in the manifest &lt;code&gt;&amp;lt;application&gt;&lt;/code&gt; element.&lt;br/&gt;
&lt;br/&gt;
If you have started adding RTL attributes, but have not yet finished the migration, you can set the attribute to false to satisfy this lint check.&lt;br&gt;&lt;br&gt;Issue id: RtlEnabled&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintByteOrderMark" displayName="Byte order mark inside files" enabled="false">&lt;html&gt;&lt;body&gt;Byte order mark inside files&lt;br&gt;&lt;br&gt;Lint will flag any byte-order-mark (BOM) characters it finds in the middle of a file. Since we expect files to be encoded with UTF-8 (see the EnforceUTF8 issue), the BOM characters are not necessary, and they are not handled correctly by all tools. For example, if you have a BOM as part of a resource name in one particular translation, that name will not be considered identical to the base resource&apos;s name and the translation will not be used.&lt;br&gt;&lt;br&gt;Issue id: ByteOrderMark&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Byte_order_mark&quot;&gt;http://en.wikipedia.org/wiki/Byte_order_mark&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintEnforceUTF8" displayName="Encoding used in resource files is not UTF-8" enabled="false">&lt;html&gt;&lt;body&gt;Encoding used in resource files is not UTF-8&lt;br&gt;&lt;br&gt;XML supports encoding in a wide variety of character sets. However, not all tools handle the XML encoding attribute correctly, and nearly all Android apps use UTF-8, so by using UTF-8 you can protect yourself against subtle bugs when using non-ASCII characters.&lt;br/&gt;
&lt;br/&gt;
In particular, the Android Gradle build system will merge resource XML files assuming the resource files are using UTF-8 encoding.&lt;br&gt;&lt;br&gt;Issue id: EnforceUTF8&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintRelativeOverlap" displayName="Overlapping items in RelativeLayout" enabled="false">&lt;html&gt;&lt;body&gt;Overlapping items in RelativeLayout&lt;br&gt;&lt;br&gt;If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like &lt;code&gt;toEndOf&lt;/code&gt;/&lt;code&gt;toStartOf&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: RelativeOverlap&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSetTextI18n" displayName="TextView Internationalization" enabled="false">&lt;html&gt;&lt;body&gt;TextView Internationalization&lt;br&gt;&lt;br&gt;When calling &lt;code&gt;TextView#setText&lt;/code&gt;&lt;br/&gt;
* Never call &lt;code&gt;Number#toString()&lt;/code&gt; to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using &lt;code&gt;String#format&lt;/code&gt; with proper format specifications (&lt;code&gt;%d&lt;/code&gt; or &lt;code&gt;%f&lt;/code&gt;) instead.&lt;br/&gt;
* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&lt;br/&gt;
* Do not build messages by concatenating text chunks. Such messages can not be properly translated.&lt;br&gt;&lt;br&gt;Issue id: SetTextI18n&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/resources/localization.html&quot;&gt;http://developer.android.com/guide/topics/resources/localization.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
  </group>
  <group name="JUnit">
    <inspection shortName="JUnit4AnnotatedMethodInJUnit3TestCase" displayName="JUnit 4 test method in class extending JUnit 3 TestCase" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit 4 &lt;b&gt;@Test&lt;/b&gt; annotated methods which are located inside a class
extending the abstract JUnit 3 class &lt;b&gt;TestCase&lt;/b&gt;. Mixing JUnit API&apos;s like this is
confusing and can lead to problems running the tests, for example a method annotated with &lt;b&gt;@Ignore&lt;/b&gt; won&apos;t
be actually ignored if its name starts with test.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JUnit5Platform" displayName="@RunWith(JUnitPlatform.class) without test methods" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes annotated with @RunWith(JUnitPlatform.class) which provide no test methods. These classes won&apos;t start tests because
org.junit.vintage.engine.discovery.DefensiveAllDefaultPossibilitiesBuilder.DefensiveAnnotatedBuilder prevents recursion and
org.junit.vintage.engine.discovery.DefensiveAllDefaultPossibilitiesBuilder.DefensiveJUnit4Builder expects test methods
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MisorderedAssertEqualsParameters" displayName="Misordered &apos;assertEquals()&apos; arguments" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any calls to JUnit &lt;b&gt;assertEquals()&lt;/b&gt; which have
a non-literal as the expected result argument and a literal as the actual result argument. Such calls
will behave fine for assertions which pass, but may give confusing error reports if their expected and actual
arguments differ.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JUnitDatapoint" displayName="Malformed @DataPoint field" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks for any member that is annotated with @DataPoint but is not public or not static.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="BeforeClassOrAfterClassIsPublicStaticVoidNoArg" displayName="Malformed @BeforeClass/@BeforeAll or @AfterClass/@AfterAll method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit 4.0 &lt;b&gt;@BeforeClass&lt;/b&gt; or &lt;b&gt;@AfterClass&lt;/b&gt; methods
which are not declared
&lt;b&gt;public&lt;/b&gt; and &lt;b&gt;static&lt;/b&gt;, do not return &lt;b&gt;void&lt;/b&gt;, or take arguments.
Such methods are easy to create inadvertently, but will not be executed by JUnit tests runners.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JUnit5MalformedParameterized" displayName="JUnit 5 malformed parameterized test" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports parameterized tests which have malformed sources:
&lt;ul&gt;
  &lt;li&gt;
    MethodSource has unknown target or method is not static, no-arg
  &lt;/li&gt;
  &lt;li&gt;
    ValueSource/EnumSource types are not convertible to method parameters
  &lt;/li&gt;
  &lt;li&gt;
    No sources are defined
  &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuperTearDownInFinally" displayName="&apos;super.tearDown()&apos; not called from &apos;finally&apos; block" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;super.tearDown()&lt;/b&gt; calls which are not performed inside a &lt;b&gt;finally&lt;/b&gt; block.
If there are other method calls in the &lt;b&gt;tearDown()&lt;/b&gt; method, which may throw
an exception before the &lt;b&gt;super.tearDown()&lt;/b&gt; call, this may lead to inconsistencies and leaks.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 15&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IgnoredJUnitTest" displayName="JUnit test annotated with &apos;@Ignore&apos;/&apos;@Disabled&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit tests which are annotated with @Ignore/@Disabled.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JUnitRule" displayName="Malformed @Rule/@ClassRule field" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports malformed @Rule/@ClassRule usages: &lt;br/&gt;
&lt;ul&gt;
  &lt;li&gt;
    Checks for any member that is annotated with @Rule but is not public. 
  &lt;/li&gt;
  &lt;li&gt;
    Checks for any member that is annotated with @ClassRule but is not public or not static.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnconstructableTestCase" displayName="Unconstructable JUnit TestCase" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports non-abstract JUnit test cases which do not
expose a public no-arg constructor or a public constructor which takes a single string
as an argument. Such test cases will be unrunnable by most JUnit test runners, including
IDEA&apos;s.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticSuite" displayName="&apos;suite()&apos; method not declared &apos;static&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports JUnit test case classes which contain &lt;b&gt;suite()&lt;/b&gt; methods which
are not declared &lt;b&gt;static&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TestMethodInProductCode" displayName="JUnit test method in product source" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit 4+ @Test methods in product source trees.
This most likely indicates programmer error, and can result in test code being shipped
into production.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BeforeOrAfterIsPublicVoidNoArg" displayName="Malformed @Before or @After method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit 4.0 &lt;b&gt;@Before&lt;/b&gt; or &lt;b&gt;@After&lt;/b&gt; methods
which are not declared
&lt;b&gt;public&lt;/b&gt;, do not return &lt;b&gt;void&lt;/b&gt;, or take arguments.
Such methods are easy to create inadvertently, but will not be executed by JUnit tests runners.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MultipleExceptionsDeclaredOnTestMethod" displayName="Multiple exceptions declared on test method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit test methods with more than one exception declared in the
&lt;b&gt;throws&lt;/b&gt; clause. Such a
&lt;b&gt;throws&lt;/b&gt; clause can be more concisely declared as:&lt;br&gt;
&lt;pre&gt;&lt;b&gt;throws&lt;/b&gt; Exception&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantJUnitAssertArgument" displayName="Constant JUnit assert argument" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports constant arguments to JUnits assertTrue, assertFalse,
assertNull and assertNotNull method calls. Calls to these methods with such
constant arguments will either always fail or always succeed.
Such statements can easily be left over after refactoring and are probably not intended.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MalformedSetUpTearDown" displayName="Malformed &apos;setUp()&apos; or &apos;tearDown()&apos; method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit &lt;b&gt;setUp()&lt;/b&gt; or &lt;b&gt;tearDown()&lt;/b&gt; methods which are not declared
&lt;b&gt;public&lt;/b&gt;, do not return &lt;b&gt;void&lt;/b&gt;, or take arguments.
Such &lt;b&gt;setUp()&lt;/b&gt; or &lt;b&gt;tearDown()&lt;/b&gt; methods are easy to create inadvertently,
and will not be executed by JUnit test runners.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TestFailedLine" displayName="Highlight problem line in test" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection highlights failed method calls or assertions in tests.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MigrateAssertToMatcherAssert" displayName="Assertion expression can be replaced with &apos;assertThat&apos; method call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports usages of &lt;b&gt;Assert.assertEquals&lt;/b&gt;, &lt;b&gt;Assert.assertTrue&lt;/b&gt; etc. methods when its can be migrated to &lt;b&gt;Assert.assertThat&lt;/b&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JUnit3StyleTestMethodInJUnit4Class" displayName="Old style JUnit test method in JUnit 4 class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit 3 style test methods which are located inside a class
which does not extend the abstract JUnit 3 class &lt;b&gt;TestCase&lt;/b&gt; and contains JUnit 4/JUnit 5 &lt;b&gt;@Test&lt;/b&gt; annotated methods.
In addition to being confusing such test methods will not be run.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TestMethodIsPublicVoidNoArg" displayName="Malformed test method" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any JUnit test methods which are declared &lt;b&gt;static&lt;/b&gt;, not declared
&lt;b&gt;public&lt;/b&gt;, do not return
&lt;b&gt;void&lt;/b&gt;, or have parameters.
Such test methods are easy to create inadvertently, but will not be executed by
JUnit test runners.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify special annotations.
Any parameter annotated with one of these annotations will not be reported.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TestMethodWithoutAssertion" displayName="JUnit test method without any assertions" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports test methods of JUnit test case classes that do not contain
any assertions. Such methods indicate either incomplete or weak test cases.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify which combinations of fully qualified class name and method name regular expression
qualify as assertions.
Class names also match subclasses.
&lt;p&gt;
Use the first checkbox below to specify if Java &lt;b&gt;assert&lt;/b&gt; statements, using the &lt;b&gt;assert&lt;/b&gt; keyword, should be considered an assertion.
&lt;p&gt;
Use the second checkbox to ignore test methods which declare exceptions.
This can be useful when you have tests that will throw an exception on failure and thus don&apos;t need any assertions.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssertEqualsMayBeAssertSame" displayName="&apos;assertEquals()&apos; may be &apos;assertSame()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;org.junit.Assert.assertEquals()&lt;/b&gt;
or &lt;b&gt;junit.framework.Assert.assertEquals()&lt;/b&gt; which
can be replaced with an equivalent call to &lt;b&gt;assertSame()&lt;/b&gt;.
This is possible when the arguments are instances of a final class which does not override
the &lt;b&gt;equals()&lt;/b&gt; method.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TestCaseInProductCode" displayName="JUnit TestCase in product source" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports JUnit test cases in product source trees.
This most likely indicates programmer error, and can result in test code being shipped
into production.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ParameterizedParametersStaticCollection" displayName="@RunWith(Parameterized.class) without data provider" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes annotated with @RunWith(Parameterized.&lt;b&gt;class&lt;/b&gt;) without
data provider method annotated with @Parameterized.Parameters
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimplifiableJUnitAssertion" displayName="Simplifiable JUnit assertion" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any JUnit &lt;b&gt;assert&lt;/b&gt; calls which can be replaced by simpler but equivalent calls.
&lt;table&gt;
  &lt;tr&gt;&lt;th&gt;Example&lt;/th&gt;&lt;th&gt;&amp;rarr;&lt;/th&gt;&lt;th&gt;Replacement&lt;/th&gt;&lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;assertEquals(&lt;b&gt;true&lt;/b&gt;, x());&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;assertTrue(x());&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;assertTrue(y() != null);&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;assertNotNull(y());&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;assertTrue(z == z());&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;assertSame(z, z());&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;assertTrue(a.equals(a()));&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;assertEquals(a, a());&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;assertTrue(&lt;b&gt;false&lt;/b&gt;);&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;fail();&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExpectedExceptionNeverThrown" displayName="Expected exception never thrown in test method body" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports checked exceptions expected by a JUnit 4 test method,
which are never thrown inside the method body.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssertEqualsCalledOnArray" displayName="&apos;assertEquals()&apos; called on array" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to JUnit&apos;s &lt;b&gt;assertEquals()&lt;/b&gt;
method with arguments of type array. Arrays should be checked with one of the
&lt;b&gt;assertArrayEquals()&lt;/b&gt; methods.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TestCaseWithConstructor" displayName="JUnit TestCase with non-trivial constructors" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on JUnit test cases with initialization logic in their constructors. Initialization
of JUnit test cases should be done in &lt;b&gt;setUp()&lt;/b&gt; methods instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JUnit5MalformedNestedClass" displayName="JUnit 5 malformed @Nested class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports static inner classes annotated with @Nested.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;small&gt;New in 2018.2&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssertEqualsBetweenInconvertibleTypes" displayName="&apos;assertEquals()&apos; between objects of inconvertible types" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to JUnit&apos;s &lt;b&gt;assertEquals()&lt;/b&gt;
method where the expected result and actual result arguments are of incompatible
types. While such a call might theoretically be useful, most likely it represents a bug.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssertsWithoutMessages" displayName="Message missing on JUnit assertion" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to JUnit &lt;b&gt;assertXXX()&lt;/b&gt; or &lt;b&gt;fail()&lt;/b&gt; methods that do not have an error message string argument.
An error message on assertion failure may help clarify the test case&apos;s intent.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TestCaseWithNoTestMethods" displayName="Test class with no tests" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports non-abstract test cases which do not
contain any test methods. Such test cases usually indicate developer error.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to specify that test cases which have super classes with
test methods should be ignored by this inspection.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JUnit5AssertionsConverter" displayName="Obsolete assertions in JUnit 5 tests" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to methods from the &lt;b&gt;junit.framework.Assert&lt;/b&gt;, &lt;b&gt;org.junit.Assert&lt;/b&gt;, &lt;b&gt;org.junit.Assume&lt;/b&gt; classes inside JUnit 5 tests.
Though still working, migration to &lt;b&gt;org.junit.jupiter.api.Assertions&lt;/b&gt;/&lt;b&gt;org.junit.jupiter.api.Assumptions&lt;/b&gt; could avoid dependency on old JUnit version.
&lt;p&gt;
  &lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JUnit5Converter" displayName="JUnit 4 test can be JUnit 5" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit 4 tests which can be automatically converted to JUnit 5. Though default runners are automatically convertable, custom runners, method- and field- rules are not and require manual changes.
This inspection requires JUnit 5 library already available on the classpath as well as JDK 1.8 or higher configured for the project.
&lt;p&gt;
  &lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseOfObsoleteAssert" displayName="Usage of obsolete &apos;junit.framework.Assert&apos; method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to methods from the &lt;b&gt;junit.framework.Assert&lt;/b&gt; class. This class is
obsolete and the calls can be replaced by calls to methods from the &lt;b&gt;org.junit.Assert&lt;/b&gt; class.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JUnit5MalformedRepeated" displayName="JUnit 5 malformed repeated test" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports repeated test problems:
&lt;ul&gt;
  &lt;li&gt;
    @Test and @RepeatedTest on the same method
  &lt;/li&gt;
  &lt;li&gt;
    RepetitionInfo parameter is used in @BeforeAll/@AfterAll methods
  &lt;/li&gt;
  &lt;li&gt;
    RepetitionInfo parameter is used in @BeforeEach/@AfterEach methods in classes with @Test methods
  &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Android Lint: Compliance">
    <inspection shortName="AndroidLintExpiredTargetSdkVersion" displayName="TargetSdkVersion No Longer Supported" enabled="false">&lt;html&gt;&lt;body&gt;TargetSdkVersion No Longer Supported&lt;br&gt;&lt;br&gt;As of the second half of 2018, Google Play requires that new apps and app updates target API level 26 or higher.&lt;br/&gt;
&lt;br/&gt;
Configuring your app to target a recent API level ensures that users benefit from significant security and performance improvements, while still allowing your app to run on older Android versions (down to the &lt;code&gt;minSdkVersion&lt;/code&gt;).&lt;br/&gt;
&lt;br/&gt;
To update your &lt;code&gt;targetSdkVersion&lt;/code&gt;, follow the steps from &quot;Meeting Google Play requirements for target API level&quot;,&lt;br/&gt;
&lt;a href=&quot;https://developer.android.com/distribute/best-practices/develop/target-sdk.html&quot;&gt;https://developer.android.com/distribute/best-practices/develop/target-sdk.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;Issue id: ExpiredTargetSdkVersion&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://support.google.com/googleplay/android-developer/answer/113469#targetsdk&quot;&gt;https://support.google.com/googleplay/android-developer/answer/113469#targetsdk&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://support.google.com/googleplay/android-developer/answer/113469#targetsdk&quot;&gt;https://support.google.com/googleplay/android-developer/answer/113469#targetsdk&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintOutdatedLibrary" displayName="Outdated Library" enabled="false">&lt;html&gt;&lt;body&gt;Outdated Library&lt;br&gt;&lt;br&gt;Your app is using an outdated version of a library. This may cause violations of Google Play policies (see &lt;a href=&quot;https://play.google.com/about/monetization-ads/ads/&quot;&gt;https://play.google.com/about/monetization-ads/ads/&lt;/a&gt;) and/or may affect your app&amp;#8217;s visibility on the Play Store.&lt;br/&gt;
&lt;br/&gt;
Please try updating your app with an updated version of this library, or remove it from your app.&lt;br&gt;&lt;br&gt;Issue id: OutdatedLibrary&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintExpiringTargetSdkVersion" displayName="TargetSdkVersion Soon Expiring" enabled="false">&lt;html&gt;&lt;body&gt;TargetSdkVersion Soon Expiring&lt;br&gt;&lt;br&gt;In the second half of 2018, Google Play will require that new apps and app updates target API level 26 or higher. This will be required for new apps in August 2018, and for updates to existing apps in November 2018.&lt;br/&gt;
&lt;br/&gt;
Configuring your app to target a recent API level ensures that users benefit from significant security and performance improvements, while still allowing your app to run on older Android versions (down to the &lt;code&gt;minSdkVersion&lt;/code&gt;).&lt;br/&gt;
&lt;br/&gt;
This lint check starts warning you some months &lt;b&gt;before&lt;/b&gt; these changes go into effect if your &lt;code&gt;targetSdkVersion&lt;/code&gt; is 25 or lower. This is intended to give you a heads up to update your app, since depending on your current &lt;code&gt;targetSdkVersion&lt;/code&gt; the work can be nontrivial.&lt;br/&gt;
&lt;br/&gt;
To update your &lt;code&gt;targetSdkVersion&lt;/code&gt;, follow the steps from &quot;Meeting Google Play requirements for target API level&quot;,&lt;br/&gt;
&lt;a href=&quot;https://developer.android.com/distribute/best-practices/develop/target-sdk.html&quot;&gt;https://developer.android.com/distribute/best-practices/develop/target-sdk.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;Issue id: ExpiringTargetSdkVersion&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://support.google.com/googleplay/android-developer/answer/113469#targetsdk&quot;&gt;https://support.google.com/googleplay/android-developer/answer/113469#targetsdk&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
  </group>
  <group name="Error handling">
    <inspection shortName="ExtendsThrowable" displayName="Class directly extends &apos;java.lang.Throwable&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any classes which directly extend &lt;b&gt;java.lang.Throwable&lt;/b&gt;.
It is generally considered bad practice to extend &lt;b&gt;java.lang.Throwable&lt;/b&gt; directly and
it is usually enough to extend either &lt;b&gt;java.lang.RuntimeException&lt;/b&gt; or &lt;b&gt;java.lang.Exception&lt;/b&gt; or in special
cases &lt;b&gt;java.lang.Error&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 15&lt;/small&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ContinueOrBreakFromFinallyBlock" displayName="&apos;continue&apos; or &apos;break&apos; inside &apos;finally&apos; block" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;break&lt;/b&gt; or &lt;b&gt;continue&lt;/b&gt; statements
inside of &lt;b&gt;finally&lt;/b&gt;
blocks. While occasionally intended, such statements are very confusing, may mask exceptions thrown, and
tremendously complicate debugging.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThreadDeathRethrown" displayName="&apos;java.lang.ThreadDeath&apos; not rethrown" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;try&lt;/b&gt; statements which catch
&lt;b&gt;java.lang.ThreadDeath&lt;/b&gt; which do not rethrow the exception.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThrowCaughtLocally" displayName="&apos;throw&apos; caught by containing &apos;try&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;throw&lt;/b&gt; statements whose exceptions are always
caught by containing &lt;b&gt;try&lt;/b&gt; statements. Using &lt;b&gt;throw&lt;/b&gt;
statements as a &quot;goto&quot; to change the local flow of control is both confusing and likely to have poor performance.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyReturnFromFinallyBlock" displayName="&apos;return&apos; inside &apos;finally&apos; block" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;return&lt;/b&gt; statements inside of &lt;b&gt;finally&lt;/b&gt;
blocks. While occasionally intended, such &lt;b&gt;return&lt;/b&gt; statements may mask exceptions thrown, and
tremendously complicate debugging.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CheckedExceptionClass" displayName="Checked exception class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports checked exception classes (i.e. subclasses of &lt;b&gt;Exception&lt;/b&gt; which are
not also subclasses of &lt;b&gt;RuntimeException&lt;/b&gt;). Certain coding standards require that all user-defined exception
classes be unchecked.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TooBroadCatch" displayName="Overly broad &apos;catch&apos; block" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;catch&lt;/b&gt; blocks which have parameters which are more generic than the
exceptions thrown by the corresponding &lt;b&gt;try&lt;/b&gt; block.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to have this inspection only warn on the most generic exceptions.
&lt;p&gt;
Use the second checkbox below to ignore any exceptions which hide other exceptions, but which may be thrown and thus
are technically not overly broad.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReturnFromFinallyBlock" displayName="&apos;return&apos; inside &apos;finally&apos; block" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;return&lt;/b&gt; statements inside of &lt;b&gt;finally&lt;/b&gt;
blocks. While occasionally intended, such &lt;b&gt;return&lt;/b&gt; statements may mask exceptions thrown, and
tremendously complicate debugging.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NewExceptionWithoutArguments" displayName="Exception constructor called without arguments" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports exception instance creation without any arguments specified. When an exception is constructed
without arguments it contains no information about the fault that happened, which makes debugging needlessly hard.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EmptyFinallyBlock" displayName="Empty &apos;finally&apos; block" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports empty &lt;b&gt;finally&lt;/b&gt; blocks. Empty &lt;b&gt;finally&lt;/b&gt; blocks
usually indicate coding errors.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
At present, this inspection is disabled in JSP files.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyThrowFromFinallyBlock" displayName="&apos;throw&apos; inside &apos;finally&apos; block" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;throw&lt;/b&gt; statements inside of &lt;b&gt;finally&lt;/b&gt;
blocks. While occasionally intended, such &lt;b&gt;throw&lt;/b&gt; statements may mask exceptions thrown, and
tremendously complicate debugging.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ThrowsRuntimeException" displayName="Unchecked exception declared in &apos;throws&apos; clause" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports declarations of unchecked exceptions (RuntimeException and its subclasses) in the &lt;b&gt;throws&lt;/b&gt; clause of a method.
Declaration of unchecked exceptions are not required and may be removed or moved to a Javadoc &lt;b&gt;@throws&lt;/b&gt; tag.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryInitCause" displayName="Unnecessary call to &apos;Throwable.initCause()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;Throwable.initCause()&lt;/b&gt; where the exception constructor also takes a &lt;b&gt;Throwable&lt;/b&gt; cause argument.
In this case the &lt;b&gt;initCause()&lt;/b&gt; call can be removed and its argument added to the call to the exception&apos;s constructor.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 16&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NestedTryStatement" displayName="Nested &apos;try&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports nested &lt;b&gt;try&lt;/b&gt; statements. Nested &lt;b&gt;try&lt;/b&gt; statements
may result in confusing code, and should probably have their &lt;b&gt;catch&lt;/b&gt; and &lt;b&gt;finally&lt;/b&gt; sections
merged.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyUnusedCatchParameter" displayName="Unused catch parameter" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;catch&lt;/b&gt; parameters that are unused in their
corresponding blocks. This inspection will not report any &lt;b&gt;catch&lt;/b&gt; parameters
named &quot;ignore&quot; or &quot;ignored&quot;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="TooBroadThrows" displayName="Overly broad &apos;throws&apos; clause" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;throws&lt;/b&gt; clauses which contain exceptions which are more generic than the
exceptions actually thrown by the method.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to have this inspection only warn on the most generic exceptions.
&lt;p&gt;
Use the second checkbox below to ignore overly broad &lt;b&gt;throws&lt;/b&gt; clauses in methods which override a library method.
&lt;p&gt;
Use the third checkbox below to ignore any exceptions which hide other exceptions, but which may be thrown from the method body and thus
are technically not overly broad.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NullThrown" displayName="&apos;null&apos; thrown" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any null literals which are used as the argument for a throw statement.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThrowFromFinallyBlock" displayName="&apos;throw&apos; inside &apos;finally&apos; block" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;throw&lt;/b&gt; statements inside of &lt;b&gt;finally&lt;/b&gt;
blocks. While occasionally intended, such &lt;b&gt;throw&lt;/b&gt; statements may mask exceptions thrown, and
tremendously complicate debugging.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonFinalFieldOfException" displayName="Non-final field of exception class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any fields on subclasses of
&lt;b&gt;java.lang.Exception&lt;/b&gt; which are not declared as
&lt;b&gt;final&lt;/b&gt;. Data on exception objects should not
be modified, as it may result in loss of error context for later debugging and
logging.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EmptyTryBlock" displayName="Empty &apos;try&apos; block" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports empty &lt;b&gt;try&lt;/b&gt; blocks.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
At present, this inspection is disabled in JSP files.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyContinueOrBreakFromFinallyBlock" displayName="&apos;continue&apos; or &apos;break&apos; inside &apos;finally&apos; block" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;break&lt;/b&gt; or &lt;b&gt;continue&lt;/b&gt; statements inside of &lt;b&gt;finally&lt;/b&gt;
blocks. While occasionally intended, such statements are very confusing, may mask exceptions thrown, and
tremendously complicate debugging.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ExceptionFromCatchWhichDoesntWrap" displayName="&apos;throw&apos; inside &apos;catch&apos; block which ignores the caught exception" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports exceptions constructed and thrown
from inside &lt;b&gt;catch&lt;/b&gt; blocks, which do not &quot;wrap&quot; the caught
exception. It is considered good practice when throwing an exception in response to an exception
to wrap the initial exception, so that valuable context information
such as stack frames and line numbers are not lost.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to indicate if the inspection should ignore exceptions which
receive the result of a method call on the original exception, such as &lt;b&gt;getMessage()&lt;/b&gt;,
as an argument.
&lt;p&gt;
Use the second checkbox below to have this inspection ignore throw statements which throw exceptions which do not have a
constructor which accepts a &lt;b&gt;Throwable&lt;/b&gt; cause.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceofCatchParameter" displayName="&apos;instanceof&apos; on &apos;catch&apos; parameter" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;instanceof&lt;/b&gt; expressions on &lt;b&gt;catch&lt;/b&gt; block parameters.
Testing the type of &lt;b&gt;catch&lt;/b&gt; parameters is usually better done by having separate
&lt;b&gt;catch&lt;/b&gt; blocks, rather than &lt;b&gt;instanceof&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BadExceptionThrown" displayName="Prohibited exception thrown" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;throw&lt;/b&gt; statements
which throw inappropriate exceptions. One use of this inspection would be to warn of
&lt;b&gt;throw&lt;/b&gt; statements which throw overly generic exceptions
(e.g. &lt;b&gt;java.lang.Exception&lt;/b&gt; or &lt;b&gt;java.io.IOException&lt;/b&gt;).
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the list below to specify which exceptions should be flagged by this inspection.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BadExceptionCaught" displayName="Prohibited exception caught" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;catch&lt;/b&gt; clauses
which catch inappropriate exceptions. Some exceptions, for instance
&lt;b&gt;java.lang.NullPointerException&lt;/b&gt; and
&lt;b&gt;java.lang.IllegalMonitorStateException&lt;/b&gt; represent programming errors
and so should almost certainly not be caught in production code.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the list below to specify which exceptions should be flagged by this inspection.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CatchMayIgnoreException" displayName="Catch block may ignore exception" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;catch&lt;/b&gt; blocks which are empty or may ignore exception.
While occasionally intended, empty &lt;b&gt;catch&lt;/b&gt; blocks can make debugging extremely difficult.
Also ignoring catch parameter could be wrong. Finally it will be reported if it&apos;s statically detected
that catch block may silently ignore important VM exceptions like &lt;b&gt;NullPointerException&lt;/b&gt;. Ignoring such exception
(without logging or rethrowing it) may hide a bug.
&lt;p&gt;
  This inspection will not report any &lt;b&gt;catch&lt;/b&gt; parameters named &quot;ignore&quot; or &quot;ignored&quot;.
  Conversely this inspection will warn on any &lt;b&gt;catch&lt;/b&gt; parameters named &quot;ignore&quot; or &quot;ignored&quot; that are actually used.
  Also &lt;b&gt;catch&lt;/b&gt; parameters named &quot;expected&quot; or &quot;ok&quot; are not reported inside test sources.
&lt;/p&gt;
  &lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ErrorRethrown" displayName="&apos;java.lang.Error&apos; not rethrown" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;try&lt;/b&gt; statements which catch
&lt;b&gt;java.lang.Error&lt;/b&gt; or any subclass and which do not rethrow the error.
Statements which catch &lt;b&gt;java.lang.ThreadDeath&lt;/b&gt; are not
reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyEmptyCatchBlock" displayName="Empty &apos;catch&apos; block" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports empty &lt;b&gt;catch&lt;/b&gt; blocks. While occasionally intended,
empty &lt;b&gt;catch&lt;/b&gt; blocks can make debugging extremely difficult.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CaughtExceptionImmediatelyRethrown" displayName="Caught exception is immediately rethrown" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;catch&lt;/b&gt; block where
the caught exception is immediately rethrown, without performing any action on it.
Such &lt;b&gt;catch&lt;/b&gt; blocks are unnecessary or lack error
handling.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UncheckedExceptionClass" displayName="Unchecked exception class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unchecked exception classes (i.e. subclasses of &lt;b&gt;RuntimeException&lt;/b&gt;).
Certain coding standards require that all user-defined exception classes be checked.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyEmptyTryBlock" displayName="Empty &apos;try&apos; block" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports empty &lt;b&gt;try&lt;/b&gt; blocks.
Empty &lt;b&gt;try&lt;/b&gt; blocks usually indicate coding errors.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="BadExceptionDeclared" displayName="Prohibited exception declared" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports inappropriate exceptions declared by methods. One use of this inspection would be to warn of
&lt;b&gt;throws&lt;/b&gt; clauses which declare overly generic exceptions (e.g. &lt;b&gt;java.lang.Exception&lt;/b&gt; or &lt;b&gt;java.lang.Throwable&lt;/b&gt;).
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the list below to specify which exceptions should be flagged by this inspection.
&lt;p&gt;
Use the checkbox below to ignore exceptions declared on methods which override a library method.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FinallyBlockCannotCompleteNormally" displayName="&apos;finally&apos; block which can not complete normally" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;finally&lt;/b&gt; blocks which
can not complete normally.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyEmptyFinallyBlock" displayName="Empty &apos;finally&apos; block" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports empty &lt;b&gt;finally&lt;/b&gt; blocks.
Empty &lt;b&gt;finally&lt;/b&gt; blocks usually indicate coding errors.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Declaration">
    <inspection shortName="GrMethodMayBeStatic" displayName="Method may be static" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods which may safely be made &lt;b&gt;static&lt;/b&gt;. A method may be static if it is not synchronized, it does not
reference any of its class&apos; non static methods and non static fields and is not overridden in a sub class.
Use the checkboxes below to inspect only &lt;b&gt;private&lt;/b&gt; or &lt;b&gt;final methods&lt;/b&gt;, which increases the performance of this inspection and to
ignore empty methods.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Threading issues">
    <inspection shortName="GroovySystemRunFinalizersOnExit" displayName="Call to System.runFinalizersOnExit()" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;System.runFinalizersOnExit()&lt;/b&gt;.
This call is one of the most dangerous in the Java language. It is inherently non-thread-safe,
may result in data corruption, deadlock, and may affect parts of the program far removed from it&apos;s call point.
It is deprecated, and it&apos;s use strongly discouraged.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SynchronizeOnLock" displayName="Synchronization on a Lock object" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;synchronized&lt;/b&gt;
block which locks on an instance of &lt;b&gt;java.util.concurrent.locks.Lock&lt;/b&gt;.
Such synchronization is almost certainly inadvertent, and appropriate versions of &lt;b&gt;.lock()&lt;/b&gt;
and &lt;b&gt;.unlock()&lt;/b&gt; should be used instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="WhileLoopSpinsOnField" displayName="&apos;while&apos; loop spins on field" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on &lt;b&gt;while&lt;/b&gt; loops which spin on the
value of a non-volatile field, waiting for it to be changed by another thread.
&lt;p&gt;
In addition to being potentially extremely CPU intensive when little work is done inside the loop, such
loops are likely have different semantics than intended, as the Java Memory Model allows such field accesses
to be hoisted out of the loop, causing the loop to never complete even if another thread does change the
field&apos;s value.
&lt;/p&gt;
&lt;p&gt;
  Additionally since Java 9 it&apos;s recommended to call &lt;code&gt;Thread.onSpinWait()&lt;/code&gt; inside spin loop
  on a volatile field which may significantly improve performance on some hardware.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThreadYield" displayName="Call to &apos;Thread.yield()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;Thread.yield()&lt;/b&gt;.
&lt;b&gt;Thread.yield()&lt;/b&gt; has no useful guaranteed semantics,
and is often used by inexperienced programmers to mask race conditions.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="WaitNotifyNotInSynchronizedContext" displayName="&apos;wait()&apos; or &apos;notify()&apos; while not synchronized" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any call to &lt;b&gt;wait()&lt;/b&gt;, &lt;b&gt;notify()&lt;/b&gt; or &lt;b&gt;notifyAll()&lt;/b&gt; not made inside a corresponding synchronized
statement or synchronized method. Calling &lt;b&gt;wait()&lt;/b&gt;, &lt;b&gt;notify()&lt;/b&gt; or &lt;b&gt;notifyAll()&lt;/b&gt; on an object
without holding a lock on that object will result in an &lt;b&gt;IllegalMonitorStateException&lt;/b&gt; being thrown.
Such a construct is not necessarily an error, as the necessary lock may be acquired before
the containing method is called, but its worth looking at.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SynchronizedMethod" displayName="&apos;synchronized&apos; method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports use of the &lt;b&gt;synchronized&lt;/b&gt; modifier on methods.
There are several reasons a &lt;b&gt;synchronized&lt;/b&gt; modifier on a method may be a bad idea:
First, as a rule as little work as possible should be performed under a lock.
Therefore it is often better to use a &lt;b&gt;synchronized&lt;/b&gt; statement and move as much of the methods code outside the
&lt;b&gt;synchronized&lt;/b&gt; region.
Second, it makes synchronization part of the external interface of the class.
This makes a future change to a different locking mechanism difficult.
Third, it makes it hard to track just who is locking on a given object.
And fourth, it makes a denial-of-service attack possible, either on purpose or it can happen easily by accident when subclassing.

&lt;p&gt;
As an alternative, consider
synchronizing on a &lt;b&gt;private final&lt;/b&gt; lock object, access to which can be completely controlled.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThreadStopSuspendResume" displayName="Call to &apos;Thread.stop()&apos;, &apos;suspend()&apos; or &apos;resume()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;Thread.stop()&lt;/b&gt;,
&lt;b&gt;Thread.suspend()&lt;/b&gt;, or &lt;b&gt;Thread.resume()&lt;/b&gt;.
These calls are inherently prone to data corruption and deadlock, and their use is strongly
discouraged.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonSynchronizedMethodOverridesSynchronizedMethod" displayName="Unsynchronized method overrides synchronized method" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;b&gt;synchronized&lt;/b&gt;
methods overriding &lt;b&gt;synchronized&lt;/b&gt; methods.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AwaitNotInLoop" displayName="&apos;await()&apos; not in loop" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on any call to &lt;b&gt;java.util.concurrent.locks.Condition.await()&lt;/b&gt; not made inside a loop.
&lt;b&gt;await()&lt;/b&gt; and related methods are normally
used to suspend a thread until a condition is signalled as true, and that condition should be checked after the &lt;b&gt;await()&lt;/b&gt;
returns. A loop is the clearest way to achieve this.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyPublicFieldAccessedInSynchronizedContext" displayName="Non-private field accessed in synchronized context" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;b&gt;final&lt;/b&gt;, non-&lt;b&gt;private&lt;/b&gt; fields which are accessed in a synchronized context.
A non-private field cannot be guaranteed to always be accessed in a synchronized manner, and such &quot;partially synchronized&quot;
access may result in unexpectedly inconsistent data structures. Accesses in constructors an initializers are ignored
for purposes of this inspection.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyWaitWhileNotSynchronized" displayName="&apos;wait()&apos; while not synced" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;wait()&lt;/b&gt; not made inside a corresponding synchronized
statement or synchronized method. Calling &lt;b&gt;wait()&lt;/b&gt; on an object
without holding a lock on that object will result in an &lt;b&gt;IllegalMonitorStateException&lt;/b&gt; being thrown.
Such a construct is not necessarily an error, as the necessary lock may be acquired before
the containing method is called, but its worth looking at.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NakedNotify" displayName="&apos;notify()&apos; or &apos;notifyAll()&apos; without corresponding state change" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;.notify()&lt;/b&gt; or
&lt;b&gt;.notifyAll()&lt;/b&gt; being called without any detectable state change occurring.
Normally, &lt;b&gt;.notify()&lt;/b&gt; and &lt;b&gt;.notifyAll()&lt;/b&gt; are
used to inform other threads that a state change has occurred. That state change should occur in a synchronized
context that contains the &lt;b&gt;.notify()&lt;/b&gt; or
&lt;b&gt;.notifyAll()&lt;/b&gt; call, and prior to the call. While not having such a state change
isn&apos;t necessarily incorrect, it is certainly worth examining.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="WaitNotInLoop" displayName="&apos;wait()&apos; not in loop" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on any call to &lt;b&gt;wait()&lt;/b&gt; not made inside a loop. &lt;b&gt;wait()&lt;/b&gt; is normally
used to suspend a thread until a condition is true, and that condition should be checked after the &lt;b&gt;wait()&lt;/b&gt;
returns. A loop is the clearest way to achieve this.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovySynchronizationOnVariableInitializedWithLiteral" displayName="Synchronization on variable initialized with literal" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports synchronized blocks which lock on an object which is initialized with a
literal. String literals are interned and &lt;b&gt;Number&lt;/b&gt; literals can be allocated from a cache. Because of
this, it is possible that some other part of the system which uses an object initialized with the same
literal, is actually holding a reference to the exact same object. This can create unexpected dead-lock
situations, if the string was thought to be private.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyUnconditionalWait" displayName="Unconditional &apos;wait&apos; call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;wait()&lt;/b&gt;
being called unconditionally within a synchronized context.
Normally, &lt;b&gt;wait()&lt;/b&gt; is
used to block a thread until some condition is true. If &lt;b&gt;wait()&lt;/b&gt;
is called unconditionally, that often indicates that the condition was checked before a lock was
acquired. In that case a data race may occur, with the condition becoming true between the time
it was checked and the time the lock was acquired. While constructs found by this inspection
are not necessarily incorrect, they are certainly worth examining.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyBusyWait" displayName="Busy wait" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;java.lang.Thread.sleep()&lt;/b&gt; that occur inside loops. Such calls
are indicative of &quot;busy-waiting&quot;. Busy-waiting is often inefficient, and may result in unexpected deadlocks
as busy-waiting threads do not release locked resources.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AwaitWithoutCorrespondingSignal" displayName="&apos;await()&apos; without corresponding &apos;signal()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any call to &lt;b&gt;Condition.signal()&lt;/b&gt;
or &lt;b&gt;Condition.signalAll()&lt;/b&gt;
for which no call to a corresponding &lt;b&gt;Condition.await()&lt;/b&gt;
can be found. Only calls which target fields of the current class are reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConditionSignal" displayName="Call to &apos;signal()&apos; instead of &apos;signalAll()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;java.util.concurrent.locks.signal()&lt;/b&gt;. While occasionally useful, in almost all cases
&lt;b&gt;signalAll()&lt;/b&gt; is a better and safer choice.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SynchronizeOnNonFinalField" displayName="Synchronization on a non-final field" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;synchronized&lt;/b&gt; statements where the lock expression
is a reference to a non-&lt;b&gt;final&lt;/b&gt; field. Such statements are unlikely to have useful semantics, as different
threads may be locking on different objects even when operating on the same object.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SynchronizedOnLiteralObject" displayName="Synchronization on an object initialized with a literal" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;synchronized&lt;/b&gt;
block which locks on an object which is initialized with a literal.
String literals are interned and Character, Boolean and Number literals can be allocated from a cache.
Because of this, it is possible that some other part of the system
which uses an object initialized with the same literal, is actually holding a
reference to the exact same object. This can create unexpected dead-lock situations,
if the lock object was thought to be private.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to warn on any synchronization on String, Character, Boolean and Number objects.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyAccessToStaticFieldLockedOnInstance" displayName="Access to static field locked on instance data" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports accesses to static fields of any non-thread-safe type specified below,
which is accessed from an instance field or a non-synchronized block. It is possible that the static
field is accessed from multiple threads, which can lead to unspecified side effects.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ThreadPriority" displayName="Call to &apos;Thread.setPriority()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;Thread.setPriority()&lt;/b&gt;.
Modifying priorities of threads is an inherently non-portable operation, as no guarantees
are given in the Java specification of how priorities are used in scheduling threads, or even
if they are used at all.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AccessToNonThreadSafeStaticFieldFromInstance" displayName="Non thread-safe static field access" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any access to a &lt;b&gt;static&lt;/b&gt; field
of specifiable non thread-safe type, which is accessed from an instance field or a
non-synchronized block. It is possible that the static field is accessed from
multiple threads, which can lead to unspecified side effects.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify which types are not thread-safe.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SystemRunFinalizersOnExit" displayName="Call to &apos;System.runFinalizersOnExit()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;System.runFinalizersOnExit()&lt;/b&gt;.
This call is one of the most dangerous in the Java language. It is inherently non-thread-safe,
may result in data corruption, deadlock, and may affect parts of the program far removed from its call point.
It is deprecated, and its use strongly discouraged.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovySynchronizedMethod" displayName="Synchronized method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;b&gt;synchronized&lt;/b&gt; modifier on methods. Some coding standards
prohibit the use of the &lt;b&gt;synchronized&lt;/b&gt; modifier, in favor of &lt;b&gt;synchronized&lt;/b&gt; statements.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="WaitWithoutCorrespondingNotify" displayName="&apos;wait()&apos; without corresponding &apos;notify()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any call to &lt;b&gt;Object.wait()&lt;/b&gt;
for which no call to a corresponding &lt;b&gt;Object.notify()&lt;/b&gt; or
&lt;b&gt;Object.notifyAll()&lt;/b&gt;
can be found. Only calls which target fields of the current class are reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyWhileLoopSpinsOnField" displayName="While loop spins on field" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;while&lt;/b&gt; loops which spin on the
value of a non-&lt;b&gt;volatile&lt;/b&gt; field, waiting for it to be changed by another thread. In addition to being potentially
extremely CPU intensive when little work is done inside the loop, such
loops are likely have different semantics than intended, as the Java Memory Model allows such field accesses
to be hoisted out of the loop, causing the loop to never complete even if another thread does change the
field&apos;s value.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="StaticInitializerReferencesSubClass" displayName="Static initializer references subclass" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes that refer to their own subclasses in their static initializers or in static fields.
Such references can cause JVM-level deadlocks in multithreaded environment, when one thread tries to load superclass
and another thread tries to load subclass at the same time.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThreadLocalNotStaticFinal" displayName="ThreadLocal field not declared static final" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports fields of type &lt;b&gt;java.lang.ThreadLocal&lt;/b&gt; which are not declared &lt;b&gt;static final&lt;/b&gt;.
In the most common case a &lt;b&gt;java.lang.ThreadLocal&lt;/b&gt; instance
associates state with a thread. A non-static non-final
&lt;b&gt;java.lang.ThreadLocal&lt;/b&gt; field associates state with
an instance-thread combination. This is seldom necessary and often a bug
which can cause memory leaks and possibly incorrect behavior.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
This inspection has a quick fix to make the field &lt;b&gt;static final&lt;/b&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CallToNativeMethodWhileLocked" displayName="Call to a native method while locked" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any to methods declared &lt;b&gt;native&lt;/b&gt; while in
a synchronized block or method. While not necessarily representing a problem, such calls cause
an expensive context switch, and are best kept out of synchronized contexts, if possible.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SignalWithoutCorrespondingAwait" displayName="&apos;signal()&apos; without corresponding &apos;await()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any call to &lt;b&gt;Condition.signal()&lt;/b&gt;
or &lt;b&gt;Condition.signalAll()&lt;/b&gt;
for which no call to a corresponding &lt;b&gt;Condition.await()&lt;/b&gt;
can be found. Only calls which target fields of the current class are reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyNotifyWhileNotSynchronized" displayName="&apos;notify()&apos; or &apos;notifyAll()&apos; while not synced" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;notify()&lt;/b&gt; not made inside a corresponding synchronized
statement or synchronized method. Calling &lt;b&gt;notify()&lt;/b&gt; on an object
without holding a lock on that object will result in an &lt;b&gt;IllegalMonitorStateException&lt;/b&gt; being thrown.
Such a construct is not necessarily an error, as the necessary lock may be acquired before
the containing method is called, but it&apos;s worth looking at.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SafeLock" displayName="Lock acquired but not safely unlocked" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any &lt;b&gt;java.util.concurrent.locks.Lock&lt;/b&gt; resource which is not acquired in front of a
&lt;b&gt;try&lt;/b&gt; block and unlocked in the corresponding &lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyDoubleCheckedLocking" displayName="Double-checked locking" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports double-checked locking. For a
discussion of double-checked locking and why it is unsafe, see
&lt;a href=&quot;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html
&quot;&gt;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&lt;/a&gt;

&lt;p&gt;
 Use the checkbox below to ignore double-checked locking on volatile fields. Using
 a volatile field for double-checked locking works correctly on Java 5 virtual machines,
 but probably does not have any performance advantages over plain full synchronization
 of the accessor method.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AtomicFieldUpdaterIssues" displayName="AtomicFieldUpdater issues" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports issues on fields of type &lt;b&gt;java.util.concurrent.atomic.AtomicLongFieldUpdater&lt;/b&gt;,
&lt;b&gt;java.util.concurrent.atomic.AtomicIntegerFieldUpdater&lt;/b&gt; or &lt;b&gt;java.util.concurrent.atomic.AtomicReferenceFieldUpdater&lt;/b&gt;.
The issues reported are identical to the runtime problems that can happen with atomic field updaters:
specified field not found, specified field not accessible, specified field of the wrong type, etc.

&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 16&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NestedSynchronizedStatement" displayName="Nested &apos;synchronized&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports nested &lt;b&gt;synchronized&lt;/b&gt; statements. Nested &lt;b&gt;synchronized&lt;/b&gt; statements
are either redundant (if the lock objects are identical) or prone to deadlock.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnconditionalWait" displayName="Unconditional &apos;wait()&apos; call" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;.wait()&lt;/b&gt;
being called unconditionally within a synchronized context.
Normally, &lt;b&gt;.wait()&lt;/b&gt; is
used to block a thread until some condition is true. If &lt;b&gt;.wait()&lt;/b&gt;
is called unconditionally, that often indicates that the condition was checked before a lock was
acquired. In that case a data race may occur, with the condition becoming true between the time
it was checked and the time the lock was acquired. While constructs found by this inspection
are not necessarily incorrect, they are certainly worth examining.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyEmptySyncBlock" displayName="Empty &apos;synchronized&apos; block" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;synchronized&lt;/b&gt; statements
with empty bodies. While theoretically this may be the semantics intended, this construction is
confusing, and often the result of a typo.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="WaitCalledOnCondition" displayName="&apos;wait()&apos; called on &apos;java.util.concurrent.locks.Condition&apos; object" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on any call to &lt;b&gt;wait()&lt;/b&gt;
made on a &lt;b&gt;java.util.concurrent.locks.Condition&lt;/b&gt;
object. This is probably a programming error, and some variant of the
&lt;b&gt;await()&lt;/b&gt; method was intended instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="VolatileArrayField" displayName="Volatile array field" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports array fields
which are declared as &lt;b&gt;volatile&lt;/b&gt;. Such fields
may be confusing, as accessing the array itself follows the rules for &lt;b&gt;volatile&lt;/b&gt;
fields, but accessing the array&apos;s contents does not. If such volatile access is needed to array contents,
the JDK5.0 &lt;b&gt;java.util.concurrent.atomic&lt;/b&gt; classes should be used instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NotifyWithoutCorrespondingWait" displayName="&apos;notify()&apos; without corresponding &apos;wait()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any call to &lt;b&gt;Object.notify()&lt;/b&gt;
or &lt;b&gt;Object.notifyAll()&lt;/b&gt;
for which no call to a corresponding &lt;b&gt;Object.wait()&lt;/b&gt;
can be found. Only calls which target fields of the current class are reported by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AccessToStaticFieldLockedOnInstance" displayName="Access to static field locked on instance data" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any access to a non-constant &lt;b&gt;static&lt;/b&gt; field which is
locked on either &lt;b&gt;this&lt;/b&gt; or an instance field of &lt;b&gt;this&lt;/b&gt;.
Locking a &lt;b&gt;static&lt;/b&gt; field on instance data does not prevent the field from being
modified by other instances, and thus may result in surprising race conditions.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify classes to ignore. Any static fields of the types specified will be ignored by this inspection.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EmptySynchronizedStatement" displayName="Empty &apos;synchronized&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;synchronized&lt;/b&gt; statements
having empty bodies. While theoretically this may be the semantics intended, this construction is
confusing, and often the result of a typo.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
At present, this inspection is disabled in JSP files.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DoubleCheckedLocking" displayName="Double-checked locking" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports the double-checked locking construct. For a
discussion of double-checked locking and why it is unsafe, see
&lt;a href = &quot;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html
&quot;&gt;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&lt;/a&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore double-checked locking on &lt;b&gt;volatile&lt;/b&gt; fields. Using
a &lt;b&gt;volatile&lt;/b&gt; field for double-checked locking works correctly on virtual machines which
implement the Java Memory Model.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SynchronizationOnStaticField" displayName="Synchronization on &apos;static&apos; field" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports synchronization on static fields. While not strictly incorrect,
synchronization on static fields can lead to bad performance because of contention.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ThreadRun" displayName="Call to &apos;Thread.run()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;run()&lt;/b&gt; on &lt;b&gt;java.lang.Thread&lt;/b&gt; or any of its subclasses.
While occasionally intended, this is usually a mistake, with &lt;b&gt;start()&lt;/b&gt; intended instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BusyWait" displayName="Busy wait" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;java.lang.Thread.sleep()&lt;/b&gt; that occur inside loops. Such calls
are indicative of &quot;busy-waiting&quot;. Busy-waiting is often inefficient, and may result in unexpected deadlocks
as busy-waiting threads do not release locked resources.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThreadWithDefaultRunMethod" displayName="Instantiating a Thread with default &apos;run()&apos; method" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports Thread instances being created without specifying
a Runnable parameter or overriding the run() method. Such threads do nothing
useful.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SharedThreadLocalRandom" displayName="&apos;ThreadLocalRandom&apos; instance might be shared" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;java.util.concurrent.ThreadLocalRandom&lt;/b&gt; instances which might be shared between threads.
A &lt;b&gt;ThreadLocalRandom&lt;/b&gt; might be shared between threads and is reported when it is assigned to a field,
used as a method argument or assigned to a local variable and used in anonymous or nested classes.
A &lt;b&gt;ThreadLocalRandom&lt;/b&gt; should not be shared between threads because that is not thread-safe.
&lt;p&gt;
Usages of &lt;b&gt;ThreadLocalRandom&lt;/b&gt; should typically look like &lt;b&gt;ThreadLocalRandom.current().nextInt(...)&lt;/b&gt;
(or &lt;b&gt;nextDouble(...)&lt;/b&gt; etc.).
When all usages are in this form, &lt;b&gt;ThreadLocalRandom&lt;/b&gt; instances can not be used accidentally by multiple threads.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify methods that are safe to pass a &lt;b&gt;ThreadLocalRandom&lt;/b&gt; to, as an argument.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovySynchronizationOnNonFinalField" displayName="Synchronization on non-final field" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;synchronized&lt;/b&gt; statements where the lock expression
is a non-&lt;b&gt;final&lt;/b&gt; field. Such statements are unlikely to have useful semantics, as different
threads may be locking on different objects even when operating on the same object.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NonAtomicOperationOnVolatileField" displayName="Non-atomic operation on volatile field" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any non-atomic operations on &lt;b&gt;volatile&lt;/b&gt; fields. Non-atomic
operations on &lt;b&gt;volatile&lt;/b&gt; fields are operations where the field is read and
the value is used to update the field. It is possible for the value of the
field to change between the read and the write, possibly invalidating the operation.
The non-atomic operation can be avoided by surrounding it with a synchronized block or
by making use of one of the classes from the &lt;b&gt;java.util.concurrent.atomic&lt;/b&gt; package.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ObjectNotify" displayName="Call to &apos;notify()&apos; instead of &apos;notifyAll()&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;notify()&lt;/b&gt;. While occasionally useful, in almost all cases
&lt;b&gt;notifyAll()&lt;/b&gt; is a better choice. See Doug Lea&apos;s &lt;I&gt;Concurrent Programming in Java&lt;/I&gt; for a discussion.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SynchronizationOnGetClass" displayName="Synchronization on &apos;getClass()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports synchronization on a call to &lt;b&gt;getClass()&lt;/b&gt;.
If the class containing the synchronization is subclassed, the subclass will synchronize on a different class object.
Usually the call to &lt;b&gt;getClass()&lt;/b&gt; can be replaced with a class literal expression, for example &lt;b&gt;String.class&lt;/b&gt;.
An even better solution is synchronizing on a &lt;b&gt;private static final&lt;/b&gt; lock object, access to which can be completely controlled.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2016.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SleepWhileHoldingLock" displayName="Call to &apos;Thread.sleep()&apos; while synchronized" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;java.lang.Thread.sleep()&lt;/b&gt; that occur while
within a &lt;b&gt;synchronized&lt;/b&gt; block or method. Sleeping
while synchronized may result in decreased performance, poor scalability, and possibly
even deadlocking. Consider using &lt;b&gt;wait&lt;/b&gt; instead,
as it will release the lock held.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicFieldAccessedInSynchronizedContext" displayName="Non-private field accessed in synchronized context" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports non-final, non-private fields which are accessed in a synchronized context.
A non-private field cannot be guaranteed to always be accessed in a synchronized manner, and such &quot;partially synchronized&quot;
access may result in unexpectedly inconsistent data structures.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldAccessedSynchronizedAndUnsynchronized" displayName="Field accessed in both synchronized and unsynchronized contexts" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports non-final fields which are accessed in both synchronized and
unsynchronized contexts. Volatile fields and accesses in constructors and initializers are ignored by this
inspection. Such &quot;partially synchronized&quot; access is often the result of a coding oversight, and may
result in unexpectedly inconsistent data structures.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to specify if simple getters and setters are counted as accesses too.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SynchronizeOnThis" displayName="Synchronization on &apos;this&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports synchronization on &lt;b&gt;this&lt;/b&gt; or &lt;b&gt;class&lt;/b&gt; expressions.
Constructs reported include &lt;b&gt;synchronized&lt;/b&gt; blocks, and calls to &lt;b&gt;wait()&lt;/b&gt;,
&lt;b&gt;notify()&lt;/b&gt; or &lt;b&gt;notifyAll()&lt;/b&gt;.
&lt;p&gt;
There are several reasons synchronization on this or class expressions may be a bad idea:
First, it makes synchronization part of the external interface of the class.
This makes a future change to a different locking mechanism difficult.
Second, it makes it hard to track just who is locking on a given object.
And third , it makes a denial-of-service attack possible, either on purpose or it can happen easily by accident when subclassing.

&lt;p&gt;As an alternative, consider
synchronizing on a &lt;b&gt;private final&lt;/b&gt; lock object, access to which can be completely controlled.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyThreadStopSuspendResume" displayName="Call to Thread.stop(), Thread.suspend(), or Thread.resume()" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;Thread.stop()&lt;/b&gt;,&lt;b&gt;Thread.suspend()&lt;/b&gt;, or &lt;b&gt;Thread.resume()&lt;/b&gt;.
These calls are inherently prone to data corruption and deadlock, and their use is strongly
discouraged.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NotifyCalledOnCondition" displayName="&apos;notify()&apos; or &apos;notifyAll()&apos; called on &apos;java.util.concurrent.locks.Condition&apos; object" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;notify()&lt;/b&gt;
or &lt;b&gt;notifyAll()&lt;/b&gt; on an object
of class &lt;b&gt;java.util.concurrent.locks.Condition()&lt;/b&gt;.
It is almost certain that &lt;b&gt;signal()&lt;/b&gt; or
&lt;b&gt;signalAll()&lt;/b&gt; was intended instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyNestedSynchronizedStatement" displayName="Nested &apos;synchronized&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports nested &lt;b&gt;synchronized&lt;/b&gt; statements. Nested &lt;b&gt;synchronized&lt;/b&gt; statements
are either redundant (if the lock objects are identical) or prone to deadlock.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="WaitOrAwaitWithoutTimeout" displayName="&apos;wait()&apos; or &apos;await()&apos; without timeout" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any call to &lt;b&gt;Object.wait()&lt;/b&gt; or &lt;b&gt;Condition.await()&lt;/b&gt; which
does not specify a timeout. Such calls may be dangerous in high-availability programs, as failures in one
component may result in blockages of the waiting component,
if &lt;b&gt;notify()&lt;/b&gt;/&lt;b&gt;notifyAll()&lt;/b&gt;
or &lt;b&gt;signal()&lt;/b&gt;/&lt;b&gt;signalAll()&lt;/b&gt; never
get called.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AtomicFieldUpdaterNotStaticFinal" displayName="AtomicFieldUpdater field not declared &apos;static final&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports fields of type &lt;b&gt;java.util.concurrent.atomic.AtomicLongFieldUpdater&lt;/b&gt;,
&lt;b&gt;java.util.concurrent.atomic.AtomicIntegerFieldUpdater&lt;/b&gt; or &lt;b&gt;java.util.concurrent.atomic.AtomicReferenceFieldUpdater&lt;/b&gt;
that are not &lt;b&gt;static final&lt;/b&gt;. Because only one atomic field updater is needed for updating a &lt;b&gt;volatile&lt;/b&gt; field in all instances
of a class, it can almost always be &lt;b&gt;static&lt;/b&gt;.
Making the updater &lt;b&gt;final&lt;/b&gt;, allows the JVM to optimize access for improved performance.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 16&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyWaitCallNotInLoop" displayName="&apos;wait()&apos; not in loop" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;wait()&lt;/b&gt; not made inside a loop. &lt;b&gt;wait()&lt;/b&gt; is normally
used to suspend a thread until a condition is true, and that condition should be checked after the &lt;b&gt;wait()&lt;/b&gt;
returns. A loop is the clearest way to achieve this.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyUnsynchronizedMethodOverridesSynchronizedMethod" displayName="Unsynchronized method overrides synchronized method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;b&gt;synchronized&lt;/b&gt;methods overriding &lt;b&gt;synchronized&lt;/b&gt; methods.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ThreadStartInConstruction" displayName="Call to &apos;Thread.start()&apos; during object construction" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;start()&lt;/b&gt; on &lt;b&gt;java.lang.Thread&lt;/b&gt;
or any of its subclasses during object construction. While occasionally useful, this construct should be avoided due
to inheritance issues. Subclasses of a class which launches a thread during object construction will not have finished
any initialization logic of their own before the thread has launched.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExtendsThread" displayName="Class directly extends &apos;java.lang.Thread&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any classes which directly extend &lt;b&gt;java.lang.Thread&lt;/b&gt;.
It is usually thought better practice to delegate to rather than extend
&lt;b&gt;java.lang.Thread&lt;/b&gt;, so that a thread creator may exert better
control over the thread&apos;s behavior, and to better localize all concurrency related operations.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SynchronizationOnLocalVariableOrMethodParameter" displayName="Synchronization on local variable or method parameter" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports synchronization on a local variable or parameter.
It is very difficult to guarantee correctness when such synchronization is used.
It may be possible to improve code like this by controlling access through e.g. a synchronized wrapper class,
or by synchronizing on a field.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MethodMayBeSynchronized" displayName="Method with synchronized block could be synchronized method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods of which the body is contained in a single
&lt;b&gt;synchronized&lt;/b&gt; statement. The lock expression
for this &lt;b&gt;synchronized&lt;/b&gt; statement must be
equal to &lt;b&gt;this&lt;/b&gt; for instance methods
or ClassName.&lt;b&gt;class&lt;/b&gt; for static methods. In
such cases the synchronized statements may be replaced by their contents and the
containing method marked &lt;b&gt;synchronized&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovySynchronizationOnThis" displayName="Synchronization on &apos;this&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports synchronization which uses &lt;b&gt;this&lt;/b&gt; as its lock
expression. Constructs reported include &lt;b&gt;synchronized&lt;/b&gt;
blocks which lock &lt;b&gt;this&lt;/b&gt;, and calls to &lt;b&gt;wait()&lt;/b&gt;
&lt;b&gt;notify()&lt;/b&gt; or &lt;b&gt;notifyAll()&lt;/b&gt; which target &lt;b&gt;wait()&lt;/b&gt;.
Such constructs, like synchronized methods, make it hard to track just who is locking on a given
object, and make possible &quot;denial of service&quot; attacks on objects. As an alternative, consider
locking on a private instance variable, access to which can be completely controlled.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="WaitWhileHoldingTwoLocks" displayName="&apos;wait()&apos; while holding two locks" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;.wait()&lt;/b&gt;
being called while the current thread is holding two locks. Since the call to &lt;b&gt;.wait()&lt;/b&gt;
only frees locks on the its target, waiting with two locks held can easily lead to deadlock.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Cloning issues">
    <inspection shortName="CloneReturnsClassType" displayName="&apos;clone()&apos; should have return type equal to the class it contains" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;clone()&lt;/b&gt; methods that have a return type different than the class they are contained in.
Often a &lt;b&gt;clone()&lt;/b&gt; method will have a return type of &lt;b&gt;java.lang.Object&lt;/b&gt;, which makes it harder to use by its clients.
&lt;i&gt;Effective Java, Second Edition&lt;/i&gt; recommends for the return type of the &lt;b&gt;clone()&lt;/b&gt; method to be
the class type of the object it returns.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CloneInNonCloneableClass" displayName="&apos;clone()&apos; method in non-Cloneable class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports classes which override the
&lt;b&gt;clone()&lt;/b&gt; method, but which do not implement the &lt;b&gt;Cloneable&lt;/b&gt; interface.
This usually represents a programming error.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to indicate if this inspection should only warn on &lt;b&gt;public&lt;/b&gt; methods.
Classes designed for inheritance may choose to override &lt;b&gt;clone&lt;/b&gt;() and declare it &lt;b&gt;protected&lt;/b&gt;
without implementing &lt;b&gt;Cloneable&lt;/b&gt; to give subclasses the choice to implement it.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseOfClone" displayName="Use of &apos;clone()&apos; or &apos;Cloneable&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to and implementations of the &lt;b&gt;clone()&lt;/b&gt; method and uses of &lt;b&gt;java.lang.Cloneable&lt;/b&gt;.
Some coding standards prohibit &lt;b&gt;clone()&lt;/b&gt; usage, and recommend using a copy constructor or &lt;b&gt;static&lt;/b&gt; factory method.
Calls to &lt;b&gt;clone()&lt;/b&gt; on arrays are ignored, because that is a common, correct, efficient and compact way to copy an array.

&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CloneableImplementsClone" displayName="Cloneable class without &apos;clone()&apos; method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes which implement the &lt;b&gt;Cloneable&lt;/b&gt; interface, but which do not override the
&lt;b&gt;clone()&lt;/b&gt; method. Such classes use the default implementation of &lt;b&gt;clone()&lt;/b&gt;, which is often not the desired
behavior.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CloneDeclaresCloneNotSupported" displayName="&apos;clone()&apos; does not declare &apos;CloneNotSupportedException&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;clone()&lt;/b&gt; methods which are not declared as throwing
&lt;b&gt;CloneNotSupportedException&lt;/b&gt;. If &lt;b&gt;clone()&lt;/b&gt; is not declared
to possibly throw &lt;b&gt;CloneNotSupportedException&lt;/b&gt;, then subclasses which need to
prohibit cloning will not be able to do so in the standard way. This inspection will not report
&lt;b&gt;clone()&lt;/b&gt; methods declared &lt;b&gt;final&lt;/b&gt;,
or &lt;b&gt;clone()&lt;/b&gt; methods on &lt;b&gt;final&lt;/b&gt; classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to indicate if this inspection should only warn on &lt;b&gt;protected&lt;/b&gt; methods.
In &lt;i&gt;Effective Java, Second Edition&lt;/i&gt; (but not in the first edition) it is recommended to omit the &lt;b&gt;CloneNotSupportedException&lt;/b&gt;
declaration on &lt;b&gt;public&lt;/b&gt; methods, because methods that don&apos;t throw checked exceptions are easier to use.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonPublicClone" displayName="&apos;clone()&apos; method not &apos;public&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;clone()&lt;/b&gt; methods that are &lt;b&gt;protected&lt;/b&gt; and not &lt;b&gt;public&lt;/b&gt;.
When overriding the &lt;b&gt;clone()&lt;/b&gt; method from &lt;b&gt;java.lang.Object&lt;/b&gt; it is convention to make the method &lt;b&gt;public&lt;/b&gt;,
so that it is accessible from non-subclasses outside the package.
See also the documentation of &lt;b&gt;java.lang.Cloneable&lt;/b&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CloneCallsConstructors" displayName="&apos;clone()&apos; instantiates objects with constructor" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to object constructors inside &lt;b&gt;clone()&lt;/b&gt; methods.
Instantiation of objects inside of &lt;b&gt;clone()&lt;/b&gt; should be done by calling &lt;b&gt;clone()&lt;/b&gt;,
instead of creating the object directly, to support later subclassing.
This inspection will not report
&lt;b&gt;clone()&lt;/b&gt; methods declared &lt;b&gt;final&lt;/b&gt;,
or &lt;b&gt;clone()&lt;/b&gt; methods on &lt;b&gt;final&lt;/b&gt; classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Room">
    <inspection shortName="AndroidRoomQuestionMarkBindParameter" displayName="&apos;?&apos; used as parameter in a Room query." enabled="false">&lt;html&gt;
&lt;body&gt;
Reports Room SQL queries that use unnamed query parameters (e.g. &lt;code&gt;WHERE id = ?&lt;/code&gt;). This is not supported by the Room query
analyzer which requires named query parameters (e.g. &lt;code&gt;WHERE id = :id&lt;/code&gt;) that correspond to arguments of the method annotated with
&lt;code&gt;@Query&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AndroidUnresolvedRoomSqlReference" displayName="Unresolved reference in Room SQL" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks Room SQL queries for unresolved references.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Annotations verifying">
    <inspection shortName="SingletonConstructor" displayName="@Singleton constructors" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks that classes annotated by &lt;b&gt;@Singleton&lt;/b&gt; do not have constructors unless it is declared non strict.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DelegatesTo" displayName="@DelegatesTo inspection" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks &lt;b&gt;@groovy.lang.DelegatesTo&lt;/b&gt; annotation arguments.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Numeric issues">
    <inspection shortName="NumericOverflow" displayName="Numeric overflow" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks for expressions which overflow during computation, i.e.: &lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;a = 1.0/0.0;&lt;/font&gt;&lt;/b&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PointlessArithmeticExpression" displayName="Pointless arithmetic expression" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports pointless arithmetic
expressions. Such expressions include adding or subtracting zero, multiplying by zero or one and
division by one. Such expressions may be the result of automated refactorings
not completely followed through to completion, and in any case are unlikely to be what the developer
intended to do.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantMathCall" displayName="Constant call to &apos;java.lang.Math&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;java.lang.Math&lt;/b&gt; or
&lt;b&gt;java.lang.StrictMath&lt;/b&gt; methods which can be determined
to be simple compile-time constants.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="OverlyComplexArithmeticExpression" displayName="Overly complex arithmetic expression" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports arithmetic expressions with too many terms. Such
expressions may be confusing and bug-prone.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the field below to specify the maximum number of terms allowed in an arithmetic expression.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LongLiteralsEndingWithLowercaseL" displayName="&apos;long&apos; literal ending with &apos;l&apos; instead of &apos;L&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports long literals ending with lowercase &apos;l&apos;. These
literals may be confusing, as lowercase &apos;l&apos; looks very similar to &apos;1&apos;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FloatingPointEquality" displayName="Floating point equality comparison" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports floating-point values
being compared with an &lt;b&gt;==&lt;/b&gt; or &lt;b&gt;!=&lt;/b&gt; operator.
Floating point values are inherently inaccurate, and comparing them for exact
equality is almost never the desired semantics. This inspection ignores comparisons
with zero and infinity literals.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnaryPlus" displayName="Unary plus" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any uses of the unary &lt;b&gt;+&lt;/b&gt; operator. Unary plus is usually a null operation, and
its presence may represent a coding error.
Particularly in combination with the increment operator, &lt;b&gt;+++&lt;/b&gt;, or the equals operator, &lt;b&gt;=+&lt;/b&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to only report when an unary plus is used together with a binary or another unary expression.
This means the inspection won&apos;t warn when an unary plus expression is used for example as a method argument, or in an array
initializer expression. In such cases it is much less confusing.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IntegerMultiplicationImplicitCastToLong" displayName="Integer multiplication or shift implicitly cast to long" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports integer multiplications or left shifts which are implicitly cast to long.
For example:
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;void&lt;/b&gt; x(int i) {
    &lt;b&gt;long&lt;/b&gt; val = 65536 * i;
  }
&lt;/code&gt;&lt;/pre&gt;
Such multiplication is often a mistake, as overflow truncation may occur unexpectedly.
Converting the &lt;b&gt;int&lt;/b&gt; literal to a &lt;b&gt;long&lt;/b&gt; literal (&lt;code&gt;65536L&lt;/code&gt;) fixes the problem.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IntegerDivisionInFloatingPointContext" displayName="Integer division in floating point context" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports integer division where the
result is either directly or indirectly used as a floating point number.
Such division is often an error, and may result in unexpected results
due to the truncation that happens in integer division.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ComparisonOfShortAndChar" displayName="Comparison of &apos;short&apos; and &apos;char&apos; values" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports equality comparisons between
&lt;b&gt;short&lt;/b&gt; and &lt;b&gt;char&lt;/b&gt; values.
Such comparisons may cause subtle bugs, as &lt;b&gt;short&lt;/b&gt; values are
signed and &lt;b&gt;char&lt;/b&gt; values unsigned.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CastThatLosesPrecision" displayName="Numeric cast that loses precision" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any cast operations between primitive numeric types which may
result in loss of precision. Such casts are not necessarily a problem, but may result in difficult to
trace bugs if the loss of precision is unexpected.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to indicate that this inspection should ignore casts from
&lt;b&gt;int&lt;/b&gt; to &lt;b&gt;char&lt;/b&gt;.
This type of cast is often used when implementing I/O operations, because the
&lt;b&gt;read()&lt;/b&gt; method of the class
&lt;b&gt;java.io.Reader&lt;/b&gt; returns an &lt;b&gt;int&lt;/b&gt;.
&lt;p&gt;
  Use the second checkbox below to ignore casts of constant values 128-255 from &lt;b&gt;int&lt;/b&gt; to &lt;b&gt;byte&lt;/b&gt;.
  Such values will overflow to negative numbers that still fit inside a byte.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuspiciousLiteralUnderscore" displayName="Suspicious underscore in number literal" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports number literals that use underscores where the groups are not three digits each.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 15&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryExplicitNumericCast" displayName="Unnecessary explicit numeric cast" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any primitive numeric casts which would otherwise be inserted implicitly by the compiler.
Also reports any primitive numeric casts which the compiler will remove.
For example:
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;int&lt;/b&gt; x = (&lt;b&gt;short&lt;/b&gt;)5; // cast will be removed by javac
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ComparisonToNaN" displayName="Comparison to Double.NaN or Float.NaN" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any equality or inequality comparisons to
&lt;b&gt;Double.NaN&lt;/b&gt; or &lt;b&gt;Float.NaN&lt;/b&gt;.
Equality comparison to these values is always false. Instead, use the
&lt;b&gt;Double.isNaN()&lt;/b&gt; of &lt;b&gt;Float.isNaN()&lt;/b&gt;
methods instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BigDecimalEquals" displayName="&apos;equals()&apos; called on &apos;java.math.BigDecimal&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;.equals()&lt;/b&gt; being called
to compare two &lt;b&gt;java.math.BigDecimal&lt;/b&gt; numbers. This is normally
a mistake, as two &lt;b&gt;java.math.BigDecimal&lt;/b&gt;s are only equal if
they are equal in both value and scale, so that 2.0 is not equal to 2.00
To compare &lt;b&gt;java.math.BigDecimal&lt;/b&gt;s for mathematical equality,
use &lt;b&gt;.compareTo()&lt;/b&gt; instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonReproducibleMathCall" displayName="Non-reproducible call to &apos;java.lang.Math&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any calls to &lt;b&gt;java.lang.Math&lt;/b&gt; methods
whose results are not guaranteed to be precisely reproducible.  In environments
where reproducibility of results are needed, &lt;b&gt;java.lang.StrictMath&lt;/b&gt;
should be used instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DoubleLiteralMayBeFloatLiteral" displayName="&apos;double&apos; literal cast to &apos;float&apos; could be &apos;float&apos; literal" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;double&lt;/b&gt; literal expressions
which are immediately cast to &lt;b&gt;float&lt;/b&gt;. Such
literal expressions can be replaced with the equivalent &lt;b&gt;float&lt;/b&gt;
literal.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="BigDecimalMethodWithoutRoundingCalled" displayName="Call to &apos;BigDecimal&apos; method without a rounding mode argument" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;b&gt;divide()&lt;/b&gt; or &lt;b&gt;setScale()&lt;/b&gt; without a rounding mode argument.
Such calls can lead to an &lt;b&gt;ArithmeticException&lt;/b&gt; when the exact value cannot be represented in the result
(e.g. because it has a non-terminating decimal expansion).
Specifying a rounding mode prevents the &lt;b&gt;ArithmeticException&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConfusingFloatingPointLiteral" displayName="Confusing floating-point literal" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any floating point numbers which do not have a decimal point, numbers before the decimal point,
and numbers after the decimal point. Such literals may be confusing, and violate several coding standards.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore floating point numbers in scientific notation.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CachedNumberConstructorCall" displayName="Number constructor call with primitive argument" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any attempt to instantiate a new &lt;b&gt;Long&lt;/b&gt;,
&lt;b&gt;Integer&lt;/b&gt;, &lt;b&gt;Short&lt;/b&gt; or
&lt;b&gt;Byte&lt;/b&gt; object from a primitive &lt;b&gt;long&lt;/b&gt;,
&lt;b&gt;integer&lt;/b&gt;, &lt;b&gt;short&lt;/b&gt; or
&lt;b&gt;byte&lt;/b&gt;
argument. It may be more efficient to use the static method &lt;b&gt;valueOf()&lt;/b&gt;
here (introduced in Java 5), which will cache objects for values between -128 and
127 inclusive.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher&lt;/p&gt;
&lt;p&gt;
Use the first checkbox below to ignore calls to number constructors with a &lt;b&gt;String&lt;/b&gt; argument.
&lt;p&gt;
Use the second checkbox to only report calls to deprecated constructors.
&lt;b&gt;Long&lt;/b&gt;, &lt;b&gt;Integer&lt;/b&gt;, &lt;b&gt;Short&lt;/b&gt; and&lt;b&gt;Byte&lt;/b&gt; constructors are deprecated since JDK 9.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CharUsedInArithmeticContext" displayName="&apos;char&apos; expression used in arithmetic context" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on any expressions of type char which are used in
addition or subtraction expressions.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OctalLiteral" displayName="Octal integer" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports octal integer literals. Some coding standards prohibit the
use of octal literals, as they may be easily confused with decimal literals.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnpredictableBigDecimalConstructorCall" displayName="Unpredictable BigDecimal constructor call" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on calls to &lt;b&gt;BigDecimal&lt;/b&gt;
constructors which accept a &lt;b&gt;double&lt;/b&gt; value.
These constructors can have somewhat unpredictable results because many numbers
cannot be represented exactly in a &lt;b&gt;double&lt;/b&gt;.
It is recommended to use the &lt;b&gt;BigDecimal.valueOf()&lt;/b&gt; method or the constructors which accept a &lt;b&gt;String&lt;/b&gt; instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IntLiteralMayBeLongLiteral" displayName="&apos;int&apos; literal cast to &apos;long&apos; could be &apos;long&apos; literal" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;int&lt;/b&gt; literal expressions
which are immediately cast to &lt;b&gt;long&lt;/b&gt;. Such
literal expressions can be replaced with the equivalent &lt;b&gt;long&lt;/b&gt;
literal.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryUnaryMinus" displayName="Unnecessary unary minus" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any unnecessary unary minuses.
&lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;
    i += -8;
    i = i + -8;
&lt;/pre&gt;&lt;/code&gt;
could be replaced by:
&lt;code&gt;&lt;pre&gt;
    i -= 8;
    i = i - 8;
&lt;/pre&gt;&lt;/code&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DivideByZero" displayName="Divide by zero" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports division by zero or remainder by zero.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OctalAndDecimalIntegersMixed" displayName="Octal and decimal integers in same array" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports mixed octal and decimal integer literals in a single array initializer.
This is often due to copying a list of numbers into an array initializer, where
some of the numbers in the array are zero-padded, and will thus be interpreted by the Java compiler as octal.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BadOddness" displayName="Suspicious test for oddness" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any checks for oddness of the form:
&lt;code&gt;&lt;pre&gt;x % 2 == 1&lt;/pre&gt;&lt;/code&gt;
Such checks will fail for negative odd values, which is probably not the behaviour intended. Consider using:
&lt;code&gt;&lt;pre&gt;x % 2 != 0&lt;/pre&gt;&lt;/code&gt; or: &lt;code&gt;&lt;pre&gt;(x &amp; 1) == 1&lt;/pre&gt;&lt;/code&gt; instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ImplicitNumericConversion" displayName="Implicit numeric conversion" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports implicit conversion between numeric types.
Implicit numeric conversion is not a problem in itself, but if unexpected may be a source
of difficult to trace bugs.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below if you wish this inspection to ignore implicit conversions which
can not result in loss of data (e.g.
&lt;b&gt;int&lt;/b&gt;-&gt;&lt;b&gt;long&lt;/b&gt;).
&lt;p&gt;Use the second checkbox to indicate that this inspection should ignore all conversions from
and to &lt;b&gt;char&lt;/b&gt;.
&lt;p&gt;Use the third checkbox to let this inspection ignore all conversions from literals and
compile time constants.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Spelling">
    <inspection shortName="SpellCheckingInspection" displayName="Typo" enabled="false">&lt;html&gt;
&lt;body&gt;

Spellchecker inspection helps locate typos and misspelling in your code, comments and literals, and fix them in one click.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="XSLT">
    <inspection shortName="XsltVariableShadowing" displayName="Variable Shadowing" enabled="false">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspections checks for shadowed XSLT variables which can lead to possibly undesired effects.
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="XsltTemplateInvocation" displayName="Template Invocation Problems" enabled="false">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspection checks for problems in invocations of named XSLT templates, such as missing arguments, passing
  arguments that are not declared by the template or passing an argument for a certain parameter more than once.
&lt;/p&gt;

&lt;p&gt;
  The inspection assumes that parameters declared with a default-value are optional and will not complain if an
  invocation does not specify an argument for such parameters.
&lt;/p&gt;


&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="XsltUnusedDeclaration" displayName="Unused Variable/Parameter" enabled="false">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  Reports local variables and parameters that are never used.
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="XsltDeclarations" displayName="Declaration Problems" enabled="false">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspections checks for various problems in declarations of XSLT variables, parameters and named templates:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Duplicate declarations&lt;/li&gt;
  &lt;li&gt;Illegal identifiers&lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Manifest">
    <inspection shortName="MisspelledHeader" displayName="Unknown or Misspelled Header Name" enabled="false">&lt;html&gt;
&lt;body&gt;
  Reports any unknown and probably misspelled header names and provides possible variants.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MissingFinalNewline" displayName="Missing Final New Line" enabled="false">&lt;html&gt;
&lt;body&gt;
  Checks whether a manifest file ends with a final newline (as required by the JAR file specification).
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="toString() issues">
    <inspection shortName="ClassHasNoToStringMethod" displayName="Class does not override &apos;toString()&apos; method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports classes without &lt;b&gt;toString()&lt;/b&gt; method.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldNotUsedInToString" displayName="Field not used in &apos;toString()&apos; method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any fields which are not used in the &lt;b&gt;toString()&lt;/b&gt; method of a class. This can be useful to discover
fields that were added after the &lt;b&gt;toString()&lt;/b&gt; method was created and for which the &lt;b&gt;toString()&lt;/b&gt; method was not
correctly adjusted. It is possible to exclude fields from this check in the settings accessible via the Generate &gt; toString() dialog.
&lt;p&gt;
  This inspection will also check for problems with getter methods if &apos;enable getters in code generation&apos; is enabled
  in settings.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Java language level issues">
    <inspection shortName="EnumAsName" displayName="Use of &apos;enum&apos; as identifier" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports variables, methods, or classes named
&lt;b&gt;enum&lt;/b&gt;. Such names are legal under Java 1.4 or
earlier JVMs, but will cause problems under Java 5.0 or later.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AutoBoxing" displayName="Auto-boxing" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &quot;auto-boxing&quot;, i.e. the automatic wrapping of primitive values as objects, where needed.
Code which relies on auto-boxing will not work in pre-Java 5.0 environments.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AnnotationClass" displayName="Annotation class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports annotation interfaces.
Such interfaces are not supported under Java 1.4 or earlier JVMs.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssertStatement" displayName="&apos;assert&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;assert&lt;/b&gt; statements.
Such statements are not supported under Java 1.3 or earlier JVMs.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssertAsName" displayName="Use of &apos;assert&apos; as identifier" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports variables, methods, or classes named
&lt;b&gt;assert&lt;/b&gt;. Such names are legal under Java 1.3 or
earlier JVMs, but will cause problems under Java 1.4 or later.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EnumClass" displayName="Enumerated class" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;enum&lt;/b&gt; classes.
Such statements are not supported under Java 1.4 or earlier JVMs.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ForeachStatement" displayName="Extended &apos;for&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports the Java 5 &lt;b&gt;for&lt;/b&gt; statement syntax.
Such &lt;b&gt;for&lt;/b&gt; statements are not supported under Java 1.4 and older.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="VarargParameter" displayName="Varargs method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports methods taking a variable number of arguments, also known as varargs methods.
Such methods are not supported under Java 1.4 or earlier JVMs.
The quickfix of this inspection replaces a variable argument
parameter with the equivalent array parameter. Relevant arguments in calls to
the method are wrapped in an array initializer expression.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Annotation" displayName="Annotation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any uses of annotations.
Annotations are not supported under Java 1.4 or earlier JVMs.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AutoUnboxing" displayName="Auto-unboxing" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &quot;auto-unboxing&quot;, e.g. the automatic unwrapping of objects into primitive values, where needed.
Code which relies on auto-boxing will not work in pre-Java 5.0 environments.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="RELAX NG">
    <inspection shortName="UnresolvedReference" displayName="Unresolved References" enabled="false">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspections checks for any unresolved references to named patterns (&quot;define&quot;) in a RELAX-NG file in XML Syntax.
  For unresolved references, a QuickFix is offered to create a corresponding define-element.
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by RELAX-NG Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnusedDefine" displayName="Unused Define" enabled="false">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspections checks for any unused named patterns (&quot;define&quot;) in a RELAX-NG file (XML or Compact Syntax) and
  highlights them as unused symbols. This is done with respect to includes from other files, i.e. a define is not
  marked as unused if it is used through an include in another file.
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by RELAX-NG Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Android Lint: Lint">
    <inspection shortName="AndroidLintLintBaseline" displayName="Baseline Issues" enabled="false">&lt;html&gt;&lt;body&gt;Baseline Issues&lt;br&gt;&lt;br&gt;Lint can be configured with a &quot;baseline&quot;; a set of current issues found in a codebase, which future runs of lint will silently ignore. Only new issues not found in the baseline are reported.&lt;br/&gt;
&lt;br/&gt;
Note that while opening files in the IDE, baseline issues are not filtered out; the purpose of baselines is to allow you to get started using lint and break the build on all newly introduced errors, without having to go back and fix the entire codebase up front. However, when you open up existing files you still want to be aware of and fix issues as you come across them.&lt;br/&gt;
&lt;br/&gt;
This issue type is used to emit two types of informational messages in reports: first, whether any issues were filtered out so you don&apos;t have a false sense of security if you forgot that you&apos;ve checked in a baseline file, and second, whether any issues in the baseline file appear to have been fixed such that you can stop filtering them out and get warned if the issues are re-introduced.&lt;br&gt;&lt;br&gt;Issue id: LintBaseline&lt;/body&gt;&lt;/html&gt;</inspection>
  </group>
  <group name="Android Lint: Correctness">
    <inspection shortName="AndroidLintInvalidVectorPath" displayName="Invalid vector paths" enabled="false">&lt;html&gt;&lt;body&gt;Invalid vector paths&lt;br&gt;&lt;br&gt;This check ensures that vector paths are valid. For example, it makes sure that the numbers are not using scientific notation (such as 1.0e3) which can lead to runtime crashes on older devices. As another example, it flags numbers like &lt;code&gt;.5&lt;/code&gt; which should be written as &lt;code&gt;0.5&lt;/code&gt; instead to avoid crashes on some pre-Marshmallow devices.&lt;br&gt;&lt;br&gt;Issue id: InvalidVectorPath&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=78162&quot;&gt;https://code.google.com/p/android/issues/detail?id=78162&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAppLinksAutoVerifyError" displayName="App Links Auto Verification Failure" enabled="false">&lt;html&gt;&lt;body&gt;App Links Auto Verification Failure&lt;br&gt;&lt;br&gt;Ensures that app links are correctly set and associated with website.&lt;br&gt;&lt;br&gt;Issue id: AppLinksAutoVerifyError&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://g.co/appindexing/applinks&quot;&gt;https://g.co/appindexing/applinks&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInvalidAnalyticsName" displayName="Invalid Analytics name" enabled="false">&lt;html&gt;&lt;body&gt;Invalid Analytics Name&lt;br&gt;&lt;br&gt;Event names and parameters must follow the naming conventions defined in the`FirebaseAnalytics#logEvent()` documentation.&lt;br&gt;&lt;br&gt;Issue id: InvalidAnalyticsName&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics#logEvent(java.lang.String,%20android.os.Bundle)&quot;&gt;http://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics#logEvent(java.lang.String,%20android.os.Bundle)&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSuspicious0dp" displayName="Suspicious 0dp dimension" enabled="false">&lt;html&gt;&lt;body&gt;Suspicious 0dp dimension&lt;br&gt;&lt;br&gt;Using 0dp as the width in a horizontal LinearLayout with weights is a useful trick to ensure that only the weights (and not the intrinsic sizes) are used when sizing the children.&lt;br/&gt;
&lt;br/&gt;
However, if you use 0dp for the opposite dimension, the view will be invisible. This can happen if you change the orientation of a layout without also flipping the 0dp dimension in all the children.&lt;br&gt;&lt;br&gt;Issue id: Suspicious0dp&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintNotSibling" displayName="RelativeLayout Invalid Constraints" enabled="false">&lt;html&gt;&lt;body&gt;Invalid Constraints&lt;br&gt;&lt;br&gt;Layout constraints in a given &lt;code&gt;ConstraintLayout&lt;/code&gt; or &lt;code&gt;RelativeLayout&lt;/code&gt; should reference other views within the same relative layout (but not itself!)&lt;br&gt;&lt;br&gt;Issue id: NotSibling&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintFontValidationError" displayName="Validation of font files" enabled="false">&lt;html&gt;&lt;body&gt;Validation of font files&lt;br&gt;&lt;br&gt;Look for problems in various font files.&lt;br&gt;&lt;br&gt;Issue id: FontValidationError&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/guide/topics/text/downloadable-fonts.html&quot;&gt;https://developer.android.com/guide/topics/text/downloadable-fonts.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintVectorDrawableCompat" displayName="Using VectorDrawableCompat" enabled="false">&lt;html&gt;&lt;body&gt;Using VectorDrawableCompat&lt;br&gt;&lt;br&gt;To use VectorDrawableCompat, you need to make two modifications to your project. First, set &lt;code&gt;android.defaultConfig.vectorDrawables.useSupportLibrary = true&lt;/code&gt; in your &lt;code&gt;build.gradle&lt;/code&gt; file, and second, use &lt;code&gt;app:srcCompat&lt;/code&gt; instead of &lt;code&gt;android:src&lt;/code&gt; to refer to vector drawables.&lt;br&gt;&lt;br&gt;Issue id: VectorDrawableCompat&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://chris.banes.me/2016/02/25/appcompat-vector/#enabling-the-flag&quot;&gt;http://chris.banes.me/2016/02/25/appcompat-vector/#enabling-the-flag&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintValidRestrictions" displayName="Invalid Restrictions Descriptor" enabled="false">&lt;html&gt;&lt;body&gt;Invalid Restrictions Descriptor&lt;br&gt;&lt;br&gt;Ensures that an applications restrictions XML file is properly formed&lt;br&gt;&lt;br&gt;Issue id: ValidRestrictions&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/RestrictionsManager.html&quot;&gt;https://developer.android.com/reference/android/content/RestrictionsManager.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintReferenceType" displayName="Incorrect reference types" enabled="false">&lt;html&gt;&lt;body&gt;Incorrect reference types&lt;br&gt;&lt;br&gt;When you generate a resource alias, the resource you are pointing to must be of the same type as the alias&lt;br&gt;&lt;br&gt;Issue id: ReferenceType&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintPendingBindings" displayName="Missing Pending Bindings" enabled="false">&lt;html&gt;&lt;body&gt;Missing Pending Bindings&lt;br&gt;&lt;br&gt;When using a &lt;code&gt;ViewDataBinding&lt;/code&gt; in a &lt;code&gt;onBindViewHolder&lt;/code&gt; method, you &lt;b&gt;must&lt;/b&gt; call &lt;code&gt;executePendingBindings()&lt;/code&gt; before the method exits; otherwise the data binding runtime will update the UI in the next animation frame causing a delayed update and potential jumps if the item resizes.&lt;br&gt;&lt;br&gt;Issue id: PendingBindings&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDuplicateIncludedIds" displayName="Duplicate ids across layouts combined with include tags" enabled="false">&lt;html&gt;&lt;body&gt;Duplicate ids across layouts combined with include tags&lt;br&gt;&lt;br&gt;It&apos;s okay for two independent layouts to use the same ids. However, if layouts are combined with include tags, then the id&apos;s need to be unique within any chain of included layouts, or &lt;code&gt;Activity#findViewById()&lt;/code&gt; can return an unexpected view.&lt;br&gt;&lt;br&gt;Issue id: DuplicateIncludedIds&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInvalidUsesTagAttribute" displayName="Invalid name attribute for uses element." enabled="false">&lt;html&gt;&lt;body&gt;Invalid &lt;code&gt;name&lt;/code&gt; attribute for &lt;code&gt;uses&lt;/code&gt; element.&lt;br&gt;&lt;br&gt;The &amp;lt;uses&gt; element in &lt;code&gt;&amp;lt;automotiveApp&gt;&lt;/code&gt; should contain a valid value for the &lt;code&gt;name&lt;/code&gt; attribute.&lt;br/&gt;
Valid values are &lt;code&gt;media&lt;/code&gt;, &lt;code&gt;notification&lt;/code&gt;, or &lt;code&gt;sms&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: InvalidUsesTagAttribute&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/auto/start/index.html#auto-metadata&quot;&gt;https://developer.android.com/training/auto/start/index.html#auto-metadata&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintPrivateApi" displayName="Using Private APIs" enabled="false">&lt;html&gt;&lt;body&gt;Using Private APIs&lt;br&gt;&lt;br&gt;Using reflection to access hidden/private Android APIs is not safe; it will often not work on devices from other vendors, and it may suddenly stop working (if the API is removed) or crash spectacularly (if the API behavior changes, since there are no guarantees for compatibility).&lt;br&gt;&lt;br&gt;Issue id: PrivateApi&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintScrollViewCount" displayName="ScrollViews can have only one child" enabled="false">&lt;html&gt;&lt;body&gt;ScrollViews can have only one child&lt;br&gt;&lt;br&gt;ScrollViews can only have one child widget. If you want more children, wrap them in a container layout.&lt;br&gt;&lt;br&gt;Issue id: ScrollViewCount&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingMediaBrowserServiceIntentFilter" displayName="Missing intent-filter with action android.media.browse.MediaBrowserService." enabled="false">&lt;html&gt;&lt;body&gt;Missing intent-filter with action &lt;code&gt;android.media.browse.MediaBrowserService&lt;/code&gt;.&lt;br&gt;&lt;br&gt;An Automotive Media App requires an exported service that extends &lt;code&gt;android.service.media.MediaBrowserService&lt;/code&gt; with an &lt;code&gt;intent-filter&lt;/code&gt; for the action &lt;code&gt;android.media.browse.MediaBrowserService&lt;/code&gt; to be able to browse and play media.&lt;br/&gt;
To do this, add&lt;br/&gt;
&lt;code&gt;&amp;lt;intent-filter&gt;&lt;/code&gt;&lt;br/&gt;
    &lt;code&gt;&amp;lt;action android:name=&quot;android.media.browse.MediaBrowserService&quot; /&gt;&lt;/code&gt;&lt;br/&gt;
&lt;code&gt;&amp;lt;/intent-filter&gt;&lt;/code&gt;&lt;br/&gt;
 to the service that extends &lt;code&gt;android.service.media.MediaBrowserService&lt;/code&gt;&lt;br&gt;&lt;br&gt;Issue id: MissingMediaBrowserServiceIntentFilter&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/auto/audio/index.html#config_manifest&quot;&gt;https://developer.android.com/training/auto/audio/index.html#config_manifest&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintPxUsage" displayName="Using &apos;px&apos; dimension" enabled="false">&lt;html&gt;&lt;body&gt;Using &apos;px&apos; dimension&lt;br&gt;&lt;br&gt;For performance reasons and to keep the code simpler, the Android system uses pixels as the standard unit for expressing dimension or coordinate values. That means that the dimensions of a view are always expressed in the code using pixels, but always based on the current screen density. For instance, if &lt;code&gt;myView.getWidth()&lt;/code&gt; returns 10, the view is 10 pixels wide on the current screen, but on a device with a higher density screen, the value returned might be 15. If you use pixel values in your application code to work with bitmaps that are not pre-scaled for the current screen density, you might need to scale the pixel values that you use in your code to match the un-scaled bitmap source.&lt;br&gt;&lt;br&gt;Issue id: PxUsage&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/practices/screens_support.html#screen-independence&quot;&gt;http://developer.android.com/guide/practices/screens_support.html#screen-independence&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintResourceAsColor" displayName="Should pass resolved color instead of resource id" enabled="false">&lt;html&gt;&lt;body&gt;Should pass resolved color instead of resource id&lt;br&gt;&lt;br&gt;Methods that take a color in the form of an integer should be passed an RGB triple, not the actual color resource id. You must call &lt;code&gt;getResources().getColor(resource)&lt;/code&gt; to resolve the actual color value first.&lt;br/&gt;
&lt;br/&gt;
Similarly, methods that take a dimension integer should be passed an actual dimension (call &lt;code&gt;getResources().getDimension(resource)&lt;/code&gt;&lt;br&gt;&lt;br&gt;Issue id: ResourceAsColor&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintOrientation" displayName="Missing explicit orientation" enabled="false">&lt;html&gt;&lt;body&gt;Missing explicit orientation&lt;br&gt;&lt;br&gt;The default orientation of a LinearLayout is horizontal. It&apos;s pretty easy to believe that the layout is vertical, add multiple children to it, and wonder why only the first child is visible (when the subsequent children are off screen to the right). This lint rule helps pinpoint this issue by warning whenever a LinearLayout is used with an implicit orientation and multiple children.&lt;br/&gt;
&lt;br/&gt;
It also checks for empty LinearLayouts without an &lt;code&gt;orientation&lt;/code&gt; attribute that also defines an &lt;code&gt;id&lt;/code&gt; attribute. This catches the scenarios where children will be added to the &lt;code&gt;LinearLayout&lt;/code&gt; dynamically. &lt;br&gt;&lt;br&gt;Issue id: Orientation&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintManifestResource" displayName="Manifest Resource References" enabled="false">&lt;html&gt;&lt;body&gt;Manifest Resource References&lt;br&gt;&lt;br&gt;Elements in the manifest can reference resources, but those resources cannot vary across configurations (except as a special case, by version, and except for a few specific package attributes such as the application title and icon).&lt;br&gt;&lt;br&gt;Issue id: ManifestResource&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintHighAppVersionCode" displayName="versionCode too high" enabled="false">&lt;html&gt;&lt;body&gt;VersionCode too high&lt;br&gt;&lt;br&gt;The declared &lt;code&gt;versionCode&lt;/code&gt; is an Integer. Ensure that the version number is not close to the limit. It is recommended to monotonically increase this number each minor or major release of the app. Note that updating an app with a versionCode over &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; is not possible.&lt;br&gt;&lt;br&gt;Issue id: HighAppVersionCode&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/studio/publish/versioning.html&quot;&gt;https://developer.android.com/studio/publish/versioning.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDuplicateActivity" displayName="Activity registered more than once" enabled="false">&lt;html&gt;&lt;body&gt;Activity registered more than once&lt;br&gt;&lt;br&gt;An activity should only be registered once in the manifest. If it is accidentally registered more than once, then subtle errors can occur, since attribute declarations from the two elements are not merged, so you may accidentally remove previous declarations.&lt;br&gt;&lt;br&gt;Issue id: DuplicateActivity&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintManifestOrder" displayName="Incorrect order of elements in manifest" enabled="false">&lt;html&gt;&lt;body&gt;Incorrect order of elements in manifest&lt;br&gt;&lt;br&gt;The &amp;lt;application&gt; tag should appear after the elements which declare which version you need, which features you need, which libraries you need, and so on. In the past there have been subtle bugs (such as themes not getting applied correctly) when the &lt;code&gt;&amp;lt;application&gt;&lt;/code&gt; tag appears before some of these other elements, so it&apos;s best to order your manifest in the logical dependency order.&lt;br&gt;&lt;br&gt;Issue id: ManifestOrder&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintEnqueueWork" displayName="WorkManager Enqueue" enabled="false">&lt;html&gt;&lt;body&gt;WorkManager Enqueue&lt;br&gt;&lt;br&gt;&lt;code&gt;WorkContinuations&lt;/code&gt; cannot be enqueued automatically.  You must call &lt;code&gt;enqueue()&lt;/code&gt; on a &lt;code&gt;WorkContinuation&lt;/code&gt; to have it and its parent continuations enqueued inside &lt;code&gt;WorkManager&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: EnqueueWork&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingQuantity" displayName="Missing quantity translation" enabled="false">&lt;html&gt;&lt;body&gt;Missing quantity translation&lt;br&gt;&lt;br&gt;Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&lt;br/&gt;
&lt;br/&gt;
This lint check looks at each translation of a &lt;code&gt;&amp;lt;plural&gt;&lt;/code&gt; and makes sure that all the quantity strings considered by the given language are provided by this translation.&lt;br/&gt;
&lt;br/&gt;
For example, an English translation must provide a string for &lt;code&gt;quantity=&quot;one&quot;&lt;/code&gt;. Similarly, a Czech translation must provide a string for &lt;code&gt;quantity=&quot;few&quot;&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: MissingQuantity&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/resources/string-resource.html#Plurals&quot;&gt;http://developer.android.com/guide/topics/resources/string-resource.html#Plurals&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingDefaultResource" displayName="Missing Default" enabled="false">&lt;html&gt;&lt;body&gt;Missing Default&lt;br&gt;&lt;br&gt;If a resource is only defined in folders with qualifiers like &lt;code&gt;-land&lt;/code&gt; or &lt;code&gt;-en&lt;/code&gt;, and there is no default declaration in the base folder (&lt;code&gt;layout&lt;/code&gt; or &lt;code&gt;values&lt;/code&gt; etc), then the app will crash if that resource is accessed on a device where the device is in a configuration missing the given qualifier.&lt;br/&gt;
&lt;br/&gt;
As a special case, drawables do not have to be specified in the base folder; if there is a match in a density folder (such as &lt;code&gt;drawable-mdpi&lt;/code&gt;) that image will be used and scaled. Note however that if you  only specify a drawable in a folder like &lt;code&gt;drawable-en-hdpi&lt;/code&gt;, the app will crash in non-English locales.&lt;br/&gt;
&lt;br/&gt;
There may be scenarios where you have a resource, such as a &lt;code&gt;-fr&lt;/code&gt; drawable, which is only referenced from some other resource with the same qualifiers (such as a &lt;code&gt;-fr&lt;/code&gt; style), which itself has safe fallbacks. However, this still makes it possible for somebody to accidentally reference the drawable and crash, so it is safer to create a default dummy fallback in the base folder. Alternatively, you can suppress the issue by adding &lt;code&gt;tools:ignore=&quot;MissingDefaultResource&quot;&lt;/code&gt; on the element.&lt;br/&gt;
&lt;br/&gt;
(This scenario frequently happens with string translations, where you might delete code and the corresponding resources, but forget to delete a translation. There is a dedicated issue id for that scenario, with the id &lt;code&gt;ExtraTranslation&lt;/code&gt;.)&lt;br&gt;&lt;br&gt;Issue id: MissingDefaultResource&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSQLiteString" displayName="Using STRING instead of TEXT" enabled="false">&lt;html&gt;&lt;body&gt;Using STRING instead of TEXT&lt;br&gt;&lt;br&gt;In SQLite, any column can store any data type; the declared type for a column is more of a hint as to what the data should be cast to when stored.&lt;br/&gt;
&lt;br/&gt;
There are many ways to store a string. &lt;code&gt;TEXT&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt;, &lt;code&gt;CHARACTER&lt;/code&gt; and &lt;code&gt;CLOB&lt;/code&gt; are string types, &lt;b&gt;but `STRING` is not&lt;/b&gt;. Columns defined as STRING are actually numeric.&lt;br/&gt;
&lt;br/&gt;
If you try to store a value in a numeric column, SQLite will try to cast it to a float or an integer before storing. If it can&apos;t, it will just store it as a string.&lt;br/&gt;
&lt;br/&gt;
This can lead to some subtle bugs. For example, when SQLite encounters a string like &lt;code&gt;1234567e1234&lt;/code&gt;, it will parse it as a float, but the result will be out of range for floating point numbers, so &lt;code&gt;Inf&lt;/code&gt; will be stored! Similarly, strings that look like integers will lose leading zeroes.&lt;br/&gt;
&lt;br/&gt;
To fix this, you can change your schema to use a &lt;code&gt;TEXT&lt;/code&gt; type instead.&lt;br&gt;&lt;br&gt;Issue id: SQLiteString&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://www.sqlite.org/datatype3.html&quot;&gt;https://www.sqlite.org/datatype3.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAppCompatCustomView" displayName="Appcompat Custom Widgets" enabled="false">&lt;html&gt;&lt;body&gt;Appcompat Custom Widgets&lt;br&gt;&lt;br&gt;In order to support features such as tinting, the appcompat library will automatically load special appcompat replacements for the builtin widgets. However, this does not work for your own custom views.&lt;br/&gt;
&lt;br/&gt;
Instead of extending the &lt;code&gt;android.widget&lt;/code&gt; classes directly, you should instead extend one of the delegate classes in &lt;code&gt;android.support.v7.widget.AppCompat&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: AppCompatCustomView&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGradleDependency" displayName="Obsolete Gradle Dependency" enabled="false">&lt;html&gt;&lt;body&gt;Obsolete Gradle Dependency&lt;br&gt;&lt;br&gt;This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find.&lt;br&gt;&lt;br&gt;Issue id: GradleDependency&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAdapterViewChildren" displayName="AdapterViews cannot have children in XML" enabled="false">&lt;html&gt;&lt;body&gt;AdapterViews cannot have children in XML&lt;br&gt;&lt;br&gt;AdapterViews such as ListViews must be configured with data from Java code, such as a ListAdapter.&lt;br&gt;&lt;br&gt;Issue id: AdapterViewChildren&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/reference/android/widget/AdapterView.html&quot;&gt;http://developer.android.com/reference/android/widget/AdapterView.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingBackupPin" displayName="Missing Backup Pin" enabled="false">&lt;html&gt;&lt;body&gt;Missing Backup Pin&lt;br&gt;&lt;br&gt;It is highly recommended to declare a backup &lt;code&gt;&amp;lt;pin&gt;&lt;/code&gt; element. Not having a second pin defined can cause connection failures when the particular site certificate is rotated and the app has not yet been updated.&lt;br&gt;&lt;br&gt;Issue id: MissingBackupPin&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/preview/features/security-config.html&quot;&gt;https://developer.android.com/preview/features/security-config.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUniqueConstants" displayName="Overlapping Enumeration Constants" enabled="false">&lt;html&gt;&lt;body&gt;Overlapping Enumeration Constants&lt;br&gt;&lt;br&gt;The &lt;code&gt;@IntDef&lt;/code&gt; annotation allows you to create a light-weight &quot;enum&quot; or type definition. However, it&apos;s possible to accidentally specify the same value for two or more of the values, which can lead to hard-to-detect bugs. This check looks for this scenario and flags any repeated constants.&lt;br/&gt;
&lt;br/&gt;
In some cases, the repeated constant is intentional (for example, renaming a constant to a more intuitive name, and leaving the old name in place for compatibility purposes).  In that case, simply suppress this check by adding a &lt;code&gt;@SuppressLint(&quot;UniqueConstants&quot;)&lt;/code&gt; annotation.&lt;br&gt;&lt;br&gt;Issue id: UniqueConstants&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintLocalSuppress" displayName="@SuppressLint on invalid element" enabled="false">&lt;html&gt;&lt;body&gt;@SuppressLint on invalid element&lt;br&gt;&lt;br&gt;The &lt;code&gt;@SuppressAnnotation&lt;/code&gt; is used to suppress Lint warnings in Java files. However, while many lint checks analyzes the Java source code, where they can find annotations on (for example) local variables, some checks are analyzing the &lt;code&gt;.class&lt;/code&gt; files. And in class files, annotations only appear on classes, fields and methods. Annotations placed on local variables disappear. If you attempt to suppress a lint error for a class-file based lint check, the suppress annotation not work. You must move the annotation out to the surrounding method.&lt;br&gt;&lt;br&gt;Issue id: LocalSuppress&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintNestedScrolling" displayName="Nested scrolling widgets" enabled="false">&lt;html&gt;&lt;body&gt;Nested scrolling widgets&lt;br&gt;&lt;br&gt;A scrolling widget such as a &lt;code&gt;ScrollView&lt;/code&gt; should not contain any nested scrolling widgets since this has various usability issues&lt;br&gt;&lt;br&gt;Issue id: NestedScrolling&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingOnPlayFromSearch" displayName="Missing onPlayFromSearch." enabled="false">&lt;html&gt;&lt;body&gt;Missing &lt;code&gt;onPlayFromSearch&lt;/code&gt;.&lt;br&gt;&lt;br&gt;To support voice searches on Android Auto, in addition to adding an &lt;code&gt;intent-filter&lt;/code&gt; for the action &lt;code&gt;onPlayFromSearch&lt;/code&gt;, you also need to override and implement &lt;code&gt;onPlayFromSearch(String query, Bundle bundle)&lt;/code&gt;&lt;br&gt;&lt;br&gt;Issue id: MissingOnPlayFromSearch&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/auto/audio/index.html#support_voice&quot;&gt;https://developer.android.com/training/auto/audio/index.html#support_voice&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDefaultLocale" displayName="Implied default locale in case conversion" enabled="false">&lt;html&gt;&lt;body&gt;Implied default locale in case conversion&lt;br&gt;&lt;br&gt;Calling &lt;code&gt;String#toLowerCase()&lt;/code&gt; or &lt;code&gt;#toUpperCase()&lt;/code&gt; &lt;b&gt;without specifying an explicit locale&lt;/b&gt; is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for &lt;code&gt;i&lt;/code&gt; is &lt;b&gt;not&lt;/b&gt; &lt;code&gt;I&lt;/code&gt;.&lt;br/&gt;
&lt;br/&gt;
If you want the methods to just perform ASCII replacement, for example to convert an enum name, call &lt;code&gt;String#toUpperCase(Locale.US)&lt;/code&gt; instead. If you really want to use the current locale, call &lt;code&gt;String#toUpperCase(Locale.getDefault())&lt;/code&gt; instead.&lt;br&gt;&lt;br&gt;Issue id: DefaultLocale&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/reference/java/util/Locale.html#default_locale&quot;&gt;http://developer.android.com/reference/java/util/Locale.html#default_locale&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingPermission" displayName="Missing Permissions" enabled="false">&lt;html&gt;&lt;body&gt;Missing Permissions&lt;br&gt;&lt;br&gt;This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.&lt;br/&gt;
&lt;br/&gt;
Furthermore, for permissions that are revocable (with targetSdkVersion 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime.&lt;br&gt;&lt;br&gt;Issue id: MissingPermission&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUntranslatable" displayName="Translated Untranslatable" enabled="false">&lt;html&gt;&lt;body&gt;Translated Untranslatable&lt;br&gt;&lt;br&gt;Strings can be marked with &lt;code&gt;translatable=false&lt;/code&gt; to indicate that they are not intended to be translated, but are present in the resource file for other purposes (for example for non-display strings that should vary by some other configuration qualifier such as screen size or API level).&lt;br/&gt;
&lt;br/&gt;
There are cases where translators accidentally translate these strings anyway, and lint will flag these occurrences with this lint check.&lt;br&gt;&lt;br&gt;Issue id: Untranslatable&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGradleDynamicVersion" displayName="Gradle Dynamic Version" enabled="false">&lt;html&gt;&lt;body&gt;Gradle Dynamic Version&lt;br&gt;&lt;br&gt;Using &lt;code&gt;+&lt;/code&gt; in dependencies lets you automatically pick up the latest available version rather than a specific, named version. However, this is not recommended; your builds are not repeatable; you may have tested with a slightly different version than what the build server used. (Using a dynamic version as the major version number is more problematic than using it in the minor version position.)&lt;br&gt;&lt;br&gt;Issue id: GradleDynamicVersion&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintJobSchedulerService" displayName="JobScheduler problems" enabled="false">&lt;html&gt;&lt;body&gt;JobScheduler problems&lt;br&gt;&lt;br&gt;This check looks for various common mistakes in using the JobScheduler API: the service class must extend &lt;code&gt;JobService&lt;/code&gt;, the service must be registered in the manifest and the registration must require the permission &lt;code&gt;android.permission.BIND_JOB_SERVICE&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: JobSchedulerService&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/topic/performance/scheduling.html&quot;&gt;https://developer.android.com/topic/performance/scheduling.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintExtraTranslation" displayName="Extra translation" enabled="false">&lt;html&gt;&lt;body&gt;Extra translation&lt;br&gt;&lt;br&gt;If a string appears in a specific language translation file, but there is no corresponding string in the default locale, then this string is probably unused. (It&apos;s technically possible that your application is only intended to run in a specific locale, but it&apos;s still a good idea to provide a fallback.)&lt;br/&gt;
&lt;br/&gt;
Note that these strings can lead to crashes if the string is looked up on any locale not providing a translation, so it&apos;s important to clean them up.&lt;br&gt;&lt;br&gt;Issue id: ExtraTranslation&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintValidFragment" displayName="Fragment not instantiatable" enabled="false">&lt;html&gt;&lt;body&gt;Fragment not instantiatable&lt;br&gt;&lt;br&gt;From the Fragment documentation:&lt;br/&gt;
&lt;b&gt;Every&lt;/b&gt; fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with &lt;code&gt;setArguments(Bundle)&lt;/code&gt; and later retrieved by the Fragment with &lt;code&gt;getArguments()&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: ValidFragment&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/Fragment.html#Fragment()&quot;&gt;http://developer.android.com/reference/android/app/Fragment.html#Fragment()&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDeprecated" displayName="Using deprecated resources" enabled="false">&lt;html&gt;&lt;body&gt;Using deprecated resources&lt;br&gt;&lt;br&gt;Deprecated views, attributes and so on are deprecated because there is a better way to do something. Do it that new way. You&apos;ve been warned.&lt;br&gt;&lt;br&gt;Issue id: Deprecated&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUnsupportedChromeOsHardware" displayName="Unsupported Chrome OS Hardware Feature" enabled="false">&lt;html&gt;&lt;body&gt;Unsupported Chrome OS Hardware Feature&lt;br&gt;&lt;br&gt;The &lt;code&gt;&amp;lt;uses-feature&gt;&lt;/code&gt; element should not require this unsupported Chrome OS hardware feature. Any uses-feature not explicitly marked with &lt;code&gt;required=&quot;false&quot;&lt;/code&gt; is necessary on the device to be installed on. Ensure that any features that might prevent it from being installed on a Chrome OS device are reviewed and marked as not required in the manifest.&lt;br&gt;&lt;br&gt;Issue id: UnsupportedChromeOsHardware&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/topic/arc/manifest.html#incompat-entries&quot;&gt;https://developer.android.com/topic/arc/manifest.html#incompat-entries&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGridLayout" displayName="GridLayout validation" enabled="false">&lt;html&gt;&lt;body&gt;GridLayout validation&lt;br&gt;&lt;br&gt;Declaring a layout_row or layout_column that falls outside the declared size of a GridLayout&apos;s &lt;code&gt;rowCount&lt;/code&gt; or &lt;code&gt;columnCount&lt;/code&gt; is usually an unintentional error.&lt;br&gt;&lt;br&gt;Issue id: GridLayout&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUsesMinSdkAttributes" displayName="Minimum SDK and target SDK attributes not defined" enabled="false">&lt;html&gt;&lt;body&gt;Minimum SDK and target SDK attributes not defined&lt;br&gt;&lt;br&gt;The manifest should contain a &lt;code&gt;&amp;lt;uses-sdk&gt;&lt;/code&gt; element which defines the minimum API Level required for the application to run, as well as the target version (the highest API level you have tested the version for).&lt;br&gt;&lt;br&gt;Issue id: UsesMinSdkAttributes&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/manifest/uses-sdk-element.html&quot;&gt;http://developer.android.com/guide/topics/manifest/uses-sdk-element.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintNewApi" displayName="Calling new methods on older versions" enabled="false">&lt;html&gt;&lt;body&gt;Calling new methods on older versions&lt;br&gt;&lt;br&gt;This check scans through all the Android API calls in the application and warns about any calls that are not available on &lt;b&gt;all&lt;/b&gt; versions targeted by this application (according to its minimum SDK attribute in the manifest).&lt;br/&gt;
&lt;br/&gt;
If you really want to use this API and don&apos;t need to support older devices just set the &lt;code&gt;minSdkVersion&lt;/code&gt; in your &lt;code&gt;build.gradle&lt;/code&gt; or &lt;code&gt;AndroidManifest.xml&lt;/code&gt; files.&lt;br/&gt;
&lt;br/&gt;
If your code is &lt;b&gt;deliberately&lt;/b&gt; accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the &lt;code&gt;@TargetApi&lt;/code&gt; annotation specifying the local minimum SDK to apply, such as &lt;code&gt;@TargetApi(11)&lt;/code&gt;, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&lt;br/&gt;
&lt;br/&gt;
If you are deliberately setting &lt;code&gt;android:&lt;/code&gt; attributes in style definitions, make sure you place this in a &lt;code&gt;values-v&lt;/code&gt;&lt;i&gt;NN&lt;/i&gt; folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&lt;br/&gt;
&lt;br/&gt;
Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context.&lt;br&gt;&lt;br&gt;Issue id: NewApi&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUnlocalizedSms" displayName="SMS phone number missing country code" enabled="false">&lt;html&gt;&lt;body&gt;SMS phone number missing country code&lt;br&gt;&lt;br&gt;SMS destination numbers must start with a country code or the application code must ensure that the SMS is only sent when the user is in the same country as the receiver.&lt;br&gt;&lt;br&gt;Issue id: UnlocalizedSms&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAaptCrash" displayName="Potential AAPT crash" enabled="false">&lt;html&gt;&lt;body&gt;Potential AAPT crash&lt;br&gt;&lt;br&gt;Defining a style which sets &lt;code&gt;android:id&lt;/code&gt; to a dynamically generated id can cause many versions of &lt;code&gt;aapt&lt;/code&gt;, the resource packaging tool, to crash. To work around this, declare the id explicitly with &lt;code&gt;&amp;lt;item type=&quot;id&quot; name=&quot;...&quot; /&gt;&lt;/code&gt; instead.&lt;br&gt;&lt;br&gt;Issue id: AaptCrash&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInvalidResourceFolder" displayName="Invalid Resource Folder" enabled="false">&lt;html&gt;&lt;body&gt;Invalid Resource Folder&lt;br&gt;&lt;br&gt;This lint check looks for a folder name that is not a valid resource folder name; these will be ignored and not packaged by the Android Gradle build plugin.&lt;br/&gt;
&lt;br/&gt;
Note that the order of resources is very important; for example, you can&apos;t specify a language before a network code.&lt;br/&gt;
&lt;br/&gt;
Similarly, note that to use 3 letter region codes, you have to use a special BCP 47 syntax: the prefix b+ followed by the BCP 47 language tag but with &lt;code&gt;+&lt;/code&gt; as the individual separators instead of &lt;code&gt;-&lt;/code&gt;. Therefore, for the BCP 47 language tag &lt;code&gt;nl-ABW&lt;/code&gt; you have to use &lt;code&gt;b+nl+ABW&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: InvalidResourceFolder&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/resources/providing-resources.html&quot;&gt;http://developer.android.com/guide/topics/resources/providing-resources.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://tools.ietf.org/html/bcp47&quot;&gt;https://tools.ietf.org/html/bcp47&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintLibraryCustomView" displayName="Custom views in libraries should use res-auto-namespace" enabled="false">&lt;html&gt;&lt;body&gt;Custom views in libraries should use res-auto-namespace&lt;br&gt;&lt;br&gt;When using a custom view with custom attributes in a library project, the layout must use the special namespace &lt;a href=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;http://schemas.android.com/apk/res-auto&lt;/a&gt; instead of a URI which includes the library project&apos;s own package. This will be used to automatically adjust the namespace of the attributes when the library resources are merged into the application project.&lt;br&gt;&lt;br&gt;Issue id: LibraryCustomView&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingLeanbackLauncher" displayName="Missing Leanback Launcher Intent Filter." enabled="false">&lt;html&gt;&lt;body&gt;Missing Leanback Launcher Intent Filter.&lt;br&gt;&lt;br&gt;An application intended to run on TV devices must declare a launcher activity for TV in its manifest using a &lt;code&gt;android.intent.category.LEANBACK_LAUNCHER&lt;/code&gt; intent filter.&lt;br&gt;&lt;br&gt;Issue id: MissingLeanbackLauncher&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/tv/start/start.html#tv-activity&quot;&gt;https://developer.android.com/training/tv/start/start.html#tv-activity&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSupportAnnotationUsage" displayName="Incorrect support annotation usage" enabled="false">&lt;html&gt;&lt;body&gt;Incorrect support annotation usage&lt;br&gt;&lt;br&gt;This lint check makes sure that the support annotations (such as &lt;code&gt;@IntDef&lt;/code&gt; and &lt;code&gt;@ColorInt&lt;/code&gt;) are used correctly. For example, it&apos;s an error to specify an &lt;code&gt;@IntRange&lt;/code&gt; where the &lt;code&gt;from&lt;/code&gt; value is higher than the &lt;code&gt;to&lt;/code&gt; value.&lt;br&gt;&lt;br&gt;Issue id: SupportAnnotationUsage&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUniquePermission" displayName="Permission names are not unique" enabled="false">&lt;html&gt;&lt;body&gt;Permission names are not unique&lt;br&gt;&lt;br&gt;The unqualified names or your permissions must be unique. The reason for this is that at build time, the &lt;code&gt;aapt&lt;/code&gt; tool will generate a class named &lt;code&gt;Manifest&lt;/code&gt; which contains a field for each of your permissions. These fields are named using your permission unqualified names (i.e. the name portion after the last dot).&lt;br/&gt;
&lt;br/&gt;
If more than one permission maps to the same field name, that field will arbitrarily name just one of them.&lt;br&gt;&lt;br&gt;Issue id: UniquePermission&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGradleCompatible" displayName="Incompatible Gradle Versions" enabled="false">&lt;html&gt;&lt;body&gt;Incompatible Gradle Versions&lt;br&gt;&lt;br&gt;There are some combinations of libraries, or tools and libraries, that are incompatible, or can lead to bugs. One such incompatibility is compiling with a version of the Android support libraries that is not the latest version (or in particular, a version lower than your &lt;code&gt;targetSdkVersion&lt;/code&gt;).&lt;br&gt;&lt;br&gt;Issue id: GradleCompatible&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInlinedApi" displayName="Using inlined constants on older versions" enabled="false">&lt;html&gt;&lt;body&gt;Using inlined constants on older versions&lt;br&gt;&lt;br&gt;This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&lt;br/&gt;
&lt;br/&gt;
If you really want to use this API and don&apos;t need to support older devices just set the &lt;code&gt;minSdkVersion&lt;/code&gt; in your &lt;code&gt;build.gradle&lt;/code&gt; or &lt;code&gt;AndroidManifest.xml&lt;/code&gt; files.&lt;br/&gt;
If your code is &lt;b&gt;deliberately&lt;/b&gt; accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the &lt;code&gt;@TargetApi&lt;/code&gt; annotation specifying the local minimum SDK to apply, such as &lt;code&gt;@TargetApi(11)&lt;/code&gt;, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&lt;br&gt;&lt;br&gt;Issue id: InlinedApi&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintResAuto" displayName="Hardcoded Package in Namespace" enabled="false">&lt;html&gt;&lt;body&gt;Hardcoded Package in Namespace&lt;br&gt;&lt;br&gt;In Gradle projects, the actual package used in the final APK can vary; for example,you can add a &lt;code&gt;.debug&lt;/code&gt; package suffix in one version and not the other. Therefore, you should &lt;b&gt;not&lt;/b&gt; hardcode the application package in the resource; instead, use the special namespace &lt;code&gt;http://schemas.android.com/apk/res-auto&lt;/code&gt; which will cause the tools to figure out the right namespace for the resource regardless of the actual package used during the build.&lt;br&gt;&lt;br&gt;Issue id: ResAuto&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMergeMarker" displayName="Code contains merge marker" enabled="false">&lt;html&gt;&lt;body&gt;Code contains merge marker&lt;br&gt;&lt;br&gt;Many version control systems leave unmerged files with markers such as &amp;lt;&amp;lt;&amp;lt; in the source code. This check looks for these markers, which are sometimes accidentally left in, particularly in resource files where they don&apos;t break compilation.&lt;br&gt;&lt;br&gt;Issue id: MergeMarker&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDuplicateDefinition" displayName="Duplicate definitions of resources" enabled="false">&lt;html&gt;&lt;body&gt;Duplicate definitions of resources&lt;br&gt;&lt;br&gt;You can define a resource multiple times in different resource folders; that&apos;s how string translations are done, for example. However, defining the same resource more than once in the same resource folder is likely an error, for example attempting to add a new resource without realizing that the name is already used, and so on.&lt;br&gt;&lt;br&gt;Issue id: DuplicateDefinition&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInflateParams" displayName="Layout Inflation without a Parent" enabled="false">&lt;html&gt;&lt;body&gt;Layout Inflation without a Parent&lt;br&gt;&lt;br&gt;When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored.&lt;br&gt;&lt;br&gt;Issue id: InflateParams&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://www.doubleencore.com/2013/05/layout-inflation-as-intended&quot;&gt;http://www.doubleencore.com/2013/05/layout-inflation-as-intended&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGetLocales" displayName="Locale crash" enabled="false">&lt;html&gt;&lt;body&gt;Locale crash&lt;br&gt;&lt;br&gt;This check looks for usage of Lollipop-style locale folders (e.g. 3 letter language codes, or BCP 47 qualifiers) combined with an &lt;code&gt;AssetManager#getLocales()&lt;/code&gt; call. This leads to crashes&lt;br&gt;&lt;br&gt;Issue id: GetLocales&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingFirebaseInstanceTokenRefresh" displayName="Missing onRefreshToken callback" enabled="false">&lt;html&gt;&lt;body&gt;Missing Firebase Instance ID Token Refresh&lt;br&gt;&lt;br&gt;Apps that check the Firebase Instance ID should usually implement the FirebaseInstanceIdService#onTokenRefresh() callback in order to observe changes.&lt;br&gt;&lt;br&gt;Issue id: MissingFirebaseInstanceTokenRefresh&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://firebase.google.com/docs/cloud-messaging/android/client#monitor-token-generation&quot;&gt;https://firebase.google.com/docs/cloud-messaging/android/client#monitor-token-generation&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintExifInterface" displayName="Using android.media.ExifInterface" enabled="false">&lt;html&gt;&lt;body&gt;Using &lt;code&gt;android.media.ExifInterface&lt;/code&gt;&lt;br&gt;&lt;br&gt;The &lt;code&gt;android.media.ExifInterface&lt;/code&gt; implementation has some known security bugs in older versions of Android. There is a new implementation available of this library in the support library, which is preferable.&lt;br&gt;&lt;br&gt;Issue id: ExifInterface&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWrongCall" displayName="Using wrong draw/layout method" enabled="false">&lt;html&gt;&lt;body&gt;Using wrong draw/layout method&lt;br&gt;&lt;br&gt;Custom views typically need to call &lt;code&gt;measure()&lt;/code&gt; on their children, not &lt;code&gt;onMeasure&lt;/code&gt;. Ditto for onDraw, onLayout, etc.&lt;br&gt;&lt;br&gt;Issue id: WrongCall&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintProtectedPermissions" displayName="Using system app permission" enabled="false">&lt;html&gt;&lt;body&gt;Using system app permission&lt;br&gt;&lt;br&gt;Permissions with the protection level signature, privileged or signatureOrSystem are only granted to system apps. If an app is a regular non-system app, it will never be able to use these permissions.&lt;br&gt;&lt;br&gt;Issue id: ProtectedPermissions&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintFindViewByIdCast" displayName="Add Explicit Cast" enabled="false">&lt;html&gt;&lt;body&gt;Add Explicit Cast&lt;br&gt;&lt;br&gt;In Android O, the &lt;code&gt;findViewById&lt;/code&gt; signature switched to using generics, which means that most of the time you can leave out explicit casts and just assign the result of the &lt;code&gt;findViewById&lt;/code&gt; call to variables of specific view classes.&lt;br/&gt;
&lt;br/&gt;
However, due to language changes between Java 7 and 8, this change may cause code to not compile without explicit casts. This lint check looks for these scenarios and suggests casts to be added now such that the code will continue to compile if the language level is updated to 1.8.&lt;br&gt;&lt;br&gt;Issue id: FindViewByIdCast&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAppCompatResource" displayName="Menu namespace" enabled="false">&lt;html&gt;&lt;body&gt;Menu namespace&lt;br&gt;&lt;br&gt;When using the appcompat library, menu resources should refer to the &lt;code&gt;showAsAction&lt;/code&gt; (or &lt;code&gt;actionViewClass&lt;/code&gt;, or &lt;code&gt;actionProviderClass&lt;/code&gt;) in the &lt;code&gt;app:&lt;/code&gt; namespace, not the &lt;code&gt;android:&lt;/code&gt; namespace.&lt;br/&gt;
&lt;br/&gt;
Similarly, when &lt;b&gt;not&lt;/b&gt; using the appcompat library, you should be using the &lt;code&gt;android:showAsAction&lt;/code&gt; (or &lt;code&gt;actionViewClass&lt;/code&gt;, or &lt;code&gt;actionProviderClass&lt;/code&gt;) attribute.&lt;br&gt;&lt;br&gt;Issue id: AppCompatResource&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintCustomViewStyleable" displayName="Mismatched Styleable/Custom View Name" enabled="false">&lt;html&gt;&lt;body&gt;Mismatched Styleable/Custom View Name&lt;br&gt;&lt;br&gt;The convention for custom views is to use a &lt;code&gt;declare-styleable&lt;/code&gt; whose name matches the custom view class name. The IDE relies on this convention such that for example code completion can be offered for attributes in a custom view in layout XML resource files.&lt;br/&gt;
&lt;br/&gt;
(Similarly, layout parameter classes should use the suffix &lt;code&gt;_Layout&lt;/code&gt;.)&lt;br&gt;&lt;br&gt;Issue id: CustomViewStyleable&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWrongViewCast" displayName="Mismatched view type" enabled="false">&lt;html&gt;&lt;body&gt;Mismatched view type&lt;br&gt;&lt;br&gt;Keeps track of the view types associated with ids and if it finds a usage of the id in the Java code it ensures that it is treated as the same type.&lt;br&gt;&lt;br&gt;Issue id: WrongViewCast&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintStringFormatInvalid" displayName="Invalid format string" enabled="false">&lt;html&gt;&lt;body&gt;Invalid format string&lt;br&gt;&lt;br&gt;If a string contains a &apos;%&apos; character, then the string may be a formatting string which will be passed to &lt;code&gt;String.format&lt;/code&gt; from Java code to replace each &apos;%&apos; occurrence with specific values.&lt;br/&gt;
&lt;br/&gt;
This lint warning checks for two related problems:&lt;br/&gt;
(1) Formatting strings that are invalid, meaning that &lt;code&gt;String.format&lt;/code&gt; will throw exceptions at runtime when attempting to use the format string.&lt;br/&gt;
(2) Strings containing &apos;%&apos; that are not formatting strings getting passed to a &lt;code&gt;String.format&lt;/code&gt; call. In this case the &apos;%&apos; will need to be escaped as &apos;%%&apos;.&lt;br/&gt;
&lt;br/&gt;
NOTE: Not all Strings which look like formatting strings are intended for use by &lt;code&gt;String.format&lt;/code&gt;; for example, they may contain date formats intended for &lt;code&gt;android.text.format.Time#format()&lt;/code&gt;. Lint cannot always figure out that a String is a date format, so you may get false warnings in those scenarios. See the suppress help topic for information on how to suppress errors in that case.&lt;br&gt;&lt;br&gt;Issue id: StringFormatInvalid&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintVisibleForTests" displayName="Visible Only For Tests" enabled="false">&lt;html&gt;&lt;body&gt;Visible Only For Tests&lt;br&gt;&lt;br&gt;With the &lt;code&gt;@VisibleForTesting&lt;/code&gt; annotation you can specify an &lt;code&gt;otherwise=&lt;/code&gt; attribute which specifies the intended visibility if the method had not been made more widely visible for the tests.&lt;br/&gt;
&lt;br/&gt;
This check looks for accesses from production code (e.g. not tests) where the access would not have been allowed with the intended production visibility.&lt;br&gt;&lt;br&gt;Issue id: VisibleForTests&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintStateListReachable" displayName="Unreachable state in a &lt;selector&gt;" enabled="false">&lt;html&gt;&lt;body&gt;Unreachable state in a &lt;code&gt;&amp;lt;selector&gt;&lt;/code&gt;&lt;br&gt;&lt;br&gt;In a selector, only the last child in the state list should omit a state qualifier. If not, all subsequent items in the list will be ignored since the given item will match all.&lt;br&gt;&lt;br&gt;Issue id: StateListReachable&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUnusedQuantity" displayName="Unused quantity translations" enabled="false">&lt;html&gt;&lt;body&gt;Unused quantity translations&lt;br&gt;&lt;br&gt;Android defines a number of different quantity strings, such as &lt;code&gt;zero&lt;/code&gt;, &lt;code&gt;one&lt;/code&gt;, &lt;code&gt;few&lt;/code&gt; and &lt;code&gt;many&lt;/code&gt;. However, many languages do not distinguish grammatically between all these different quantities.&lt;br/&gt;
&lt;br/&gt;
This lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up).&lt;br/&gt;
&lt;br/&gt;
For example, in Chinese, only the &lt;code&gt;other&lt;/code&gt; quantity is used, so even if you provide translations for &lt;code&gt;zero&lt;/code&gt; and &lt;code&gt;one&lt;/code&gt;, these strings will &lt;b&gt;not&lt;/b&gt; be returned when &lt;code&gt;getQuantityString()&lt;/code&gt; is called, even with &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: UnusedQuantity&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/resources/string-resource.html#Plurals&quot;&gt;http://developer.android.com/guide/topics/resources/string-resource.html#Plurals&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWrongRegion" displayName="Suspicious Language/Region Combination" enabled="false">&lt;html&gt;&lt;body&gt;Suspicious Language/Region Combination&lt;br&gt;&lt;br&gt;Android uses the letter codes ISO 639-1 for languages, and the letter codes ISO 3166-1 for the region codes. In many cases, the language code and the country where the language is spoken is the same, but it is also often not the case. For example, while &apos;se&apos; refers to Sweden, where Swedish is spoken, the language code for Swedish is &lt;b&gt;not&lt;/b&gt; &lt;code&gt;se&lt;/code&gt; (which refers to the Northern Sami language), the language code is &lt;code&gt;sv&lt;/code&gt;. And similarly the region code for &lt;code&gt;sv&lt;/code&gt; is El Salvador.&lt;br/&gt;
&lt;br/&gt;
This lint check looks for suspicious language and region combinations, to help catch cases where you&apos;ve accidentally used the wrong language or region code. Lint knows about the most common regions where a language is spoken, and if a folder combination is not one of these, it is flagged as suspicious.&lt;br/&gt;
&lt;br/&gt;
Note however that it may not be an error: you can theoretically have speakers of any language in any region and want to target that with your resources, so this check is aimed at tracking down likely mistakes, not to enforce a specific set of region and language combinations.&lt;br&gt;&lt;br&gt;Issue id: WrongRegion&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGradlePluginVersion" displayName="Incompatible Android Gradle Plugin" enabled="false">&lt;html&gt;&lt;body&gt;Incompatible Android Gradle Plugin&lt;br&gt;&lt;br&gt;Not all versions of the Android Gradle plugin are compatible with all versions of the SDK. If you update your tools, or if you are trying to open a project that was built with an old version of the tools, you may need to update your plugin version number.&lt;br&gt;&lt;br&gt;Issue id: GradlePluginVersion&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintOverride" displayName="Method conflicts with new inherited method" enabled="false">&lt;html&gt;&lt;body&gt;Method conflicts with new inherited method&lt;br&gt;&lt;br&gt;Suppose you are building against Android API 8, and you&apos;ve subclassed Activity. In your subclass you add a new method called &lt;code&gt;isDestroyed&lt;/code&gt;(). At some later point, a method of the same name and signature is added to Android. Your method will now override the Android method, and possibly break its contract. Your method is not calling &lt;code&gt;super.isDestroyed()&lt;/code&gt;, since your compilation target doesn&apos;t know about the method.&lt;br/&gt;
&lt;br/&gt;
The above scenario is what this lint detector looks for. The above example is real, since &lt;code&gt;isDestroyed()&lt;/code&gt; was added in API 17, but it will be true for &lt;b&gt;any&lt;/b&gt; method you have added to a subclass of an Android class where your build target is lower than the version the method was introduced in.&lt;br/&gt;
&lt;br/&gt;
To fix this, either rename your method, or if you are really trying to augment the builtin method if available, switch to a higher build target where you can deliberately add &lt;code&gt;@Override&lt;/code&gt; on your overriding method, and call &lt;code&gt;super&lt;/code&gt; if appropriate etc.&lt;br&gt;&lt;br&gt;Issue id: Override&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintRegistered" displayName="Class is not registered in the manifest" enabled="false">&lt;html&gt;&lt;body&gt;Class is not registered in the manifest&lt;br&gt;&lt;br&gt;Activities, services and content providers should be registered in the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file using &lt;code&gt;&amp;lt;activity&gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;service&gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;provider&gt;&lt;/code&gt; tags.&lt;br/&gt;
&lt;br/&gt;
If your activity is simply a parent class intended to be subclassed by other &quot;real&quot; activities, make it an abstract class.&lt;br&gt;&lt;br&gt;Issue id: Registered&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/manifest/manifest-intro.html&quot;&gt;http://developer.android.com/guide/topics/manifest/manifest-intro.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintNotInterpolated" displayName="Incorrect Interpolation" enabled="false">&lt;html&gt;&lt;body&gt;Incorrect Interpolation&lt;br&gt;&lt;br&gt;To insert the value of a variable, you can use &lt;code&gt;${variable}&lt;/code&gt; inside a string literal, but &lt;b&gt;only&lt;/b&gt; if you are using double quotes!&lt;br&gt;&lt;br&gt;Issue id: NotInterpolated&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://www.groovy-lang.org/syntax.html#_string_interpolation&quot;&gt;http://www.groovy-lang.org/syntax.html#_string_interpolation&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintStringShouldBeInt" displayName="String should be int" enabled="false">&lt;html&gt;&lt;body&gt;String should be int&lt;br&gt;&lt;br&gt;The properties &lt;code&gt;compileSdkVersion&lt;/code&gt;, &lt;code&gt;minSdkVersion&lt;/code&gt; and &lt;code&gt;targetSdkVersion&lt;/code&gt; are usually numbers, but can be strings when you are using an add-on (in the case of &lt;code&gt;compileSdkVersion&lt;/code&gt;) or a preview platform (for the other two properties).&lt;br/&gt;
&lt;br/&gt;
However, you can not use a number as a string (e.g. &quot;19&quot; instead of 19); that will result in a platform not found error message at build/sync time.&lt;br&gt;&lt;br&gt;Issue id: StringShouldBeInt&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintScrollViewSize" displayName="ScrollView size validation" enabled="false">&lt;html&gt;&lt;body&gt;ScrollView size validation&lt;br&gt;&lt;br&gt;ScrollView children must set their &lt;code&gt;layout_width&lt;/code&gt; or &lt;code&gt;layout_height&lt;/code&gt; attributes to &lt;code&gt;wrap_content&lt;/code&gt; rather than &lt;code&gt;fill_parent&lt;/code&gt; or &lt;code&gt;match_parent&lt;/code&gt; in the scrolling dimension&lt;br&gt;&lt;br&gt;Issue id: ScrollViewSize&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMockLocation" displayName="Using mock location provider in production" enabled="false">&lt;html&gt;&lt;body&gt;Using mock location provider in production&lt;br&gt;&lt;br&gt;Using a mock location provider (by requiring the permission &lt;code&gt;android.permission.ACCESS_MOCK_LOCATION&lt;/code&gt;) should &lt;b&gt;only&lt;/b&gt; be done in debug builds (or from tests). In Gradle projects, that means you should only request this permission in a test or debug source set specific manifest file.&lt;br/&gt;
&lt;br/&gt;
To fix this, create a new manifest file in the debug folder and move the &lt;code&gt;&amp;lt;uses-permission&gt;&lt;/code&gt; element there. A typical path to a debug manifest override file in a Gradle project is src/debug/AndroidManifest.xml.&lt;br&gt;&lt;br&gt;Issue id: MockLocation&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWebViewLayout" displayName="WebViews in wrap_content parents" enabled="false">&lt;html&gt;&lt;body&gt;WebViews in wrap_content parents&lt;br&gt;&lt;br&gt;The WebView implementation has certain performance optimizations which will not work correctly if the parent view is using &lt;code&gt;wrap_content&lt;/code&gt; rather than &lt;code&gt;match_parent&lt;/code&gt;. This can lead to subtle UI bugs.&lt;br&gt;&lt;br&gt;Issue id: WebViewLayout&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWifiManagerLeak" displayName="WifiManager Leak" enabled="false">&lt;html&gt;&lt;body&gt;WifiManager Leak&lt;br&gt;&lt;br&gt;On versions prior to Android N (24), initializing the &lt;code&gt;WifiManager&lt;/code&gt; via &lt;code&gt;Context#getSystemService&lt;/code&gt; can cause a memory leak if the context is not the application context. Change &lt;code&gt;context.getSystemService(...)&lt;/code&gt; to &lt;code&gt;context.getApplicationContext().getSystemService(...)&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: WifiManagerLeak&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintStringFormatMatches" displayName="String.format string doesn&apos;t match the XML format string" enabled="false">&lt;html&gt;&lt;body&gt;&lt;code&gt;String.format&lt;/code&gt; string doesn&apos;t match the XML format string&lt;br&gt;&lt;br&gt;This lint check ensures the following:&lt;br/&gt;
(1) If there are multiple translations of the format string, then all translations use the same type for the same numbered arguments&lt;br/&gt;
(2) The usage of the format string in Java is consistent with the format string, meaning that the parameter types passed to String.format matches those in the format string.&lt;br&gt;&lt;br&gt;Issue id: StringFormatMatches&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDuplicatePlatformClasses" displayName="Duplicate Platform Classes" enabled="false">&lt;html&gt;&lt;body&gt;Duplicate Platform Classes&lt;br&gt;&lt;br&gt;There are a number of libraries that duplicate not just functionality of the Android platform but using the exact same class names as the ones provided in Android -- for example the apache http classes. This can lead to unexpected crashes.&lt;br/&gt;
&lt;br/&gt;
To solve this, you need to either find a newer version of the library which no longer has this problem, or to repackage the library (and all of its dependencies) using something like the &lt;code&gt;jarjar&lt;/code&gt; tool, or finally, rewriting the code to use different APIs (for example, for http code, consider using &lt;code&gt;HttpUrlConnection&lt;/code&gt; or a library like &lt;code&gt;okhttp&lt;/code&gt;).&lt;br&gt;&lt;br&gt;Issue id: DuplicatePlatformClasses&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMinSdkTooLow" displayName="Minimum SDK Version Too Low" enabled="false">&lt;html&gt;&lt;body&gt;API Version Too Low&lt;br&gt;&lt;br&gt;The value of the &lt;code&gt;minSdkVersion&lt;/code&gt; property is too low and can be incremented without noticeably reducing the number of supported devices.&lt;br&gt;&lt;br&gt;Issue id: MinSdkTooLow&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWrongCase" displayName="Wrong case for view tag" enabled="false">&lt;html&gt;&lt;body&gt;Wrong case for view tag&lt;br&gt;&lt;br&gt;Most layout tags, such as &amp;lt;Button&gt;, refer to actual view classes and are therefore capitalized. However, there are exceptions such as &amp;lt;fragment&gt; and &amp;lt;include&gt;. This lint check looks for incorrect capitalizations.&lt;br&gt;&lt;br&gt;Issue id: WrongCase&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/components/fragments.html&quot;&gt;http://developer.android.com/guide/components/fragments.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGradleOverrides" displayName="Value overridden by Gradle build script" enabled="false">&lt;html&gt;&lt;body&gt;Value overridden by Gradle build script&lt;br&gt;&lt;br&gt;The value of (for example) &lt;code&gt;minSdkVersion&lt;/code&gt; is only used if it is not specified in the &lt;code&gt;build.gradle&lt;/code&gt; build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity.&lt;br&gt;&lt;br&gt;Issue id: GradleOverrides&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintRecyclerView" displayName="RecyclerView Problems" enabled="false">&lt;html&gt;&lt;body&gt;RecyclerView Problems&lt;br&gt;&lt;br&gt;&lt;code&gt;RecyclerView&lt;/code&gt; will &lt;b&gt;not&lt;/b&gt; call &lt;code&gt;onBindViewHolder&lt;/code&gt; again when the position of the item changes in the data set unless the item itself is invalidated or the new position cannot be determined.&lt;br/&gt;
&lt;br/&gt;
For this reason, you should &lt;b&gt;only&lt;/b&gt; use the position parameter while acquiring the related data item inside this method, and should &lt;b&gt;not&lt;/b&gt; keep a copy of it.&lt;br/&gt;
&lt;br/&gt;
If you need the position of an item later on (e.g. in a click listener), use &lt;code&gt;getAdapterPosition()&lt;/code&gt; which will have the updated adapter position.&lt;br&gt;&lt;br&gt;Issue id: RecyclerView&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintTextViewEdits" displayName="TextView should probably be an EditText instead" enabled="false">&lt;html&gt;&lt;body&gt;TextView should probably be an EditText instead&lt;br&gt;&lt;br&gt;Using a &lt;code&gt;&amp;lt;TextView&gt;&lt;/code&gt; to input text is generally an error, you should be using &lt;code&gt;&amp;lt;EditText&gt;&lt;/code&gt; instead.  &lt;code&gt;EditText&lt;/code&gt; is a subclass of &lt;code&gt;TextView&lt;/code&gt;, and some of the editing support is provided by &lt;code&gt;TextView&lt;/code&gt;, so it&apos;s possible to set some input-related properties on a &lt;code&gt;TextView&lt;/code&gt;. However, using a &lt;code&gt;TextView&lt;/code&gt; along with input attributes is usually a cut &amp;amp; paste error. To input text you should be using &lt;code&gt;&amp;lt;EditText&gt;&lt;/code&gt;.&lt;br/&gt;
&lt;br/&gt;
This check also checks subclasses of &lt;code&gt;TextView&lt;/code&gt;, such as &lt;code&gt;Button&lt;/code&gt; and &lt;code&gt;CheckBox&lt;/code&gt;, since these have the same issue: they should not be used with editable attributes.&lt;br&gt;&lt;br&gt;Issue id: TextViewEdits&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInvalidWearFeatureAttribute" displayName="Invalid attribute for Wear uses-feature" enabled="false">&lt;html&gt;&lt;body&gt;Invalid attribute for Wear uses-feature&lt;br&gt;&lt;br&gt;For the &lt;code&gt;android.hardware.type.watch&lt;/code&gt; uses-feature, android:required=&quot;false&quot; is disallowed. A single APK for Wear and non-Wear devices is not supported.&lt;br&gt;&lt;br&gt;Issue id: InvalidWearFeatureAttribute&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/wearables/apps/packaging.html&quot;&gt;https://developer.android.com/training/wearables/apps/packaging.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintPermissionImpliesUnsupportedHardware" displayName="Permission Implies Unsupported Hardware" enabled="false">&lt;html&gt;&lt;body&gt;Permission Implies Unsupported Hardware&lt;br&gt;&lt;br&gt;The &amp;lt;uses-permission&gt; element should not require a permission that implies an unsupported TV hardware feature. Google Play assumes that certain hardware related permissions indicate that the underlying hardware features are required by default. To fix the issue, consider declaring the corresponding uses-feature element with required=&quot;false&quot; attribute.&lt;br&gt;&lt;br&gt;Issue id: PermissionImpliesUnsupportedHardware&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/manifest/uses-feature-element.html#permissions&quot;&gt;http://developer.android.com/guide/topics/manifest/uses-feature-element.html#permissions&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintPinSetExpiry" displayName="Validate &lt;pin-set&gt; expiration attribute" enabled="false">&lt;html&gt;&lt;body&gt;Validate &lt;code&gt;&amp;lt;pin-set&gt;&lt;/code&gt; expiration attribute&lt;br&gt;&lt;br&gt;Ensures that the &lt;code&gt;expiration&lt;/code&gt; attribute of the &lt;code&gt;&amp;lt;pin-set&gt;&lt;/code&gt; element is valid and has not already expired or is expiring soon&lt;br&gt;&lt;br&gt;Issue id: PinSetExpiry&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/preview/features/security-config.html&quot;&gt;https://developer.android.com/preview/features/security-config.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintTranslucentOrientation" displayName="Mixing screenOrientation and translucency" enabled="false">&lt;html&gt;&lt;body&gt;Mixing screenOrientation and translucency&lt;br&gt;&lt;br&gt;Specifying a fixed screen orientation with a translucent theme isn&apos;t supported on apps with targetSdkVersion O or greater since there can be an another activity visible behind your activity with a conflicting request.&lt;br/&gt;
&lt;br/&gt;
For example, your activity requests landscape and the visible activity behind your translucent activity request portrait. In this case the system can only honor one of the requests and currently prefers to honor the request from non-translucent activities since there is nothing visible behind them.&lt;br/&gt;
&lt;br/&gt;
Devices running platform version O or greater will throw an exception in your app if this state is detected.&lt;br&gt;&lt;br&gt;Issue id: TranslucentOrientation&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInOrMmUsage" displayName="Using mm or in dimensions" enabled="false">&lt;html&gt;&lt;body&gt;Using &lt;code&gt;mm&lt;/code&gt; or &lt;code&gt;in&lt;/code&gt; dimensions&lt;br&gt;&lt;br&gt;Avoid using &lt;code&gt;mm&lt;/code&gt; (millimeters) or &lt;code&gt;in&lt;/code&gt; (inches) as the unit for dimensions.&lt;br/&gt;
&lt;br/&gt;
While it should work in principle, unfortunately many devices do not report the correct true physical density, which means that the dimension calculations won&apos;t work correctly. You are better off using &lt;code&gt;dp&lt;/code&gt; (and for font sizes, &lt;code&gt;sp&lt;/code&gt;).&lt;br&gt;&lt;br&gt;Issue id: InOrMmUsage&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWrongThread" displayName="Wrong Thread" enabled="false">&lt;html&gt;&lt;body&gt;Wrong Thread&lt;br&gt;&lt;br&gt;Ensures that a method which expects to be called on a specific thread, is actually called from that thread. For example, calls on methods in widgets should always be made on the UI thread.&lt;br&gt;&lt;br&gt;Issue id: WrongThread&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/components/processes-and-threads.html#Threads&quot;&gt;http://developer.android.com/guide/components/processes-and-threads.html#Threads&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintTypos" displayName="Spelling error" enabled="false">&lt;html&gt;&lt;body&gt;Spelling error&lt;br&gt;&lt;br&gt;This check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged.&lt;br&gt;&lt;br&gt;Issue id: Typos&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSuspiciousImport" displayName="&apos;import android.R&apos; statement" enabled="false">&lt;html&gt;&lt;body&gt;&apos;&lt;code&gt;import android.R&lt;/code&gt;&apos; statement&lt;br&gt;&lt;br&gt;Importing &lt;code&gt;android.R&lt;/code&gt; is usually not intentional; it sometimes happens when you use an IDE and ask it to automatically add imports at a time when your project&apos;s R class it not present.&lt;br/&gt;
&lt;br/&gt;
Once the import is there you might get a lot of &quot;confusing&quot; error messages because of course the fields available on &lt;code&gt;android.R&lt;/code&gt; are not the ones you&apos;d expect from just looking at your own &lt;code&gt;R&lt;/code&gt; class.&lt;br&gt;&lt;br&gt;Issue id: SuspiciousImport&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintPluralsCandidate" displayName="Potential Plurals" enabled="false">&lt;html&gt;&lt;body&gt;Potential Plurals&lt;br&gt;&lt;br&gt;This lint check looks for potential errors in internationalization where you have translated a message which involves a quantity and it looks like other parts of the string may need grammatical changes.&lt;br/&gt;
&lt;br/&gt;
For example, rather than something like this:&lt;br/&gt;
  &amp;lt;string name=&quot;try_again&quot;&gt;Try again in %d seconds.&amp;lt;/string&gt;&lt;br/&gt;
you should be using a plural:&lt;br/&gt;
   &amp;lt;plurals name=&quot;try_again&quot;&gt;&lt;br/&gt;
        &amp;lt;item quantity=&quot;one&quot;&gt;Try again in %d second&amp;lt;/item&gt;&lt;br/&gt;
        &amp;lt;item quantity=&quot;other&quot;&gt;Try again in %d seconds&amp;lt;/item&gt;&lt;br/&gt;
    &amp;lt;/plurals&gt;&lt;br/&gt;
This will ensure that in other languages the right set of translations are provided for the different quantity classes.&lt;br/&gt;
&lt;br/&gt;
(This check depends on some heuristics, so it may not accurately determine whether a string really should be a quantity. You can use tools:ignore to filter out false positives.&lt;br&gt;&lt;br&gt;Issue id: PluralsCandidate&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/resources/string-resource.html#Plurals&quot;&gt;http://developer.android.com/guide/topics/resources/string-resource.html#Plurals&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintParcelClassLoader" displayName="Default Parcel Class Loader" enabled="false">&lt;html&gt;&lt;body&gt;Default Parcel Class Loader&lt;br&gt;&lt;br&gt;The documentation for &lt;code&gt;Parcel#readParcelable(ClassLoader)&lt;/code&gt; (and its variations) says that you can pass in &lt;code&gt;null&lt;/code&gt; to pick up the default class loader. However, that ClassLoader is a system class loader and is not able to find classes in your own application.&lt;br/&gt;
&lt;br/&gt;
If you are writing your own classes into the &lt;code&gt;Parcel&lt;/code&gt; (not just SDK classes like &lt;code&gt;String&lt;/code&gt; and so on), then you should supply a &lt;code&gt;ClassLoader&lt;/code&gt; for your application instead; a simple way to obtain one is to just call &lt;code&gt;getClass().getClassLoader()&lt;/code&gt; from your own class.&lt;br&gt;&lt;br&gt;Issue id: ParcelClassLoader&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/reference/android/os/Parcel.html&quot;&gt;http://developer.android.com/reference/android/os/Parcel.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintVectorRaster" displayName="Vector Image Generation" enabled="false">&lt;html&gt;&lt;body&gt;Vector Image Generation&lt;br&gt;&lt;br&gt;Vector icons require API 21 or API 24 depending on used features, but when &lt;code&gt;minSdkVersion&lt;/code&gt; is less than 21 or 24 and Android Gradle plugin 1.4 or higher is used, a vector drawable placed in the &lt;code&gt;drawable&lt;/code&gt; folder is automatically moved to &lt;code&gt;drawable-anydpi-v21&lt;/code&gt; or &lt;code&gt;drawable-anydpi-v24&lt;/code&gt; and bitmap images are generated for different screen resolutions for backwards compatibility.&lt;br/&gt;
&lt;br/&gt;
However, there are some limitations to this raster image generation, and this lint check flags elements and attributes that are not fully supported. You should manually check whether the generated output is acceptable for those older devices.&lt;br&gt;&lt;br&gt;Issue id: VectorRaster&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintRange" displayName="Outside Range" enabled="false">&lt;html&gt;&lt;body&gt;Outside Range&lt;br&gt;&lt;br&gt;Some parameters are required to in a particular numerical range; this check makes sure that arguments passed fall within the range. For arrays, Strings and collections this refers to the size or length.&lt;br&gt;&lt;br&gt;Issue id: Range&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintApplySharedPref" displayName="Use apply() on SharedPreferences" enabled="false">&lt;html&gt;&lt;body&gt;Use &lt;code&gt;apply()&lt;/code&gt; on &lt;code&gt;SharedPreferences&lt;/code&gt;&lt;br&gt;&lt;br&gt;Consider using &lt;code&gt;apply()&lt;/code&gt; instead of &lt;code&gt;commit&lt;/code&gt; on shared preferences. Whereas &lt;code&gt;commit&lt;/code&gt; blocks and writes its data to persistent storage immediately, &lt;code&gt;apply&lt;/code&gt; will handle it in the background.&lt;br&gt;&lt;br&gt;Issue id: ApplySharedPref&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintProguardSplit" displayName="Proguard.cfg file contains generic Android rules" enabled="false">&lt;html&gt;&lt;body&gt;Proguard.cfg file contains generic Android rules&lt;br&gt;&lt;br&gt;Earlier versions of the Android tools bundled a single &lt;code&gt;proguard.cfg&lt;/code&gt; file containing a ProGuard configuration file suitable for Android shrinking and obfuscation. However, that version was copied into new projects, which means that it does not continue to get updated as we improve the default ProGuard rules for Android.&lt;br/&gt;
&lt;br/&gt;
In the new version of the tools, we have split the ProGuard configuration into two halves:&lt;br/&gt;
* A simple configuration file containing only project-specific flags, in your project&lt;br/&gt;
* A generic configuration file containing the recommended set of ProGuard options for Android projects. This generic file lives in the SDK install directory which means that it gets updated along with the tools.&lt;br/&gt;
&lt;br/&gt;
In order for this to work, the proguard.config property in the &lt;code&gt;project.properties&lt;/code&gt; file now refers to a path, so you can reference both the generic file as well as your own (and any additional files too).&lt;br/&gt;
&lt;br/&gt;
To migrate your project to the new setup, create a new &lt;code&gt;proguard-project.txt&lt;/code&gt; file in your project containing any project specific ProGuard flags as well as any customizations you have made, then update your project.properties file to contain:&lt;br/&gt;
&lt;code&gt;proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt&lt;/code&gt;&lt;br&gt;&lt;br&gt;Issue id: ProguardSplit&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintNewerVersionAvailable" displayName="Newer Library Versions Available" enabled="false">&lt;html&gt;&lt;body&gt;Newer Library Versions Available&lt;br&gt;&lt;br&gt;This detector checks with a central repository to see if there are newer versions available for the dependencies used by this project. This is similar to the &lt;code&gt;GradleDependency&lt;/code&gt; check, which checks for newer versions available in the Android SDK tools and libraries, but this works with any MavenCentral dependency, and connects to the library every time, which makes it more flexible but also &lt;b&gt;much&lt;/b&gt; slower.&lt;br&gt;&lt;br&gt;Issue id: NewerVersionAvailable&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintOnClick" displayName="onClick method does not exist" enabled="false">&lt;html&gt;&lt;body&gt;&lt;code&gt;onClick&lt;/code&gt; method does not exist&lt;br&gt;&lt;br&gt;The &lt;code&gt;onClick&lt;/code&gt; attribute value should be the name of a method in this View&apos;s context to invoke when the view is clicked. This name must correspond to a public method that takes exactly one parameter of type &lt;code&gt;View&lt;/code&gt;.&lt;br/&gt;
&lt;br/&gt;
Must be a string value, using &apos;\;&apos; to escape characters such as &apos;\n&apos; or &apos;\uxxxx&apos; for a unicode character.&lt;br&gt;&lt;br&gt;Issue id: OnClick&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDuplicateIds" displayName="Duplicate ids within a single layout" enabled="false">&lt;html&gt;&lt;body&gt;Duplicate ids within a single layout&lt;br&gt;&lt;br&gt;Within a layout, id&apos;s should be unique since otherwise &lt;code&gt;findViewById()&lt;/code&gt; can return an unexpected view.&lt;br&gt;&lt;br&gt;Issue id: DuplicateIds&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUnknownIdInLayout" displayName="Reference to an id that is not in the current layout" enabled="false">&lt;html&gt;&lt;body&gt;Reference to an id that is not in the current layout&lt;br&gt;&lt;br&gt;The &lt;code&gt;@+id/&lt;/code&gt; syntax refers to an existing id, or creates a new one if it has not already been defined elsewhere. However, this means that if you have a typo in your reference, or if the referred view no longer exists, you do not get a warning since the id will be created on demand.&lt;br/&gt;
&lt;br/&gt;
This is sometimes intentional, for example where you are referring to a view which is provided in a different layout via an include. However, it is usually an accident where you have a typo or you have renamed a view without updating all the references to it.&lt;br&gt;&lt;br&gt;Issue id: UnknownIdInLayout&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAppIndexingService" displayName="App Indexing Background Services" enabled="false">&lt;html&gt;&lt;body&gt;App Indexing Background Services&lt;br&gt;&lt;br&gt;Apps targeting Android 8.0 or higher can no longer rely on background services while listening for updates to the on-device index. Use a &lt;code&gt;BroadcastReceiver&lt;/code&gt; for the &lt;code&gt;UPDATE_INDEX&lt;/code&gt; intent to continue supporting indexing in your app.&lt;br&gt;&lt;br&gt;Issue id: AppIndexingService&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://firebase.google.com/docs/app-indexing/android/personal-content#add-a-broadcast-receiver-to-your-app&quot;&gt;https://firebase.google.com/docs/app-indexing/android/personal-content#add-a-broadcast-receiver-to-your-app&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintImpliedQuantity" displayName="Implied Quantities" enabled="false">&lt;html&gt;&lt;body&gt;Implied Quantities&lt;br&gt;&lt;br&gt;Plural strings should generally include a &lt;code&gt;%s&lt;/code&gt; or &lt;code&gt;%d&lt;/code&gt; formatting argument. In locales like English, the &lt;code&gt;one&lt;/code&gt; quantity only applies to a single value, 1, but that&apos;s not true everywhere. For example, in Slovene, the &lt;code&gt;one&lt;/code&gt; quantity will apply to 1, 101, 201, 301, and so on. Similarly, there are locales where multiple values match the &lt;code&gt;zero&lt;/code&gt; and &lt;code&gt;two&lt;/code&gt; quantities.&lt;br/&gt;
&lt;br/&gt;
In these locales, it is usually an error to have a message which does not include a formatting argument (such as &apos;%d&apos;), since it will not be clear from the grammar what quantity the quantity string is describing.&lt;br&gt;&lt;br&gt;Issue id: ImpliedQuantity&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/resources/string-resource.html#Plurals&quot;&gt;http://developer.android.com/guide/topics/resources/string-resource.html#Plurals&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUnusedAttribute" displayName="Attribute unused on older versions" enabled="false">&lt;html&gt;&lt;body&gt;Attribute unused on older versions&lt;br&gt;&lt;br&gt;This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the &lt;code&gt;minSdkVersion&lt;/code&gt; attribute).&lt;br/&gt;
&lt;br/&gt;
This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance or functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.&lt;br/&gt;
&lt;br/&gt;
Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new &lt;code&gt;&amp;lt;tag&gt;&lt;/code&gt; element in layouts introduced in API 21.&lt;br&gt;&lt;br&gt;Issue id: UnusedAttribute&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSpUsage" displayName="Using dp instead of sp for text sizes" enabled="false">&lt;html&gt;&lt;body&gt;Using &lt;code&gt;dp&lt;/code&gt; instead of &lt;code&gt;sp&lt;/code&gt; for text sizes&lt;br&gt;&lt;br&gt;When setting text sizes, you should normally use &lt;code&gt;sp&lt;/code&gt;, or &quot;scale-independent pixels&quot;. This is like the &lt;code&gt;dp&lt;/code&gt; unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.&lt;br/&gt;
&lt;br/&gt;
There &lt;b&gt;are&lt;/b&gt; cases where you might need to use &lt;code&gt;dp&lt;/code&gt;; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible.&lt;br&gt;&lt;br&gt;Issue id: SpUsage&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/training/multiscreen/screendensities.html&quot;&gt;http://developer.android.com/training/multiscreen/screendensities.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSwitchIntDef" displayName="Missing @IntDef in Switch" enabled="false">&lt;html&gt;&lt;body&gt;Missing @IntDef in Switch&lt;br&gt;&lt;br&gt;This check warns if a &lt;code&gt;switch&lt;/code&gt; statement does not explicitly include all the values declared by the typedef &lt;code&gt;@IntDef&lt;/code&gt; declaration.&lt;br&gt;&lt;br&gt;Issue id: SwitchIntDef&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIntentReset" displayName="Suspicious mix of setType and setData" enabled="false">&lt;html&gt;&lt;body&gt;Suspicious mix of &lt;code&gt;setType&lt;/code&gt; and &lt;code&gt;setData&lt;/code&gt;&lt;br&gt;&lt;br&gt;Intent provides the following APIs: &lt;code&gt;setData(Uri)&lt;/code&gt; and &lt;code&gt;setType(String)&lt;/code&gt;. Unfortunately, setting one clears the other. If you want to set both, you should call &lt;code&gt;setDataAndType(Uri, String)&lt;/code&gt; instead.&lt;br&gt;&lt;br&gt;Issue id: IntentReset&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIncludeLayoutParam" displayName="Ignored layout params on include" enabled="false">&lt;html&gt;&lt;body&gt;Ignored layout params on include&lt;br&gt;&lt;br&gt;Layout parameters specified on an &lt;code&gt;&amp;lt;include&gt;&lt;/code&gt; tag will only be used if you also override &lt;code&gt;layout_width&lt;/code&gt; and &lt;code&gt;layout_height&lt;/code&gt; on the &lt;code&gt;&amp;lt;include&gt;&lt;/code&gt; tag; otherwise they will be ignored.&lt;br&gt;&lt;br&gt;Issue id: IncludeLayoutParam&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2631614/does-android-xml-layouts-include-tag-really-work&quot;&gt;http://stackoverflow.com/questions/2631614/does-android-xml-layouts-include-tag-really-work&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAppCompatMethod" displayName="Using Wrong AppCompat Method" enabled="false">&lt;html&gt;&lt;body&gt;Using Wrong AppCompat Method&lt;br&gt;&lt;br&gt;When using the appcompat library, there are some methods you should be calling instead of the normal ones; for example, &lt;code&gt;getSupportActionBar()&lt;/code&gt; instead of &lt;code&gt;getActionBar()&lt;/code&gt;. This lint check looks for calls to the wrong method.&lt;br&gt;&lt;br&gt;Issue id: AppCompatMethod&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/tools/support-library/index.html&quot;&gt;http://developer.android.com/tools/support-library/index.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWifiManagerPotentialLeak" displayName="WifiManager Leak" enabled="false">&lt;html&gt;&lt;body&gt;WifiManager Potential Leak&lt;br&gt;&lt;br&gt;On versions prior to Android N (24), initializing the &lt;code&gt;WifiManager&lt;/code&gt; via &lt;code&gt;Context#getSystemService&lt;/code&gt; can cause a memory leak if the context is not the application context.&lt;br/&gt;
&lt;br/&gt;
In many cases, it&apos;s not obvious from the code where the &lt;code&gt;Context&lt;/code&gt; is coming from (e.g. it might be a parameter to a method, or a field initialized from various method calls). It&apos;s possible that the context being passed in is the application context, but to be on the safe side, you should consider changing &lt;code&gt;context.getSystemService(...)&lt;/code&gt; to &lt;code&gt;context.getApplicationContext().getSystemService(...)&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: WifiManagerPotentialLeak&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintOldTargetApi" displayName="Target SDK attribute is not targeting latest version" enabled="false">&lt;html&gt;&lt;body&gt;Target SDK attribute is not targeting latest version&lt;br&gt;&lt;br&gt;When your application runs on a version of Android that is more recent than your &lt;code&gt;targetSdkVersion&lt;/code&gt; specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the &lt;code&gt;targetSdkVersion&lt;/code&gt; is less than 14, your app may get an option button in the UI.&lt;br/&gt;
&lt;br/&gt;
To fix this issue, set the &lt;code&gt;targetSdkVersion&lt;/code&gt; to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: &lt;a href=&quot;http://developer.android.com/reference/android/os/Build.VERSION_CODES.html&quot;&gt;http://developer.android.com/reference/android/os/Build.VERSION_CODES.html&lt;/a&gt; as well as follow this guide:&lt;br/&gt;
&lt;a href=&quot;https://developer.android.com/distribute/best-practices/develop/target-sdk.html&quot;&gt;https://developer.android.com/distribute/best-practices/develop/target-sdk.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;Issue id: OldTargetApi&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintNotificationIconCompatibility" displayName="Raster image is required for notification icon" enabled="false">&lt;html&gt;&lt;body&gt;Raster image is required for notification icon to support Android versions below 5.0 (API 21)&lt;br&gt;&lt;br&gt;Notification icons should define a raster image to support Android versions below 5.0 (API 21). Note that the way Lint decides whether an icon is a notification icon is based on the filename prefix &lt;code&gt;ic_stat_&lt;/code&gt;. This corresponds to the naming convention documented in &lt;a href=&quot;http://developer.android.com/guide/practices/ui_guidelines/icon_design.html&quot;&gt;http://developer.android.com/guide/practices/ui_guidelines/icon_design.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;Issue id: NotificationIconCompatibility&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGradlePath" displayName="Gradle Path Issues" enabled="false">&lt;html&gt;&lt;body&gt;Gradle Path Issues&lt;br&gt;&lt;br&gt;Gradle build scripts are meant to be cross platform, so file paths use Unix-style path separators (a forward slash) rather than Windows path separators (a backslash). Similarly, to keep projects portable and repeatable, avoid using absolute paths on the system; keep files within the project instead. To share code between projects, consider creating an android-library and an AAR dependency&lt;br&gt;&lt;br&gt;Issue id: GradlePath&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAssert" displayName="Assertions" enabled="false">&lt;html&gt;&lt;body&gt;Assertions&lt;br&gt;&lt;br&gt;Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (&lt;code&gt;adb shell setprop debug.assert 1&lt;/code&gt;), but note that this is not implemented in ART (the newer runtime), and even in Dalvik the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside &lt;code&gt;if (BuildConfig.DEBUG) { }&lt;/code&gt; blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.&lt;br/&gt;
&lt;br/&gt;
For example, you can replace &lt;code&gt;assert speed &gt; 0&lt;/code&gt; with &lt;code&gt;if (BuildConfig.DEBUG &amp;amp;&amp;amp; !(speed &gt; 0)) { throw new AssertionError() }&lt;/code&gt;.&lt;br/&gt;
&lt;br/&gt;
(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)&lt;br&gt;&lt;br&gt;Issue id: Assert&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=65183&quot;&gt;https://code.google.com/p/android/issues/detail?id=65183&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUseAlpha2" displayName="Using 3-letter Codes" enabled="false">&lt;html&gt;&lt;body&gt;Using 3-letter Codes&lt;br&gt;&lt;br&gt;For compatibility with earlier devices, you should only use 3-letter language and region codes when there is no corresponding 2 letter code.&lt;br&gt;&lt;br&gt;Issue id: UseAlpha2&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://tools.ietf.org/html/bcp47&quot;&gt;https://tools.ietf.org/html/bcp47&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInvalidImeActionId" displayName="Invalid imeActionId declaration" enabled="false">&lt;html&gt;&lt;body&gt;Invalid imeActionId declaration&lt;br&gt;&lt;br&gt;android:imeActionId should not be a resourceId such as @+id/resName. It must be an integer constant, or an integer resource reference, as defined in EditorInfo.&lt;br&gt;&lt;br&gt;Issue id: InvalidImeActionId&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/view/inputmethod/EditorInfo.html&quot;&gt;https://developer.android.com/reference/android/view/inputmethod/EditorInfo.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintShowToast" displayName="Toast created but not shown" enabled="false">&lt;html&gt;&lt;body&gt;Toast created but not shown&lt;br&gt;&lt;br&gt;&lt;code&gt;Toast.makeText()&lt;/code&gt; creates a &lt;code&gt;Toast&lt;/code&gt; but does &lt;b&gt;not&lt;/b&gt; show it. You must call &lt;code&gt;show()&lt;/code&gt; on the resulting object to actually make the &lt;code&gt;Toast&lt;/code&gt; appear.&lt;br&gt;&lt;br&gt;Issue id: ShowToast&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintRestrictedApi" displayName="Restricted API" enabled="false">&lt;html&gt;&lt;body&gt;Restricted API&lt;br&gt;&lt;br&gt;This API has been flagged with a restriction that has not been met.&lt;br/&gt;
&lt;br/&gt;
Examples of API restrictions:&lt;br/&gt;
* Method can only be invoked by a subclass&lt;br/&gt;
* Method can only be accessed from within the same library (defined by the Gradle library group id)&lt;br/&gt;
* Method can only be accessed from tests.&lt;br/&gt;
&lt;br/&gt;
You can add your own API restrictions with the &lt;code&gt;@RestrictTo&lt;/code&gt; annotation.&lt;br&gt;&lt;br&gt;Issue id: RestrictedApi&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingSuperCall" displayName="Missing Super Call" enabled="false">&lt;html&gt;&lt;body&gt;Missing Super Call&lt;br&gt;&lt;br&gt;Some methods, such as &lt;code&gt;View#onDetachedFromWindow&lt;/code&gt;, require that you also call the super implementation as part of your method.&lt;br&gt;&lt;br&gt;Issue id: MissingSuperCall&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintNetworkSecurityConfig" displayName="Valid Network Security Config File" enabled="false">&lt;html&gt;&lt;body&gt;Valid Network Security Config File&lt;br&gt;&lt;br&gt;Ensures that a &lt;code&gt;&amp;lt;network-security-config&gt;&lt;/code&gt; file, which is pointed to by an &lt;code&gt;android:networkSecurityConfig&lt;/code&gt; attribute in the manifest file, is valid&lt;br&gt;&lt;br&gt;Issue id: NetworkSecurityConfig&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/preview/features/security-config.html&quot;&gt;https://developer.android.com/preview/features/security-config.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIncompatibleMediaBrowserServiceCompatVersion" displayName="Obsolete version of MediaBrowserServiceCompat" enabled="false">&lt;html&gt;&lt;body&gt;Obsolete version of MediaBrowserServiceCompat&lt;br&gt;&lt;br&gt;&lt;code&gt;MediaBrowserServiceCompat&lt;/code&gt; from version 23.2.0 to 23.4.0 of the Support v4 Library used private APIs and will not be compatible with future versions of Android beyond Android N. Please upgrade to version 24.0.0 or higher of the Support Library.&lt;br&gt;&lt;br&gt;Issue id: IncompatibleMediaBrowserServiceCompatVersion&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingPrefix" displayName="Missing Android XML namespace" enabled="false">&lt;html&gt;&lt;body&gt;Missing Android XML namespace&lt;br&gt;&lt;br&gt;Most Android views have attributes in the Android namespace. When referencing these attributes you &lt;b&gt;must&lt;/b&gt; include the namespace prefix, or your attribute will be interpreted by &lt;code&gt;aapt&lt;/code&gt; as just a custom attribute.&lt;br/&gt;
&lt;br/&gt;
Similarly, in manifest files, nearly all attributes should be in the &lt;code&gt;android:&lt;/code&gt; namespace.&lt;br&gt;&lt;br&gt;Issue id: MissingPrefix&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInvalidWakeLockTag" displayName="Invalid Wake Lock Tag" enabled="false">&lt;html&gt;&lt;body&gt;Invalid Wake Lock Tag&lt;br&gt;&lt;br&gt;Wake Lock tags must follow the naming conventions defined in the`PowerManager` documentation.&lt;br&gt;&lt;br&gt;Issue id: InvalidWakeLockTag&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/os/PowerManager.html&quot;&gt;https://developer.android.com/reference/android/os/PowerManager.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintProguard" displayName="Using obsolete ProGuard configuration" enabled="false">&lt;html&gt;&lt;body&gt;Using obsolete ProGuard configuration&lt;br&gt;&lt;br&gt;Using &lt;code&gt;-keepclasseswithmembernames&lt;/code&gt; in a proguard config file is not correct; it can cause some symbols to be renamed which should not be.&lt;br/&gt;
Earlier versions of ADT used to create proguard.cfg files with the wrong format. Instead of &lt;code&gt;-keepclasseswithmembernames&lt;/code&gt; use &lt;code&gt;-keepclasseswithmembers&lt;/code&gt;, since the old flags also implies &quot;allow shrinking&quot; which means symbols only referred to from XML and not Java (such as possibly CustomViews) can get deleted.&lt;br&gt;&lt;br&gt;Issue id: Proguard&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://http://code.google.com/p/android/issues/detail?id=16384&quot;&gt;http://http://code.google.com/p/android/issues/detail?id=16384&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingVersion" displayName="Missing application name/version" enabled="false">&lt;html&gt;&lt;body&gt;Missing application name/version&lt;br&gt;&lt;br&gt;You should define the version information for your application.&lt;br/&gt;
&lt;code&gt;android:versionCode&lt;/code&gt;: An integer value that represents the version of the application code, relative to other versions.&lt;br/&gt;
&lt;br/&gt;
&lt;code&gt;android:versionName&lt;/code&gt;: A string value that represents the release version of the application code, as it should be shown to users.&lt;br&gt;&lt;br&gt;Issue id: MissingVersion&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/tools/publishing/versioning.html#appversioning&quot;&gt;http://developer.android.com/tools/publishing/versioning.html#appversioning&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintResourceName" displayName="Resource with Wrong Prefix" enabled="false">&lt;html&gt;&lt;body&gt;Resource with Wrong Prefix&lt;br&gt;&lt;br&gt;In Gradle projects you can specify a resource prefix that all resources in the project must conform to. This makes it easier to ensure that you don&apos;t accidentally combine resources from different libraries, since they all end up in the same shared app namespace.&lt;br&gt;&lt;br&gt;Issue id: ResourceName&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintCommitTransaction" displayName="Missing commit() calls" enabled="false">&lt;html&gt;&lt;body&gt;Missing &lt;code&gt;commit()&lt;/code&gt; calls&lt;br&gt;&lt;br&gt;After creating a &lt;code&gt;FragmentTransaction&lt;/code&gt;, you typically need to commit it as well&lt;br&gt;&lt;br&gt;Issue id: CommitTransaction&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAccidentalOctal" displayName="Accidental Octal" enabled="false">&lt;html&gt;&lt;body&gt;Accidental Octal&lt;br&gt;&lt;br&gt;In Groovy, an integer literal that starts with a leading 0 will be interpreted as an octal number. That is usually (always?) an accident and can lead to subtle bugs, for example when used in the &lt;code&gt;versionCode&lt;/code&gt; of an app.&lt;br&gt;&lt;br&gt;Issue id: AccidentalOctal&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInstantApps" displayName="Instant App Issues" enabled="false">&lt;html&gt;&lt;body&gt;Instant App Issues&lt;br&gt;&lt;br&gt;This issue flags code that will not work correctly in Instant Apps&lt;br&gt;&lt;br&gt;Issue id: InstantApps&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSlices" displayName="Slices" enabled="false">&lt;html&gt;&lt;body&gt;Slices&lt;br&gt;&lt;br&gt;This check analyzes usages of the Slices API and offers suggestions based&lt;br/&gt;
on best practices.&lt;br&gt;&lt;br&gt;Issue id: Slices&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingLeanbackSupport" displayName="Missing Leanback Support." enabled="false">&lt;html&gt;&lt;body&gt;Missing Leanback Support.&lt;br&gt;&lt;br&gt;The manifest should declare the use of the Leanback user interface required by Android TV.&lt;br/&gt;
To fix this, add&lt;br/&gt;
&lt;code&gt;&amp;lt;uses-feature android:name=&quot;android.software.leanback&quot;   android:required=&quot;false&quot; /&gt;&lt;/code&gt;&lt;br/&gt;
to your manifest.&lt;br&gt;&lt;br&gt;Issue id: MissingLeanbackSupport&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/tv/start/start.html#leanback-req&quot;&gt;https://developer.android.com/training/tv/start/start.html#leanback-req&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintIllegalResourceRef" displayName="Name and version must be integer or string, not resource" enabled="false">&lt;html&gt;&lt;body&gt;Name and version must be integer or string, not resource&lt;br&gt;&lt;br&gt;For the &lt;code&gt;versionCode&lt;/code&gt; attribute, you have to specify an actual integer literal; you cannot use an indirection with a &lt;code&gt;@dimen/name&lt;/code&gt; resource. Similarly, the &lt;code&gt;versionName&lt;/code&gt; attribute should be an actual string, not a string resource url.&lt;br&gt;&lt;br&gt;Issue id: IllegalResourceRef&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintServiceCast" displayName="Wrong system service casts" enabled="false">&lt;html&gt;&lt;body&gt;Wrong system service casts&lt;br&gt;&lt;br&gt;When you call &lt;code&gt;Context#getSystemService()&lt;/code&gt;, the result is typically cast to a specific interface. This lint check ensures that the cast is compatible with the expected type of the return value.&lt;br&gt;&lt;br&gt;Issue id: ServiceCast&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintNamespaceTypo" displayName="Misspelled namespace declaration" enabled="false">&lt;html&gt;&lt;body&gt;Misspelled namespace declaration&lt;br&gt;&lt;br&gt;Accidental misspellings in namespace declarations can lead to some very obscure error messages. This check looks for potential misspellings to help track these down.&lt;br&gt;&lt;br&gt;Issue id: NamespaceTypo&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingConstraints" displayName="Missing Constraints in ConstraintLayout" enabled="false">&lt;html&gt;&lt;body&gt;Missing Constraints in ConstraintLayout&lt;br&gt;&lt;br&gt;The layout editor allows you to place widgets anywhere on the canvas, and it records the current position with designtime attributes (such as &lt;code&gt;layout_editor_absoluteX&lt;/code&gt;). These attributes are &lt;b&gt;not&lt;/b&gt; applied at runtime, so if you push your layout on a device, the widgets may appear in a different location than shown in the editor. To fix this, make sure a widget has both horizontal and vertical constraints by dragging from the edge connections.&lt;br&gt;&lt;br&gt;Issue id: MissingConstraints&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMultipleUsesSdk" displayName="Multiple &lt;uses-sdk&gt; elements in the manifest" enabled="false">&lt;html&gt;&lt;body&gt;Multiple &lt;code&gt;&amp;lt;uses-sdk&gt;&lt;/code&gt; elements in the manifest&lt;br&gt;&lt;br&gt;The &lt;code&gt;&amp;lt;uses-sdk&gt;&lt;/code&gt; element should appear just once; the tools will &lt;b&gt;not&lt;/b&gt; merge the contents of all the elements so if you split up the attributes across multiple elements, only one of them will take effect. To fix this, just merge all the attributes from the various elements into a single &amp;lt;uses-sdk&gt; element.&lt;br&gt;&lt;br&gt;Issue id: MultipleUsesSdk&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/manifest/uses-sdk-element.html&quot;&gt;http://developer.android.com/guide/topics/manifest/uses-sdk-element.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintExtraText" displayName="Extraneous text in resource files" enabled="false">&lt;html&gt;&lt;body&gt;Extraneous text in resource files&lt;br&gt;&lt;br&gt;Layout resource files should only contain elements and attributes. Any XML text content found in the file is likely accidental (and potentially dangerous if the text resembles XML and the developer believes the text to be functional)&lt;br&gt;&lt;br&gt;Issue id: ExtraText&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintLongLogTag" displayName="Too Long Log Tags" enabled="false">&lt;html&gt;&lt;body&gt;Too Long Log Tags&lt;br&gt;&lt;br&gt;Log tags are only allowed to be at most 23 tag characters long.&lt;br&gt;&lt;br&gt;Issue id: LongLogTag&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingId" displayName="Fragments should specify an id or tag" enabled="false">&lt;html&gt;&lt;body&gt;Fragments should specify an &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;tag&lt;/code&gt;&lt;br&gt;&lt;br&gt;If you do not specify an android:id or an android:tag attribute on a &amp;lt;fragment&gt; element, then if the activity is restarted (for example for an orientation rotation) you may lose state. From the fragment documentation:&lt;br/&gt;
&lt;br/&gt;
&quot;Each fragment requires a unique identifier that the system can use to restore the fragment if the activity is restarted (and which you can use to capture the fragment to perform transactions, such as remove it).&lt;br/&gt;
&lt;br/&gt;
* Supply the android:id attribute with a unique ID.&lt;br/&gt;
* Supply the android:tag attribute with a unique string.&lt;br/&gt;
If you provide neither of the previous two, the system uses the ID of the container view.&lt;br&gt;&lt;br&gt;Issue id: MissingId&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/components/fragments.html&quot;&gt;http://developer.android.com/guide/components/fragments.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWrongConstant" displayName="Incorrect constant" enabled="false">&lt;html&gt;&lt;body&gt;Incorrect constant&lt;br&gt;&lt;br&gt;Ensures that when parameter in a method only allows a specific set of constants, calls obey those rules.&lt;br&gt;&lt;br&gt;Issue id: WrongConstant&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInconsistentLayout" displayName="Inconsistent Layouts" enabled="false">&lt;html&gt;&lt;body&gt;Inconsistent Layouts&lt;br&gt;&lt;br&gt;This check ensures that a layout resource which is defined in multiple resource folders, specifies the same set of widgets.&lt;br/&gt;
&lt;br/&gt;
This finds cases where you have accidentally forgotten to add a widget to all variations of the layout, which could result in a runtime crash for some resource configurations when a &lt;code&gt;findViewById()&lt;/code&gt; fails.&lt;br/&gt;
&lt;br/&gt;
There &lt;b&gt;are&lt;/b&gt; cases where this is intentional. For example, you may have a dedicated large tablet layout which adds some extra widgets that are not present in the phone version of the layout. As long as the code accessing the layout resource is careful to handle this properly, it is valid. In that case, you can suppress this lint check for the given extra or missing views, or the whole layout&lt;br&gt;&lt;br&gt;Issue id: InconsistentLayout&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintStringFormatCount" displayName="Formatting argument types incomplete or inconsistent" enabled="false">&lt;html&gt;&lt;body&gt;Formatting argument types incomplete or inconsistent&lt;br&gt;&lt;br&gt;When a formatted string takes arguments, it usually needs to reference the same arguments in all translations (or all arguments if there are no translations.&lt;br/&gt;
&lt;br/&gt;
There are cases where this is not the case, so this issue is a warning rather than an error by default. However, this usually happens when a language is not translated or updated correctly.&lt;br&gt;&lt;br&gt;Issue id: StringFormatCount&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintBottomAppBar" displayName="BottomAppBar Problems" enabled="false">&lt;html&gt;&lt;body&gt;BottomAppBar Problems&lt;br&gt;&lt;br&gt;The &lt;code&gt;BottomAppBar&lt;/code&gt; widget must be placed within a &lt;code&gt;CoordinatorLayout&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: BottomAppBar&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintShiftFlags" displayName="Dangerous Flag Constant Declaration" enabled="false">&lt;html&gt;&lt;body&gt;Dangerous Flag Constant Declaration&lt;br&gt;&lt;br&gt;When defining multiple constants for use in flags, the recommended style is to use the form &lt;code&gt;1 &amp;lt;&amp;lt; 2&lt;/code&gt;, &lt;code&gt;1 &amp;lt;&amp;lt; 3&lt;/code&gt;, &lt;code&gt;1 &amp;lt;&amp;lt; 4&lt;/code&gt; and so on to ensure that the constants are unique and non-overlapping.&lt;br&gt;&lt;br&gt;Issue id: ShiftFlags&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMangledCRLF" displayName="Mangled file line endings" enabled="false">&lt;html&gt;&lt;body&gt;Mangled file line endings&lt;br&gt;&lt;br&gt;On Windows, line endings are typically recorded as carriage return plus newline: \r\n.&lt;br/&gt;
&lt;br/&gt;
This detector looks for invalid line endings with repeated carriage return characters (without newlines). Previous versions of the ADT plugin could accidentally introduce these into the file, and when editing the file, the editor could produce confusing visual artifacts.&lt;br&gt;&lt;br&gt;Issue id: MangledCRLF&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=375421&quot;&gt;https://bugs.eclipse.org/bugs/show_bug.cgi?id=375421&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintBatteryLife" displayName="Battery Life Issues" enabled="false">&lt;html&gt;&lt;body&gt;Battery Life Issues&lt;br&gt;&lt;br&gt;This issue flags code that either&lt;br/&gt;
* negatively affects battery life, or&lt;br/&gt;
* uses APIs that have recently changed behavior to prevent background tasks from consuming memory and battery excessively.&lt;br/&gt;
&lt;br/&gt;
Generally, you should be using &lt;code&gt;JobScheduler&lt;/code&gt; or &lt;code&gt;GcmNetworkManager&lt;/code&gt; instead.&lt;br/&gt;
&lt;br/&gt;
For more details on how to update your code, please see &lt;a href=&quot;http://developer.android.com/preview/features/background-optimization.html&quot;&gt;http://developer.android.com/preview/features/background-optimization.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;Issue id: BatteryLife&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSimpleDateFormat" displayName="Implied locale in date format" enabled="false">&lt;html&gt;&lt;body&gt;Implied locale in date format&lt;br&gt;&lt;br&gt;Almost all callers should use &lt;code&gt;getDateInstance()&lt;/code&gt;, &lt;code&gt;getDateTimeInstance()&lt;/code&gt;, or &lt;code&gt;getTimeInstance()&lt;/code&gt; to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&lt;br/&gt;
&lt;br/&gt;
Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing.&lt;br&gt;&lt;br&gt;Issue id: SimpleDateFormat&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/reference/java/text/SimpleDateFormat.html&quot;&gt;http://developer.android.com/reference/java/text/SimpleDateFormat.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintEllipsizeMaxLines" displayName="Combining Ellipsize and Maxlines" enabled="false">&lt;html&gt;&lt;body&gt;Combining Ellipsize and Maxlines&lt;br&gt;&lt;br&gt;Combining &lt;code&gt;ellipsize&lt;/code&gt; and &lt;code&gt;maxLines=1&lt;/code&gt; can lead to crashes on some devices. Earlier versions of lint recommended replacing &lt;code&gt;singleLine=true&lt;/code&gt; with &lt;code&gt;maxLines=1&lt;/code&gt; but that should not be done when using &lt;code&gt;ellipsize&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: EllipsizeMaxLines&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://issuetracker.google.com/issues/36950033&quot;&gt;https://issuetracker.google.com/issues/36950033&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDeviceAdmin" displayName="Malformed Device Admin" enabled="false">&lt;html&gt;&lt;body&gt;Malformed Device Admin&lt;br&gt;&lt;br&gt;If you register a broadcast receiver which acts as a device admin, you must also register an &lt;code&gt;&amp;lt;intent-filter&gt;&lt;/code&gt; for the action &lt;code&gt;android.app.action.DEVICE_ADMIN_ENABLED&lt;/code&gt;, without any &lt;code&gt;&amp;lt;data&gt;&lt;/code&gt;, such that the device admin can be activated/deactivated.&lt;br/&gt;
&lt;br/&gt;
To do this, add&lt;br/&gt;
&lt;code&gt;&amp;lt;intent-filter&gt;&lt;/code&gt;&lt;br/&gt;
    &lt;code&gt;&amp;lt;action android:name=&quot;android.app.action.DEVICE_ADMIN_ENABLED&quot; /&gt;&lt;/code&gt;&lt;br/&gt;
&lt;code&gt;&amp;lt;/intent-filter&gt;&lt;/code&gt;&lt;br/&gt;
to your &lt;code&gt;&amp;lt;receiver&gt;&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: DeviceAdmin&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInconsistentArrays" displayName="Inconsistencies in array element counts" enabled="false">&lt;html&gt;&lt;body&gt;Inconsistencies in array element counts&lt;br&gt;&lt;br&gt;When an array is translated in a different locale, it should normally have the same number of elements as the original array. When adding or removing elements to an array, it is easy to forget to update all the locales, and this lint warning finds inconsistencies like these.&lt;br/&gt;
&lt;br/&gt;
Note however that there may be cases where you really want to declare a different number of array items in each configuration (for example where the array represents available options, and those options differ for different layout orientations and so on), so use your own judgement to decide if this is really an error.&lt;br/&gt;
&lt;br/&gt;
You can suppress this error type if it finds false errors in your project.&lt;br&gt;&lt;br&gt;Issue id: InconsistentArrays&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintPrivateResource" displayName="Using private resources" enabled="false">&lt;html&gt;&lt;body&gt;Using private resources&lt;br&gt;&lt;br&gt;Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.&lt;br/&gt;
&lt;br/&gt;
To fix this, copy the resource into your own project instead.&lt;br&gt;&lt;br&gt;Issue id: PrivateResource&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintTestAppLink" displayName="Unmatched URLs" enabled="false">&lt;html&gt;&lt;body&gt;Unmatched URLs&lt;br&gt;&lt;br&gt;Using one or more &lt;code&gt;tools:validation testUrl=&quot;some url&quot;/&gt;&lt;/code&gt; elements in your manifest allows the link attributes in your intent filter to be checked for matches.&lt;br&gt;&lt;br&gt;Issue id: TestAppLink&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintFontValidationWarning" displayName="Validation of font files" enabled="false">&lt;html&gt;&lt;body&gt;Validation of font files&lt;br&gt;&lt;br&gt;Look for problems in various font files.&lt;br&gt;&lt;br&gt;Issue id: FontValidationWarning&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/guide/topics/text/downloadable-fonts.html&quot;&gt;https://developer.android.com/guide/topics/text/downloadable-fonts.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintCutPasteId" displayName="Likely cut &amp; paste mistakes" enabled="false">&lt;html&gt;&lt;body&gt;Likely cut &amp;amp; paste mistakes&lt;br&gt;&lt;br&gt;This lint check looks for cases where you have cut &amp;amp; pasted calls to &lt;code&gt;findViewById&lt;/code&gt; but have forgotten to update the R.id field. It&apos;s possible that your code is simply (redundantly) looking up the field repeatedly, but lint cannot distinguish that from a case where you for example want to initialize fields &lt;code&gt;prev&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; and you cut &amp;amp; pasted &lt;code&gt;findViewById(R.id.prev)&lt;/code&gt; and forgot to update the second initialization to &lt;code&gt;R.id.next&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: CutPasteId&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGradleDeprecated" displayName="Deprecated Gradle Construct" enabled="false">&lt;html&gt;&lt;body&gt;Deprecated Gradle Construct&lt;br&gt;&lt;br&gt;This detector looks for deprecated Gradle constructs which currently work but will likely stop working in a future update.&lt;br&gt;&lt;br&gt;Issue id: GradleDeprecated&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintResourceCycle" displayName="Cycle in resource definitions" enabled="false">&lt;html&gt;&lt;body&gt;Cycle in resource definitions&lt;br&gt;&lt;br&gt;There should be no cycles in resource definitions as this can lead to runtime exceptions.&lt;br&gt;&lt;br&gt;Issue id: ResourceCycle&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintNfcTechWhitespace" displayName="Whitespace in NFC tech lists" enabled="false">&lt;html&gt;&lt;body&gt;Whitespace in NFC tech lists&lt;br&gt;&lt;br&gt;In a &amp;lt;tech-list&gt;, there can be whitespace around the &amp;lt;tech&gt; elements,but not inside them. This is because the code which reads in the tech list is currently very strict and will include the whitespace as part of the name.&lt;br/&gt;
&lt;br/&gt;
In other words, use &amp;lt;tech&gt;name&amp;lt;/tech&gt;, not &amp;lt;tech&gt; name &amp;lt;/tech&gt;.&lt;br&gt;&lt;br&gt;Issue id: NfcTechWhitespace&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=65351&quot;&gt;https://code.google.com/p/android/issues/detail?id=65351&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUnknownId" displayName="Reference to an unknown id" enabled="false">&lt;html&gt;&lt;body&gt;Reference to an unknown id&lt;br&gt;&lt;br&gt;The &lt;code&gt;@+id/&lt;/code&gt; syntax refers to an existing id, or creates a new one if it has not already been defined elsewhere. However, this means that if you have a typo in your reference, or if the referred view no longer exists, you do not get a warning since the id will be created on demand. This check catches errors where you have renamed an id without updating all of the references to it.&lt;br&gt;&lt;br&gt;Issue id: UnknownId&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintResourceType" displayName="Wrong Resource Type" enabled="false">&lt;html&gt;&lt;body&gt;Wrong Resource Type&lt;br&gt;&lt;br&gt;Ensures that resource id&apos;s passed to APIs are of the right type; for example, calling &lt;code&gt;Resources.getColor(R.string.name)&lt;/code&gt; is wrong.&lt;br&gt;&lt;br&gt;Issue id: ResourceType&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintDuplicateUsesFeature" displayName="Feature declared more than once" enabled="false">&lt;html&gt;&lt;body&gt;Feature declared more than once&lt;br&gt;&lt;br&gt;A given feature should only be declared once in the manifest.&lt;br&gt;&lt;br&gt;Issue id: DuplicateUsesFeature&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingTranslation" displayName="Incomplete translation" enabled="false">&lt;html&gt;&lt;body&gt;Incomplete translation&lt;br&gt;&lt;br&gt;If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.&lt;br/&gt;
&lt;br/&gt;
If the string should &lt;b&gt;not&lt;/b&gt; be translated, you can add the attribute &lt;code&gt;translatable=&quot;false&quot;&lt;/code&gt; on the &lt;code&gt;&amp;lt;string&gt;&lt;/code&gt; element, or you can define all your non-translatable strings in a resource file called &lt;code&gt;donottranslate.xml&lt;/code&gt;. Or, you can ignore the issue with a &lt;code&gt;tools:ignore=&quot;MissingTranslation&quot;&lt;/code&gt; attribute.&lt;br/&gt;
&lt;br/&gt;
You can tell lint (and other tools) which language is the default language in your &lt;code&gt;res/values/&lt;/code&gt; folder by specifying &lt;code&gt;tools:locale=&quot;languageCode&quot;&lt;/code&gt; for the root &lt;code&gt;&amp;lt;resources&gt;&lt;/code&gt; element in your resource file. (The &lt;code&gt;tools&lt;/code&gt; prefix refers to the namespace declaration &lt;code&gt;http://schemas.android.com/tools&lt;/code&gt;.)&lt;br&gt;&lt;br&gt;Issue id: MissingTranslation&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintStopShip" displayName="Code contains STOPSHIP marker" enabled="false">&lt;html&gt;&lt;body&gt;Code contains &lt;code&gt;STOPSHIP&lt;/code&gt; marker&lt;br&gt;&lt;br&gt;Using the comment &lt;code&gt;// STOPSHIP&lt;/code&gt; can be used to flag code that is incomplete but checked in. This comment marker can be used to indicate that the code should not be shipped until the issue is addressed, and lint will look for these.  In Gradle projects, this is only checked for non-debug (release) builds.&lt;br&gt;&lt;br&gt;Issue id: StopShip&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintCommitPrefEdits" displayName="Missing commit() on SharedPreference editor" enabled="false">&lt;html&gt;&lt;body&gt;Missing &lt;code&gt;commit()&lt;/code&gt; on &lt;code&gt;SharedPreference&lt;/code&gt; editor&lt;br&gt;&lt;br&gt;After calling &lt;code&gt;edit()&lt;/code&gt; on a &lt;code&gt;SharedPreference&lt;/code&gt;, you must call &lt;code&gt;commit()&lt;/code&gt; or &lt;code&gt;apply()&lt;/code&gt; on the editor to save the results.&lt;br&gt;&lt;br&gt;Issue id: CommitPrefEdits&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintObjectAnimatorBinding" displayName="Incorrect ObjectAnimator Property" enabled="false">&lt;html&gt;&lt;body&gt;Incorrect ObjectAnimator Property&lt;br&gt;&lt;br&gt;This check cross references properties referenced by String from &lt;code&gt;ObjectAnimator&lt;/code&gt; and &lt;code&gt;PropertyValuesHolder&lt;/code&gt; method calls and ensures that the corresponding setter methods exist and have the right signatures.&lt;br&gt;&lt;br&gt;Issue id: ObjectAnimatorBinding&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintUnsupportedTvHardware" displayName="Unsupported TV Hardware Feature" enabled="false">&lt;html&gt;&lt;body&gt;Unsupported TV Hardware Feature&lt;br&gt;&lt;br&gt;The &amp;lt;uses-feature&gt; element should not require this unsupported TV hardware feature. Any uses-feature not explicitly marked with required=&quot;false&quot; is necessary on the device to be installed on. Ensure that any features that might prevent it from being installed on a TV device are reviewed and marked as not required in the manifest.&lt;br&gt;&lt;br&gt;Issue id: UnsupportedTvHardware&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/tv/start/hardware.html#unsupported-features&quot;&gt;https://developer.android.com/training/tv/start/hardware.html#unsupported-features&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintShortAlarm" displayName="Short or Frequent Alarm" enabled="false">&lt;html&gt;&lt;body&gt;Short or Frequent Alarm&lt;br&gt;&lt;br&gt;Frequent alarms are bad for battery life. As of API 22, the &lt;code&gt;AlarmManager&lt;/code&gt; will override near-future and high-frequency alarm requests, delaying the alarm at least 5 seconds into the future and ensuring that the repeat interval is at least 60 seconds.&lt;br/&gt;
&lt;br/&gt;
If you really need to do work sooner than 5 seconds, post a delayed message or runnable to a Handler.&lt;br&gt;&lt;br&gt;Issue id: ShortAlarm&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintPermissionImpliesUnsupportedChromeOsHardware" displayName="Permission Implies Unsupported Chrome OS Hardware" enabled="false">&lt;html&gt;&lt;body&gt;Permission Implies Unsupported Chrome OS Hardware&lt;br&gt;&lt;br&gt;The &lt;code&gt;&amp;lt;uses-permission&gt;&lt;/code&gt; element should not require a permission that implies an unsupported Chrome OS hardware feature. Google Play assumes that certain hardware related permissions indicate that the underlying hardware features are required by default. To fix the issue, consider declaring the corresponding uses-feature element with &lt;code&gt;required=&quot;false&quot;&lt;/code&gt; attribute.&lt;br&gt;&lt;br&gt;Issue id: PermissionImpliesUnsupportedChromeOsHardware&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/topic/arc/manifest.html#implied-features&quot;&gt;https://developer.android.com/topic/arc/manifest.html#implied-features&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintCheckResult" displayName="Ignoring results" enabled="false">&lt;html&gt;&lt;body&gt;Ignoring results&lt;br&gt;&lt;br&gt;Some methods have no side effects, an calling them without doing something without the result is suspicious.&lt;br&gt;&lt;br&gt;Issue id: CheckResult&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintFullBackupContent" displayName="Valid Full Backup Content File" enabled="false">&lt;html&gt;&lt;body&gt;Valid Full Backup Content File&lt;br&gt;&lt;br&gt;Ensures that a &lt;code&gt;&amp;lt;full-backup-content&gt;&lt;/code&gt; file, which is pointed to by a &lt;code&gt;android:fullBackupContent attribute&lt;/code&gt; in the manifest file, is valid&lt;br&gt;&lt;br&gt;Issue id: FullBackupContent&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://android-developers.blogspot.com/2015/07/auto-backup-for-apps-made-simple.html&quot;&gt;http://android-developers.blogspot.com/2015/07/auto-backup-for-apps-made-simple.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintLogTagMismatch" displayName="Mismatched Log Tags" enabled="false">&lt;html&gt;&lt;body&gt;Mismatched Log Tags&lt;br&gt;&lt;br&gt;When guarding a &lt;code&gt;Log.v(tag, ...)&lt;/code&gt; call with &lt;code&gt;Log.isLoggable(tag)&lt;/code&gt;, the tag passed to both calls should be the same. Similarly, the level passed in to &lt;code&gt;Log.isLoggable&lt;/code&gt; should typically match the type of &lt;code&gt;Log&lt;/code&gt; call, e.g. if checking level &lt;code&gt;Log.DEBUG&lt;/code&gt;, the corresponding &lt;code&gt;Log&lt;/code&gt; call should be &lt;code&gt;Log.d&lt;/code&gt;, not &lt;code&gt;Log.i&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: LogTagMismatch&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintSdCardPath" displayName="Hardcoded reference to /sdcard" enabled="false">&lt;html&gt;&lt;body&gt;Hardcoded reference to &lt;code&gt;/sdcard&lt;/code&gt;&lt;br&gt;&lt;br&gt;Your code should not reference the &lt;code&gt;/sdcard&lt;/code&gt; path directly; instead use &lt;code&gt;Environment.getExternalStorageDirectory().getPath()&lt;/code&gt;.&lt;br/&gt;
&lt;br/&gt;
Similarly, do not reference the &lt;code&gt;/data/data/&lt;/code&gt; path directly; it can vary in multi-user scenarios. Instead, use &lt;code&gt;Context.getFilesDir().getPath()&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: SdCardPath&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/data/data-storage.html#filesExternal&quot;&gt;http://developer.android.com/guide/topics/data/data-storage.html#filesExternal&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintParcelCreator" displayName="Missing Parcelable CREATOR field" enabled="false">&lt;html&gt;&lt;body&gt;Missing Parcelable &lt;code&gt;CREATOR&lt;/code&gt; field&lt;br&gt;&lt;br&gt;According to the &lt;code&gt;Parcelable&lt;/code&gt; interface documentation, &quot;Classes implementing the Parcelable interface must also have a static field called &lt;code&gt;CREATOR&lt;/code&gt;, which is an object implementing the &lt;code&gt;Parcelable.Creator&lt;/code&gt; interface.&quot;&lt;br&gt;&lt;br&gt;Issue id: ParcelCreator&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/reference/android/os/Parcelable.html&quot;&gt;http://developer.android.com/reference/android/os/Parcelable.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintImpliedTouchscreenHardware" displayName="Missing declaration of uses-feature for touchscreen" enabled="false">&lt;html&gt;&lt;body&gt;Hardware feature touchscreen not explicitly marked as optional&lt;br&gt;&lt;br&gt;Apps require the &lt;code&gt;android.hardware.touchscreen&lt;/code&gt; feature by default. If you want your app to be available on TV, you must also explicitly declare that a touchscreen is not required as follows:&lt;br/&gt;
&lt;code&gt;&amp;lt;uses-feature android:name=&quot;android.hardware.touchscreen&quot; android:required=&quot;false&quot;/&gt;&lt;/code&gt;&lt;br&gt;&lt;br&gt;Issue id: ImpliedTouchscreenHardware&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/guide/topics/manifest/uses-feature-element.html&quot;&gt;https://developer.android.com/guide/topics/manifest/uses-feature-element.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintStringEscaping" displayName="Invalid string escapes" enabled="false">&lt;html&gt;&lt;body&gt;Invalid string escapes&lt;br&gt;&lt;br&gt;Apostrophes (&apos;) must always be escaped (with a \), unless they appear in a string which is itself escaped in double quotes (&quot;).&lt;br&gt;&lt;br&gt;Issue id: StringEscaping&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintOverrideAbstract" displayName="Not overriding abstract methods on older platforms" enabled="false">&lt;html&gt;&lt;body&gt;Not overriding abstract methods on older platforms&lt;br&gt;&lt;br&gt;To improve the usability of some APIs, some methods that used to be &lt;code&gt;abstract&lt;/code&gt; have been made concrete by adding default implementations. This means that when compiling with new versions of the SDK, your code does not have to override these methods.&lt;br/&gt;
&lt;br/&gt;
However, if your code is also targeting older versions of the platform where these methods were still &lt;code&gt;abstract&lt;/code&gt;, the code will crash. You must override all methods that used to be abstract in any versions targeted by your application&apos;s &lt;code&gt;minSdkVersion&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: OverrideAbstract&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintPropertyEscape" displayName="Incorrect property escapes" enabled="false">&lt;html&gt;&lt;body&gt;Incorrect property escapes&lt;br&gt;&lt;br&gt;All backslashes and colons in .property files must be escaped with a backslash (). This means that when writing a Windows path, you must escape the file separators, so the path MyFiles should be written as &lt;code&gt;key=\\My\\Files.&lt;/code&gt;&lt;br&gt;&lt;br&gt;Issue id: PropertyEscape&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingTvBanner" displayName="TV Missing Banner" enabled="false">&lt;html&gt;&lt;body&gt;TV Missing Banner&lt;br&gt;&lt;br&gt;A TV application must provide a home screen banner for each localization if it includes a Leanback launcher intent filter. The banner is the app launch point that appears on the home screen in the apps and games rows.&lt;br&gt;&lt;br&gt;Issue id: MissingTvBanner&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/training/tv/start/start.html#banner&quot;&gt;http://developer.android.com/training/tv/start/start.html#banner&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInnerclassSeparator" displayName="Inner classes should use $ rather than ." enabled="false">&lt;html&gt;&lt;body&gt;Inner classes should use &lt;code&gt;$&lt;/code&gt; rather than &lt;code&gt;.&lt;/code&gt;&lt;br&gt;&lt;br&gt;When you reference an inner class in a manifest file, you must use &apos;$&apos; instead of &apos;.&apos; as the separator character, i.e. Outer$Inner instead of Outer.Inner.&lt;br/&gt;
&lt;br/&gt;
(If you get this warning for a class which is not actually an inner class, it&apos;s because you are using uppercase characters in your package name, which is not conventional.)&lt;br&gt;&lt;br&gt;Issue id: InnerclassSeparator&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGradleIdeError" displayName="Gradle IDE Support Issues" enabled="false">&lt;html&gt;&lt;body&gt;Gradle IDE Support Issues&lt;br&gt;&lt;br&gt;Gradle is highly flexible, and there are things you can do in Gradle files which can make it hard or impossible for IDEs to properly handle the project. This lint check looks for constructs that potentially break IDE support.&lt;br&gt;&lt;br&gt;Issue id: GradleIdeError&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWearStandaloneAppFlag" displayName="Invalid or missing wear standalone app flag" enabled="false">&lt;html&gt;&lt;body&gt;Invalid or missing Wear standalone app flag&lt;br&gt;&lt;br&gt;Wearable apps should specify whether they can work standalone, without a phone app.Add a valid meta-data entry for &lt;code&gt;com.google.android.wearable.standalone&lt;/code&gt; to your application element and set the value to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;br/&gt;
&lt;code&gt;&amp;lt;meta-data android:name=&quot;com.google.android.wearable.standalone&quot;&lt;br/&gt;
            android:value=&quot;true&quot;/&gt;&lt;/code&gt;&lt;br&gt;&lt;br&gt;Issue id: WearStandaloneAppFlag&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/wearables/apps/packaging.html&quot;&gt;https://developer.android.com/training/wearables/apps/packaging.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintRequiresFeature" displayName="Requires Feature" enabled="false">&lt;html&gt;&lt;body&gt;Requires Feature&lt;br&gt;&lt;br&gt;Some APIs require optional features to be present. This check makes sure that calls to these APIs are surrounded by a check which enforces this.&lt;br&gt;&lt;br&gt;Issue id: RequiresFeature&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInvalidId" displayName="Invalid ID declaration" enabled="false">&lt;html&gt;&lt;body&gt;Invalid ID declaration&lt;br&gt;&lt;br&gt;An id definition &lt;b&gt;must&lt;/b&gt; be of the form &lt;code&gt;@+id/yourname&lt;/code&gt;. The tools have not rejected strings of the form &lt;code&gt;@+foo/bar&lt;/code&gt; in the past, but that was an error, and could lead to tricky errors because of the way the id integers are assigned.&lt;br/&gt;
&lt;br/&gt;
If you really want to have different &quot;scopes&quot; for your id&apos;s, use prefixes instead, such as &lt;code&gt;login_button1&lt;/code&gt; and &lt;code&gt;login_button2&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: InvalidId&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintValidActionsXml" displayName="Invalid Action Descriptor" enabled="false">&lt;html&gt;&lt;body&gt;Invalid Action Descriptor&lt;br&gt;&lt;br&gt;Ensures that an actions XML file is properly formed&lt;br&gt;&lt;br&gt;Issue id: ValidActionsXml&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintCanvasSize" displayName="Wrong Canvas Size" enabled="false">&lt;html&gt;&lt;body&gt;Wrong Canvas Size&lt;br&gt;&lt;br&gt;In a custom view&apos;s draw implementation, you should normally call &lt;code&gt;getWidth&lt;/code&gt; and &lt;code&gt;getHeight&lt;/code&gt; on the custom view itself, not on the &lt;code&gt;canvas&lt;/code&gt; instance.&lt;br/&gt;
&lt;br/&gt;
Canvas width and height are the width and height of the &lt;code&gt;Canvas&lt;/code&gt;, which is not always the same as size of the view.&lt;br/&gt;
&lt;br/&gt;
In the hardware accelerated path the width and height of the canvas typically always match that of the &lt;code&gt;View&lt;/code&gt; because every view goes to its own recorded &lt;code&gt;DisplayList&lt;/code&gt;. But in software rendering there&apos;s just one canvas that is clipped and transformed as it makes its way through the &lt;code&gt;View&lt;/code&gt; tree, and otherwise remains the same &lt;code&gt;Canvas&lt;/code&gt; object for every View&apos;s draw method.&lt;br/&gt;
&lt;br/&gt;
You should only use Canvas state to adjust how much you draw, such as a quick-reject for early work avoidance if it&apos;s going to be clipped away, but not what you draw.&lt;br&gt;&lt;br&gt;Issue id: CanvasSize&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintMissingIntentFilterForMediaSearch" displayName="Missing intent-filter with action android.media.action.MEDIA_PLAY_FROM_SEARCH" enabled="false">&lt;html&gt;&lt;body&gt;Missing intent-filter with action &lt;code&gt;android.media.action.MEDIA_PLAY_FROM_SEARCH&lt;/code&gt;&lt;br&gt;&lt;br&gt;To support voice searches on Android Auto, you should also register an &lt;code&gt;intent-filter&lt;/code&gt; for the action &lt;code&gt;android.media.action.MEDIA_PLAY_FROM_SEARCH&lt;/code&gt;.&lt;br/&gt;
To do this, add&lt;br/&gt;
&lt;code&gt;&amp;lt;intent-filter&gt;&lt;/code&gt;&lt;br/&gt;
    &lt;code&gt;&amp;lt;action android:name=&quot;android.media.action.MEDIA_PLAY_FROM_SEARCH&quot; /&gt;&lt;/code&gt;&lt;br/&gt;
&lt;code&gt;&amp;lt;/intent-filter&gt;&lt;/code&gt;&lt;br/&gt;
to your &lt;code&gt;&amp;lt;activity&gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;service&gt;&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: MissingIntentFilterForMediaSearch&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/auto/audio/index.html#support_voice&quot;&gt;https://developer.android.com/training/auto/audio/index.html#support_voice&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintLocaleFolder" displayName="Wrong locale name" enabled="false">&lt;html&gt;&lt;body&gt;Wrong locale name&lt;br&gt;&lt;br&gt;From the &lt;code&gt;java.util.Locale&lt;/code&gt; documentation:&lt;br/&gt;
&quot;Note that Java uses several deprecated two-letter codes. The Hebrew (&quot;he&quot;) language code is rewritten as &quot;iw&quot;, Indonesian (&quot;id&quot;) as &quot;in&quot;, and Yiddish (&quot;yi&quot;) as &quot;ji&quot;. This rewriting happens even if you construct your own Locale object, not just for instances returned by the various lookup methods.&lt;br/&gt;
&lt;br/&gt;
Because of this, if you add your localized resources in for example &lt;code&gt;values-he&lt;/code&gt; they will not be used, since the system will look for &lt;code&gt;values-iw&lt;/code&gt; instead.&lt;br/&gt;
&lt;br/&gt;
To work around this, place your resources in a &lt;code&gt;values&lt;/code&gt; folder using the deprecated language code instead.&lt;br&gt;&lt;br&gt;Issue id: LocaleFolder&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/reference/java/util/Locale.html&quot;&gt;http://developer.android.com/reference/java/util/Locale.html&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintGradleGetter" displayName="Gradle Implicit Getter Call" enabled="false">&lt;html&gt;&lt;body&gt;Gradle Implicit Getter Call&lt;br&gt;&lt;br&gt;Gradle will let you replace specific constants in your build scripts with method calls, so you can for example dynamically compute a version string based on your current version control revision number, rather than hardcoding a number.&lt;br/&gt;
&lt;br/&gt;
When computing a version name, it&apos;s tempting to for example call the method to do that &lt;code&gt;getVersionName&lt;/code&gt;. However, when you put that method call inside the &lt;code&gt;defaultConfig&lt;/code&gt; block, you will actually be calling the Groovy getter for the &lt;code&gt;versionName&lt;/code&gt; property instead. Therefore, you need to name your method something which does not conflict with the existing implicit getters. Consider using &lt;code&gt;compute&lt;/code&gt; as a prefix instead of &lt;code&gt;get&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: GradleGetter&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintAppLinksAutoVerifyWarning" displayName="Potential App Links Auto Verification Failure" enabled="false">&lt;html&gt;&lt;body&gt;Potential App Links Auto Verification Failure&lt;br&gt;&lt;br&gt;Ensures that app links are correctly set and associated with website.&lt;br&gt;&lt;br&gt;Issue id: AppLinksAutoVerifyWarning&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://g.co/appindexing/applinks&quot;&gt;https://g.co/appindexing/applinks&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintHalfFloat" displayName="Incorrect Half Float" enabled="false">&lt;html&gt;&lt;body&gt;Incorrect Half Float&lt;br&gt;&lt;br&gt;Half-precision floating point are stored in a short data type, and should be manipulated using the &lt;code&gt;android.util.Half&lt;/code&gt; class. This check flags usages where it appears that these values are used incorrectly.&lt;br&gt;&lt;br&gt;Issue id: HalfFloat&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWrongFolder" displayName="Resource file in the wrong res folder" enabled="false">&lt;html&gt;&lt;body&gt;Resource file in the wrong &lt;code&gt;res&lt;/code&gt; folder&lt;br&gt;&lt;br&gt;Resource files are sometimes placed in the wrong folder, and it can lead to subtle bugs that are hard to understand. This check looks for problems in this area, such as attempting to place a layout &quot;alias&quot; file in a &lt;code&gt;layout/&lt;/code&gt; folder rather than the &lt;code&gt;values/&lt;/code&gt; folder where it belongs.&lt;br&gt;&lt;br&gt;Issue id: WrongFolder&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintInvalidNavigation" displayName="No start destination specified" enabled="false">&lt;html&gt;&lt;body&gt;No start destination specified&lt;br&gt;&lt;br&gt;All &lt;code&gt;&amp;lt;navigation&gt;&lt;/code&gt; elements must have a start destination specified, and it must be a direct child of that &lt;code&gt;&amp;lt;navigation&gt;&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Issue id: InvalidNavigation&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintRequiredSize" displayName="Missing layout_width or layout_height attributes" enabled="false">&lt;html&gt;&lt;body&gt;Missing &lt;code&gt;layout_width&lt;/code&gt; or &lt;code&gt;layout_height&lt;/code&gt; attributes&lt;br&gt;&lt;br&gt;All views must specify an explicit &lt;code&gt;layout_width&lt;/code&gt; and &lt;code&gt;layout_height&lt;/code&gt; attribute. There is a runtime check for this, so if you fail to specify a size, an exception is thrown at runtime.&lt;br/&gt;
&lt;br/&gt;
It&apos;s possible to specify these widths via styles as well. GridLayout, as a special case, does not require you to specify a size.&lt;br&gt;&lt;br&gt;Issue id: RequiredSize&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AndroidLintWrongThreadInterprocedural" displayName="Wrong Thread (Interprocedural)" enabled="false">&lt;html&gt;&lt;body&gt;Wrong Thread (Interprocedural)&lt;br&gt;&lt;br&gt;Searches for interprocedural call paths that violate thread annotations in the program. Tracks the flow of instantiated types and lambda expressions to increase accuracy across method boundaries.&lt;br&gt;&lt;br&gt;Issue id: WrongThreadInterprocedural&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/guide/components/processes-and-threads.html#Threads&quot;&gt;https://developer.android.com/guide/components/processes-and-threads.html#Threads&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</inspection>
  </group>
  <group name="XML">
    <inspection shortName="XmlHighlighting" displayName="XML highlighting" enabled="false">&lt;html&gt;
&lt;body&gt;
Highlights XML validation problems in the results of batch code inspection.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckXmlFileWithXercesValidator" displayName="File does not pass external validation" enabled="false">&lt;html&gt;
&lt;body&gt;
Thoroughly checks XML files for DTD / schema compliance using Xerces validator.
The validation works in XML or XHTML file types. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DeprecatedClassUsageInspection" displayName="Deprecated API usage in XML" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks for usages of deprecated classes and methods in XML.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlInvalidId" displayName="Unresolved ID" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks for unresolved &quot;id&quot; attributes in XML.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckTagEmptyBody" displayName="XML tag empty body" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;empty&lt;/b&gt; tag body.
The validation works in XML / JSP / JSPX / HTML/ XHTML file types. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlWrongRootElement" displayName="Wrong root element" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks if root tag name is the same as in &amp;lt;doctype&amp;gt;. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlDuplicatedId" displayName="Duplicate ID" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks for duplicate &quot;id&quot; attributes in XML.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlUnboundNsPrefix" displayName="Unbound XML namespace prefix" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks for unbound namespace prefixes in XML.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlDeprecatedElement" displayName="Deprecated elements" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks for deprecated XML elements.
&lt;p&gt;The elements can be marked by XML comment or documentation tag with text &quot;deprecated&quot;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlDefaultAttributeValue" displayName="Redundant default attribute value assignment" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks for redundant default XML attribute value assignment.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlPathReference" displayName="File path resolving in XML" enabled="false">&lt;html&gt;
&lt;body&gt;
Highlights unresolved file references in XML.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlUnusedNamespaceDeclaration" displayName="Unused XML schema declaration" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks for unused namespace declarations and location hints in XML
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckDtdRefs" displayName="Unresolved DTD reference" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks consistency of &lt;b&gt;DTD&lt;/b&gt; specific references, e.g. references to XML entity or to DTD element declaration.
The validation works in DTD or XML file types. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="TestNG">
    <inspection shortName="ExpectedExceptionNeverThrownTestNG" displayName="Expected exception never thrown in test method body" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports checked exceptions expected by a TestNG test method,
which are never thrown inside the method body.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantTestNGAssertArgument" displayName="Constant TestNG assert argument" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports constant arguments to TestNG assertTrue, assertFalse,
assertNull and assertNotNull method calls. Calls to these methods with such
constant arguments will either always fail or always succeed.
Such statements can easily be left over after refactoring and are probably not intended.
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TestNGDataProvider" displayName="Data provider problems" enabled="false">&lt;html&gt;&lt;body&gt;
This inspection checks that data provider method exists and is accessible.
&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="groupsTestNG" displayName="Groups problem" enabled="false">&lt;html&gt;&lt;body&gt;
    This inspection checks that group name is acceptable according to a list of known groups.
&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AssertEqualsBetweenInconvertibleTypesTestNG" displayName="&apos;assertEquals()&apos; between objects of inconvertible types" enabled="false">&lt;html&gt;&lt;body&gt;
Reports any calls to TestNG&apos;s &lt;b&gt;assertEquals()&lt;/b&gt;
method where the expected result and actual result arguments are of incompatible
types. While such a call might theoretically be useful, most likely it represents a bug.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="AssertsWithoutMessagesTestNG" displayName="Message missing on TestNG assertion" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports calls to TestNG &lt;b&gt;assertXXX()&lt;/b&gt; or &lt;b&gt;fail()&lt;/b&gt; methods that do not have an error message string argument.
An error message on assertion failure may help clarify the test case&apos;s intent.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConvertJavadoc" displayName="TestNG Javadoc can be converted to annotations" enabled="false">&lt;html&gt;&lt;body&gt;
    This inspection asserts your TestNG tests with Javadoc annotations and allows to convert them to JDK annotations.
&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="JUnitTestNG" displayName="JUnit Test can be converted to TestNG" enabled="false">&lt;html&gt;&lt;body&gt;
    This inspection will convert your existing JUnit based unit tests into TestNG based unit tests.
&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="DuplicatedDataProviderNames" displayName="Duplicated data provider names" enabled="false">&lt;html&gt;
&lt;body&gt;
Inspection detects TestNG data providers with equal names.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DataProviderReturnType" displayName="Invalid data provider return type" enabled="false">&lt;html&gt;
&lt;body&gt;
Inspection checks that method which is marked with &lt;b&gt;@DataProvider&lt;/b&gt; annotation
returns &lt;b&gt;Object[][]&lt;/b&gt; or &lt;b&gt;Iterator&amp;lt;Object&amp;gt;&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimplifiedTestNGAssertion" displayName="Simplifiable TestNG assertion" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any TestNG &lt;b&gt;assert&lt;/b&gt; calls which can be replaced by simpler but equivalent calls.
&lt;table&gt;
  &lt;tr&gt;&lt;th&gt;Example&lt;/th&gt;&lt;th&gt;&amp;rarr;&lt;/th&gt;&lt;th&gt;Replacement&lt;/th&gt;&lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;assertEquals(x(), &lt;b&gt;true&lt;/b&gt;);&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;assertTrue(x());&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;assertTrue(y() != null);&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;assertNotNull(y());&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;assertTrue(z == z());&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;assertSame(z, z());&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;assertTrue(a.equals(a()));&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;assertEquals(a, a());&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;assertTrue(&lt;b&gt;false&lt;/b&gt;);&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;fail();&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="dependsOnMethodTestNG" displayName="&apos;dependsOnMethods&apos; problem" enabled="false">&lt;html&gt;&lt;body&gt;
    This inspection checks that the dependsOnMethod attribute points to a valid, accessable
    @Test annotated method in the current class, or any of its parent classes.
&lt;/body&gt;&lt;/html&gt;
</inspection>
    <inspection shortName="ConvertOldAnnotations" displayName="Old TestNG annotation @Configuration is used" enabled="false">&lt;html&gt;&lt;body&gt;
    This inspection will assert to convert your older @Configuration TestNG annotions to the new
    @BeforeXXX/@AfterXXX style annotations.
&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="MisorderedAssertEqualsArgumentsTestNG" displayName="Misordered &apos;assertEquals()&apos; arguments" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to TestNG &lt;b&gt;assertEquals()&lt;/b&gt; which have
a non-literal as the expected result argument and a literal as the actual result argument. Such calls
will behave fine for assertions which pass, but may give confusing error reports if their expected and actual
arguments differ.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UndeclaredTests" displayName="Undeclared test" enabled="false">&lt;html&gt;&lt;body&gt;
    This inspection checks if none of your testng.xml files contains current test class.
&lt;/body&gt;&lt;/html&gt;</inspection>
  </group>
  <group name="Internationalization">
    <inspection shortName="StringToUpperWithoutLocale" displayName="Call to &apos;String.toUpperCase()&apos; or &apos;toLowerCase()&apos; without a Locale" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any call of &lt;b&gt;toUpperCase()&lt;/b&gt; or
&lt;b&gt;toLowerCase()&lt;/b&gt; on &lt;b&gt;String&lt;/b&gt; objects which
do not specify a &lt;b&gt;java.util.Locale&lt;/b&gt;.
In these cases the default locale of the system is used, which can cause problems in an internationalized environment.
&lt;p&gt;
For example the code &lt;b&gt;&quot;i&quot;.toUpperCase().equals(&quot;I&quot;)&lt;/b&gt; returns &lt;b&gt;false&lt;/b&gt; in the Turkish and Azerbaijani locales,
where the dotted and dotless &apos;i&apos; are separate letters.
Calling &lt;b&gt;toUpperCase()&lt;/b&gt; on an English string containing an &apos;i&apos;, when running on a Turkish system, will return incorrect results.
Alternatively when dealing with strings that should be treated locale independently, like HTML tags, this can lead to errors.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AbsoluteAlignmentInUserInterface" displayName="Absolute alignment used in AWT/Swing code" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports usages of absolute alignment constants from AWT and Swing. Internationalized applications should make use of
relative alignment, because it respects locale component orientation settings.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ImplicitDefaultCharsetUsage" displayName="Implicit usage of platform&apos;s default charset" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports method and constructor calls which implicitly use the platform&apos;s default charset.
These can produce different results on (e.g. foreign language) systems that use a different default charset,
resulting in unexpected behaviour. A quick-fix could be suggested to specify explicit UTF-8 charset
if the corresponding overloaded method is available.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonAsciiCharacters" displayName="Non-ASCII characters" enabled="false">&lt;html&gt;
&lt;body&gt;

This inspection warns you of the code accidentally written in the wrong encoding.&lt;br&gt;

For example, &lt;br&gt;
&lt;ul&gt;
  &lt;li&gt;Non-ASCII characters used in the names/strings/comments or&lt;/li&gt;
  &lt;li&gt;Identifiers written in different languages
    (e.g. when in the variable &quot;&lt;code&gt;my&lt;span color=&quot;red&quot;&gt;C&lt;/span&gt;ollection&lt;/code&gt;&quot;
    the letter &lt;code&gt;&lt;span color=&quot;red&quot;&gt;C&lt;/span&gt;&lt;/code&gt; written in Cyrillic) or&lt;/li&gt;
  &lt;li&gt;Unicode symbols used in comments or strings
    (e.g. long dashes and arrows in the comment
    &quot;&lt;code&gt;// a &lt;span color=&quot;red&quot;&gt;→&lt;/span&gt; !a &lt;span color=&quot;red&quot;&gt;—&lt;/span&gt; please note&lt;/code&gt;&quot;)&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NumericToString" displayName="Call to Numeric &apos;toString()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any call of &lt;b&gt;toString()&lt;/b&gt; on numeric objects. Such calls are usually
incorrect in an internationalized environment.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DateToString" displayName="Call to &apos;Date.toString()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any call of &lt;b&gt;toString()&lt;/b&gt; on &lt;b&gt;java.util.Date&lt;/b&gt; objects. Such calls are usually
incorrect in an internationalized environment.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TimeToString" displayName="Call to &apos;Time.toString()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any call of &lt;b&gt;toString()&lt;/b&gt; on &lt;b&gt;java.sql.Time&lt;/b&gt; objects. Such calls are usually
incorrect in an internationalized environment.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DialogTitleCapitalization" displayName="Incorrect string capitalization" enabled="false">&lt;html&gt;&lt;body&gt;
This inspection checks strings in method parameters and return values annotated with @Nls annotation with &quot;capitalization&quot; parameter
to confirm with capitalization rules, which is required by most platform UI guidelines.
&lt;/body&gt;&lt;/html&gt;</inspection>
    <inspection shortName="StringConcatenation" displayName="String concatenation" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any String concatenation (&lt;b&gt;+&lt;/b&gt;). Concatenation is usually
incorrect in an internationalized environment, and should be replaced by uses of
&lt;b&gt;java.text.MessageFormat&lt;/b&gt; or similar classes.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CallToSuspiciousStringMethod" displayName="Call to suspicious String method" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any call of &lt;b&gt;equals()&lt;/b&gt;, &lt;b&gt;equalsIgnoreCase()&lt;/b&gt;, &lt;b&gt;compareTo()&lt;/b&gt; or &lt;b&gt;compareToIgnoreCase()&lt;/b&gt; on &lt;b&gt;String&lt;/b&gt; objects.
Such calls are usually incorrect in an internationalized environment.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LossyEncoding" displayName="Lossy encoding" enabled="false">&lt;html&gt;
&lt;body&gt;

This inspection warns you of characters that the current document encoding is incapable to represent. &lt;br&gt;

For example, when you are &lt;br&gt;
&lt;ul&gt;
  &lt;li&gt;typing international characters in a document configured to &lt;b&gt;US-ASCII&lt;/b&gt; charset. Some characters will be lost on save.&lt;/li&gt;
  &lt;li&gt;or loading &lt;b&gt;UTF-8&lt;/b&gt;-encoded file using &lt;b&gt;ISO-8859-1&lt;/b&gt; one-byte charset. Some characters will be displayed incorrectly.&lt;/li&gt;
&lt;/ul&gt;

You fix this by changing the file encoding,
either by specifying the encoding directly in the file, e.g. by editing &lt;b&gt;encoding=&lt;/b&gt; attribute in the XML prolog of XML file,
or configuring the &lt;b&gt;Settings|Project Settings|File Encodings&lt;/b&gt; .

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryUnicodeEscape" displayName="Unnecessary unicode escape sequence" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports unicode escape sequences that are unnecessary, i.e. the file&apos;s encoding can handle the character without escaping it.
Unicode control characters, except for line feed and tab,  are not reported by this inspection.
  &lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HardCodedStringLiteral" displayName="Hard coded strings" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports any instances of hardcoded String literals. Hardcoded string literals are probably errors in
an internationalized environment. This inspection won&apos;t report empty strings and strings consisting of only whitespace.

&lt;p&gt;
  The checkboxes below may be used to further specialize whether this inspection should report
  strings in:
&lt;ul&gt;
  &lt;li&gt;assert statements, like in &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;assert str.equals(&lt;font color=&quot;#008000&quot;&gt;&quot;message&quot;&lt;/font&gt;)&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;exception constructor calls, like in &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;new Exception(&lt;font color=&quot;#008000&quot;&gt;&quot;message&quot;&lt;/font&gt;)&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;JUnit assert calls, like in &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;assertEquals(str, &lt;font color=&quot;#008000&quot;&gt;&quot;message&quot;&lt;/font&gt;)&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;the only argument to a method returning String, like in &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;getStringByKey(&lt;font
      color=&quot;#008000&quot;&gt;&quot;key&quot;&lt;/font&gt;)&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;literals with value of legal and existing class name like &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;Class.forName(&lt;font color=&quot;#008000&quot;&gt;&quot;java.lang.Object&quot;&lt;/font&gt;);&lt;/font&gt;&lt;/b&gt;
  &lt;/li&gt;
  &lt;li&gt;literals with value of legal and existing property key &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;bundle.getString(&lt;font color=&quot;#008000&quot;&gt;&quot;authentication.failed&quot;&lt;/font&gt;);&lt;/font&gt;&lt;/b&gt;
  &lt;/li&gt;
&lt;/ul&gt;

There is a quickfix provided that transforms a Java code string literal
into a &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.util.ResourceBundle.getString()&lt;/font&gt;&lt;/b&gt;
method call.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DuplicateStringLiteralInspection" displayName="Duplicate string literal" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports all string literals which are replicated unchanged throughout the project.
&lt;br&gt; For example:
&lt;code&gt;&lt;pre&gt;
class C1 { String CONST1=&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&quot;duplicate string&quot;&lt;/font&gt;&lt;/b&gt;; }
class C2 { String CONST2=&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&quot;duplicate string&quot;&lt;/font&gt;&lt;/b&gt;; }
&lt;/pre&gt;
&lt;/code&gt;

The &apos;&lt;b&gt;Ignore @PropertyKey expressions&lt;/b&gt;&apos; option allows you to ignore
strings passed as arguments to methods annotated with &lt;b&gt;org.jetbrains.annotations.PropertyKey&lt;/b&gt; annotation.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MagicCharacter" displayName="Magic character" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &quot;magic characters&quot;, which are character literals used without being named by a constant declaration.
Magic characters can result in code whose intention is unclear, and may result in errors if a magic
character is changed in one code location but not another. Such use can complicate internationalization
efforts.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimpleDateFormatWithoutLocale" displayName="Instantiating a SimpleDateFormat without a Locale" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any instantiations of &lt;b&gt;java.util.SimpleDateFormat&lt;/b&gt;
which do not specify a &lt;b&gt;java.util.Locale&lt;/b&gt;.
Such calls are usually incorrect in an internationalized environment.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringTokenizer" displayName="Use of StringTokenizer" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any use of the &lt;b&gt;StringTokenizer&lt;/b&gt; class. Many uses of
&lt;b&gt;StringTokenizer&lt;/b&gt; are incorrect in an internationalized environment.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CharacterComparison" displayName="Character comparison" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any ordinal comparison of &lt;b&gt;char&lt;/b&gt; values. In an internationalized
environment, such comparisons are rarely correct.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Gradle">
    <inspection shortName="GradleKotlinxCoroutinesDeprecation" displayName="Incompatible kotlinx.coroutines dependency is used with Kotlin 1.3+ in Gradle" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;kotlinx.coroutines&lt;/b&gt; libraries dependencies in Gradle that should be updated in order
to be compatible with Kotlin 1.3+.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Bitwise operation issues">
    <inspection shortName="ShiftOutOfRange" displayName="Shift operation by inappropriate constant" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports shift operations
where the value shifted by is constant and outside of the reasonable range. Integer
shift operations outside of the range &lt;b&gt;0..31&lt;/b&gt; and long shift operations outside of the
range &lt;b&gt;0..63&lt;/b&gt; are reported. Shifting by negative or overly large values is almost certainly
a coding error.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PointlessBitwiseExpression" displayName="Pointless bitwise expression" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports pointless bitwise
expressions. Such expressions include &lt;b&gt;and&lt;/b&gt;ing with zero, &lt;b&gt;or&lt;/b&gt;ing by zero,
and shifting by zero. Such expressions may be the result of automated refactorings
not completely followed through to completion, and in any case are unlikely to be what the developer
intended to do.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IncompatibleMask" displayName="Incompatible bitwise mask operation" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports bitwise mask expressions which are guaranteed to
evaluate to &lt;b&gt;true&lt;/b&gt; or &lt;b&gt;false&lt;/b&gt;.
Expressions checked are of the form &lt;b&gt;&lt;i&gt;(var &amp; constant1) == constant2&lt;/i&gt;&lt;/b&gt; or
&lt;b&gt;&lt;i&gt;(var | constant1) == constant2&lt;/i&gt;&lt;/b&gt;, where &lt;b&gt;&lt;i&gt;constant1&lt;/i&gt;&lt;/b&gt;
and &lt;b&gt;&lt;i&gt;constant2&lt;/i&gt;&lt;/b&gt; are incompatible bitmask constants.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Java interop issues">
    <inspection shortName="HasPlatformType" displayName="Function or property has platform type" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports functions and properties that have a platform type. In order to prevent unexpected errors, the type should be declared explicitly.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="KotlinInternalInJava" displayName="Usage of Kotlin internal declarations from Java" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports usages of Kotlin internal declarations in Java code from a different module.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PackageDirectoryMismatch" displayName="Package name does not match containing directory" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports file&apos;s &lt;b&gt;package&lt;/b&gt; directive not matching the location of the file.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantNotNullExtensionReceiverOfInline" displayName="Not-null extension receiver of inline function can be made nullable" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports inline functions with not-null extension receivers which does not use the fact that extension receiver is not null.
Such functions are dangerous to call in Kotlin 1.2 on actual nullable flexible receiver type.
Consider making receiver type nullable.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FakeJvmFieldConstant" displayName="Kotlin non-const property used as Java constant" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  This inspection reports non-&lt;b&gt;const&lt;/b&gt; Kotlin properties used as Java annotation arguments.
  It is possible for a property which is annotated with &lt;b&gt;@JvmField&lt;/b&gt;,
  has an initializer that can be evaluated at compile-time, has a primitive or &lt;b&gt;String&lt;/b&gt; type.
  Such properties have a &lt;b&gt;ConstantValue&lt;/b&gt; attribute in bytecode in Kotlin 1.1-1.2.
  This attribute allows javac to fold usages of the corresponding field and use that field in annotations.
  This can cause incorrect behavior in case of separate or incremental compilation in mixed Java/Kotlin code.
&lt;/p&gt;
&lt;p&gt;
  This behavior is subject to change in Kotlin 1.3 (no &lt;b&gt;ConstantValue&lt;/b&gt; attribute any more).
  Recommended action: replace the &lt;b&gt;@JvmField&lt;/b&gt; annotation with a &lt;b&gt;const&lt;/b&gt; modifier on a relevant Kotlin property or inline it.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JavaCollectionsStaticMethodOnImmutableList" displayName="Call of Java mutator method on immutable Kotlin collection" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection report calls of Java mutator methods (like &lt;b&gt;fill&lt;/b&gt;, &lt;b&gt;reverse&lt;/b&gt;, &lt;b&gt;shuffle&lt;/b&gt;, &lt;b&gt;sort&lt;/b&gt;) on an immutable Kotlin collection.
This will likely produce an &lt;b&gt;UnsupportedOperationException&lt;/b&gt; at runtime.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PlatformExtensionReceiverOfInline" displayName="Unsafe call of inline function with nullable extension receiver" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection reports potentially unsafe calls of inline functions with flexible nullable (platform type with unknown nullability) extension receivers.
In Kotlin 1.0 or 1.1, such calls do not include nullability check in bytecode,
but in Kotlin 1.2, nullability check is included and can provoke NPE if actual receiver is null.
It&apos;s recommended to add explicit &lt;b&gt;!!&lt;/b&gt; if exception is what you want,
or consider changing the function&apos;s receiver type to nullable if it should work without exceptions.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
</inspections>